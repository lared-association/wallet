import { AddressResolutionStatement, MosaicIdResolutionStatement } from '../../model/receipt/ResolutionStatement';
import { TransactionStatement } from '../../model/receipt/TransactionStatement';
import { ReceiptRepository } from '../ReceiptRepository';
import { ResolutionStatementSearchCriteria } from '../searchCriteria/ResolutionStatementSearchCriteria';
import { TransactionStatementSearchCriteria } from '../searchCriteria/TransactionStatementSearchCriteria';
import { PaginationStreamer } from './PaginationStreamer';
/**
 * A helper object that streams {@link Statement} using the search.
 */
export declare class ReceiptPaginationStreamer {
    /**
     * It creates a transaction statement streamer of TransactionStatement objects.
     *
     * @param repository the {@link ReceiptRepository} repository
     * @return a new Pagination Streamer.
     */
    static transactionStatements(repository: ReceiptRepository): PaginationStreamer<TransactionStatement, TransactionStatementSearchCriteria>;
    /**
     * It creates a transaction statement streamer of AddressResolutionStatement objects.
     *
     * @param repository the {@link ReceiptRepository} repository
     * @return a new Pagination Streamer.
     */
    static addressResolutionStatements(repository: ReceiptRepository): PaginationStreamer<AddressResolutionStatement, ResolutionStatementSearchCriteria>;
    /**
     * It creates a mosaic resolution statement streamer of MosaicResolutionStatement objects.
     *
     * @param repository the {@link ReceiptRepository} repository
     * @return a new Pagination Streamer.
     */
    static mosaicResolutionStatements(repository: ReceiptRepository): PaginationStreamer<MosaicIdResolutionStatement, ResolutionStatementSearchCriteria>;
}

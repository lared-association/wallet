import { Observable } from 'rxjs';
import { MosaicAddressRestriction } from '../model/restriction/MosaicAddressRestriction';
import { MosaicGlobalRestriction } from '../model/restriction/MosaicGlobalRestriction';
import { Http } from './Http';
import { Page } from './Page';
import { RestrictionMosaicRepository } from './RestrictionMosaicRepository';
import { RestrictionMosaicSearchCriteria } from './searchCriteria/RestrictionMosaicSearchCriteria';
/**
 * RestrictionMosaic http repository.
 *
 * @since 1.0
 */
export declare class RestrictionMosaicHttp extends Http implements RestrictionMosaicRepository {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url: string, fetchApi?: any);
    /**
     * Returns a mosaic restrictions page based on the criteria.
     *
     * @param criteria the criteria
     * @return a page of {@link MosaicAddressRestriction | MosaicGlobalRestriction}
     */
    searchMosaicRestrictions(criteria: RestrictionMosaicSearchCriteria): Observable<Page<MosaicAddressRestriction | MosaicGlobalRestriction>>;
    private static toMosaicGlobalRestrictionItem;
    private static toMosaicAddressRestrictionItem;
}

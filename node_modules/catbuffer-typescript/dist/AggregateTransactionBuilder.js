"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateTransactionBuilder = void 0;
const GeneratorUtils_1 = require("./GeneratorUtils");
const AggregateTransactionBodyBuilder_1 = require("./AggregateTransactionBodyBuilder");
const TransactionBuilder_1 = require("./TransactionBuilder");
class AggregateTransactionBuilder extends TransactionBuilder_1.TransactionBuilder {
    constructor(signature, signerPublicKey, version, network, type, fee, deadline, transactionsHash, transactions, cosignatures) {
        super(signature, signerPublicKey, version, network, type, fee, deadline);
        GeneratorUtils_1.GeneratorUtils.notNull(signature, 'signature is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(signerPublicKey, 'signerPublicKey is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(version, 'version is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(network, 'network is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(type, 'type is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(fee, 'fee is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(deadline, 'deadline is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(transactionsHash, 'transactionsHash is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(transactions, 'transactions is null or undefined');
        GeneratorUtils_1.GeneratorUtils.notNull(cosignatures, 'cosignatures is null or undefined');
        this.aggregateTransactionBody = new AggregateTransactionBodyBuilder_1.AggregateTransactionBodyBuilder(transactionsHash, transactions, cosignatures);
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const superObject = TransactionBuilder_1.TransactionBuilder.loadFromBinary(payload);
        byteArray.splice(0, superObject.getSize());
        const aggregateTransactionBody = AggregateTransactionBodyBuilder_1.AggregateTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, aggregateTransactionBody.getSize());
        return new AggregateTransactionBuilder(superObject.signature, superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, superObject.fee, superObject.deadline, aggregateTransactionBody.transactionsHash, aggregateTransactionBody.transactions, aggregateTransactionBody.cosignatures);
    }
    static createAggregateTransactionBuilder(signature, signerPublicKey, version, network, type, fee, deadline, transactionsHash, transactions, cosignatures) {
        return new AggregateTransactionBuilder(signature, signerPublicKey, version, network, type, fee, deadline, transactionsHash, transactions, cosignatures);
    }
    getTransactionsHash() {
        return this.aggregateTransactionBody.getTransactionsHash();
    }
    getTransactions() {
        return this.aggregateTransactionBody.getTransactions();
    }
    getCosignatures() {
        return this.aggregateTransactionBody.getCosignatures();
    }
    getSize() {
        let size = super.getSize();
        size += this.aggregateTransactionBody.getSize();
        return size;
    }
    getBody() {
        return this.aggregateTransactionBody;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const superBytes = super.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        const aggregateTransactionBodyBytes = this.aggregateTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, aggregateTransactionBodyBytes);
        return newArray;
    }
}
exports.AggregateTransactionBuilder = AggregateTransactionBuilder;
//# sourceMappingURL=AggregateTransactionBuilder.js.map
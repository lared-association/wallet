{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/MnemonicInput/MnemonicInputTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/MnemonicInput/MnemonicInputTs.ts","mtime":1606213958957},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/components/MnemonicInput/MnemonicInputTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue, Prop, Watch } from 'vue-property-decorator';\n\n// internal dependencies\n\n// @ts-ignore\nimport ButtonCopyToClipboard from '@/components/ButtonCopyToClipboard/ButtonCopyToClipboard.vue';\nimport { Formatters } from '@/core/utils/Formatters';\n@Component({\n    components: { ButtonCopyToClipboard },\n})\nexport class MnemonicInputTs extends Vue {\n    /**\n     * @description: initial seed data\n     */\n    @Prop({ default: '' })\n    public seed: string;\n\n    /**\n     * @description: wordsArray\n     */\n    public wordsArray: Array<string> = [];\n\n    /**\n     * @description: status of isEditing\n     */\n    public isEditing: boolean = false;\n\n    /**\n     * @description: isNeedPressDelTwice\n     */\n    public isNeedPressDelTwice = true;\n\n    /**\n     * @description: watch the inputform\n     */\n    public inputWord: string = '';\n\n    public get userInput(): string {\n        return this.inputWord;\n    }\n    public set userInput(input: string) {\n        // avoid cache\n        this.inputWord = input;\n        // add the limit\n        if (this.wordsArray.length >= 24) {\n            this.inputWord = '';\n            this.initInput();\n        } else {\n            // control the keyboard input rules\n            this.inputWord = input.replace(/[^a-zA-Z]/g, '');\n            // determine if the input is editing status\n            if (!this.isEditing && !!this.inputWord) {\n                this.isEditing = true;\n            }\n        }\n    }\n    public get waitingCopyString(): string {\n        return Formatters.splitArrayByDelimiter(this.wordsArray);\n    }\n\n    /**\n     * @description: add word to the wordsArray\n     */\n    addWord() {\n        if (this.inputWord.length >= 2 && this.inputWord.length <= 50) {\n            if (this.wordsArray.length < 24) {\n                this.handleWordsArray(this.inputWord);\n                this.inputWord = '';\n                this.initInput();\n            }\n        }\n    }\n\n    /**\n     * @description: delete the word\n     */\n    deleteWord() {\n        if (this.inputWord) {\n            this.isNeedPressDelTwice = true;\n        } else {\n            if (this.isEditing) {\n                if (this.isNeedPressDelTwice) {\n                    this.isNeedPressDelTwice = false;\n                    return;\n                }\n                this.handleWordsArray();\n                this.initInput();\n            } else {\n                this.handleWordsArray();\n                this.initInput();\n            }\n        }\n    }\n\n    /**\n     * @description: add one word  or reduce one word\n     */\n    handleWordsArray(item?) {\n        if (!!item) {\n            this.wordsArray.push(item);\n        } else {\n            this.wordsArray.pop();\n        }\n        // transform to lower case\n        this.wordsArray.forEach((item: string, index) => {\n            this.wordsArray[index] = item.toLowerCase();\n        });\n        this.$emit('handle-words', this.wordsArray);\n    }\n\n    handlePaste(e: ClipboardEvent) {\n        this.handleSeed(e.clipboardData.getData('text').toString());\n    }\n\n    /**\n     * @description handles seed data changes\n     * @param seed imported/pasted seed data\n     */\n    @Watch('seed', { immediate: true })\n    private handleSeed(seed: string) {\n        if (!seed) {\n            return;\n        }\n        const pasteDataArr: Array<string> = seed.trim().split(/\\s+/g);\n        pasteDataArr.forEach((pasteData) => {\n            if (!!pasteData && this.wordsArray.length < 24) {\n                this.handleWordsArray(pasteData);\n            }\n        });\n    }\n    /**\n     * @description: init input\n     */\n    initInput() {\n        this.isNeedPressDelTwice = true;\n        this.isEditing = false;\n    }\n}\n"],"sourceRoot":""}]}
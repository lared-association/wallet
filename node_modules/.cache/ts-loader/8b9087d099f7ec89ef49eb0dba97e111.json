{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/MultisigService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/MultisigService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJ3N5bWJvbC1zZGsnOwpleHBvcnQgdmFyIE11bHRpc2lnU2VydmljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTXVsdGlzaWdTZXJ2aWNlKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11bHRpc2lnU2VydmljZSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoTXVsdGlzaWdTZXJ2aWNlLCBbewogICAga2V5OiAiZ2V0U2lnbmVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2lnbmVycyhuZXR3b3JrVHlwZSwga25vd25BY2NvdW50cywgY3VycmVudEFjY291bnQsIGN1cnJlbnRBY2NvdW50TXVsdGlzaWdJbmZvLCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzCiAgICBtdWx0aXNpZ0FjY291bnRzSW5mbykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCFjdXJyZW50QWNjb3VudCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQoKICAgICAgdmFyIHNlbGYgPSBbewogICAgICAgIGFkZHJlc3M6IEFkZHJlc3MuY3JlYXRlRnJvbVJhd0FkZHJlc3MoY3VycmVudEFjY291bnQuYWRkcmVzcyksCiAgICAgICAgbGFiZWw6IGN1cnJlbnRBY2NvdW50Lm5hbWUsCiAgICAgICAgbXVsdGlzaWc6IGN1cnJlbnRBY2NvdW50TXVsdGlzaWdJbmZvICYmIGN1cnJlbnRBY2NvdW50TXVsdGlzaWdJbmZvLmlzTXVsdGlzaWcoKSwKICAgICAgICByZXF1aXJlZENvc2lnbmF0dXJlczogY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8gJiYgY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8ubWluQXBwcm92YWwgfHwgMAogICAgICB9XTsKCiAgICAgIGlmICghY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8pIHsKICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgfSAvLyBjaGVjayBpZiBvdGhlciBjaGlsZCBtdWx0aXNpZyBhY2NvdW50cyBhcmUgYWxyZWFkeSBjb3NpZ25lcnMgb2Ygb3RoZXIgYWNjb3VudHMgYW5kIGFkZCB0aGVpciBjaGlsZHJlbiBtdWx0aXNpZyBhcyBzaWduZXJzIGlmIGFueSB0byB0aGUgbWFpbiBjb3NpZ25hdG9yeSBhY2NvdW50CgoKICAgICAgdmFyIGFkZGVkU2lnbmVyRnJvbU11dGxpc2lnQWNjb3VudHMgPSBbXS5jb25jYXQoc2VsZik7CiAgICAgIG11bHRpc2lnQWNjb3VudHNJbmZvLm1hcChmdW5jdGlvbiAoZW50cnkpIHsKICAgICAgICBpZiAoKGVudHJ5Lm1pbkFwcHJvdmFsID4gMCB8fCBlbnRyeS5taW5SZW1vdmFsID4gMCkgJiYgZW50cnkubXVsdGlzaWdBZGRyZXNzZXMubGVuZ3RoID4gMCAmJiBlbnRyeS5jb3NpZ25hdG9yeUFkZHJlc3Nlcy5zb21lKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHZhbHVlLmVxdWFscyhBZGRyZXNzLmNyZWF0ZUZyb21SYXdBZGRyZXNzKGN1cnJlbnRBY2NvdW50LmFkZHJlc3MpKTsKICAgICAgICB9KSkgewogICAgICAgICAgZW50cnkubXVsdGlzaWdBZGRyZXNzZXMubWFwKGZ1bmN0aW9uIChhZGRyZXNzKSB7CiAgICAgICAgICAgIGlmICghYWRkZWRTaWduZXJGcm9tTXV0bGlzaWdBY2NvdW50cy5zb21lKGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsLmFkZHJlc3MuZXF1YWxzKGFkZHJlc3MpOwogICAgICAgICAgICB9KSkgewogICAgICAgICAgICAgIHJldHVybiBhZGRlZFNpZ25lckZyb21NdXRsaXNpZ0FjY291bnRzID0gYWRkZWRTaWduZXJGcm9tTXV0bGlzaWdBY2NvdW50cy5jb25jYXQoW3sKICAgICAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3MsCiAgICAgICAgICAgICAgICBtdWx0aXNpZzogdHJ1ZSwKICAgICAgICAgICAgICAgIGxhYmVsOiBfdGhpcy5nZXRBY2NvdW50TGFiZWwoYWRkcmVzcywga25vd25BY2NvdW50cyksCiAgICAgICAgICAgICAgICByZXF1aXJlZENvc2lnbmF0dXJlczogY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8gJiYgY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8ubWluQXBwcm92YWwgfHwgMAogICAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsgLy8gY2hlY2sgZm9yIG5leHQgbGV2ZWwgc2lnbmVycyBhbmQgYWRkIHRoZW0gdG8gdGhlIG1haW4gY29zaWduYXRvcnkgYXMgc2lnbmVycyBpZiBhbnkKCiAgICAgIHZhciBhZGRyZXNzZXNGcm9tTmV4dExldmVsID0gW10uY29uY2F0KGFkZGVkU2lnbmVyRnJvbU11dGxpc2lnQWNjb3VudHMpOwogICAgICBtdWx0aXNpZ0FjY291bnRzSW5mby5tYXAoZnVuY3Rpb24gKHRlcm0pIHsKICAgICAgICBpZiAoIXRlcm0uYWNjb3VudEFkZHJlc3MuZXF1YWxzKEFkZHJlc3MuY3JlYXRlRnJvbVJhd0FkZHJlc3MoY3VycmVudEFjY291bnQuYWRkcmVzcykpICYmICFhZGRyZXNzZXNGcm9tTmV4dExldmVsLmZpbmQoZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgcmV0dXJuIHZhbC5hZGRyZXNzLmVxdWFscyh0ZXJtLmFjY291bnRBZGRyZXNzKTsKICAgICAgICB9KSkgewogICAgICAgICAgcmV0dXJuIGFkZHJlc3Nlc0Zyb21OZXh0TGV2ZWwgPSBhZGRyZXNzZXNGcm9tTmV4dExldmVsLmNvbmNhdChbewogICAgICAgICAgICBhZGRyZXNzOiB0ZXJtLmFjY291bnRBZGRyZXNzLAogICAgICAgICAgICBtdWx0aXNpZzogdHJ1ZSwKICAgICAgICAgICAgbGFiZWw6IF90aGlzLmdldEFjY291bnRMYWJlbCh0ZXJtLmFjY291bnRBZGRyZXNzLCBrbm93bkFjY291bnRzKSwKICAgICAgICAgICAgcmVxdWlyZWRDb3NpZ25hdHVyZXM6IGN1cnJlbnRBY2NvdW50TXVsdGlzaWdJbmZvICYmIGN1cnJlbnRBY2NvdW50TXVsdGlzaWdJbmZvLm1pbkFwcHJvdmFsIHx8IDAKICAgICAgICAgIH1dKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gYWRkcmVzc2VzRnJvbU5leHRMZXZlbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBY2NvdW50TGFiZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFjY291bnRMYWJlbChhZGRyZXNzLCBhY2NvdW50cykgewogICAgICB2YXIgYWNjb3VudCA9IGFjY291bnRzLmZpbmQoZnVuY3Rpb24gKHdsdCkgewogICAgICAgIHJldHVybiBhZGRyZXNzLnBsYWluKCkgPT09IHdsdC5hZGRyZXNzOwogICAgICB9KTsKICAgICAgcmV0dXJuIGFjY291bnQgJiYgYWNjb3VudC5uYW1lIHx8IGFkZHJlc3MucGxhaW4oKTsKICAgIH0KICB9XSwgW3sKICAgIGtleTogImdldE11bHRpc2lnSW5mb0Zyb21NdWx0aXNpZ0dyYXBoSW5mbyIsCgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFsbCBhdmFpbGFibGUgbXVsdGlzaWcgaW5mbyBmcm9tIGEgbXVsdGlzaWcgZ3JhcGgKICAgICAqIEBzdGF0aWMKICAgICAqIEBwYXJhbSB7TXVsdGlzaWdBY2NvdW50R3JhcGhJbmZvfSBtdWx0aXNpZyBncmFwaCBpbmZvCiAgICAgKiBAcmV0dXJucyB7TXVsdGlzaWdBY2NvdW50SW5mb1tdfSBtdWx0aXNpZyBpbmZvCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNdWx0aXNpZ0luZm9Gcm9tTXVsdGlzaWdHcmFwaEluZm8oZ3JhcGhJbmZvKSB7CiAgICAgIHZhciBfcmVmOwoKICAgICAgdmFyIG11bHRpc2lnRW50cmllcyA9IGdyYXBoSW5mby5tdWx0aXNpZ0VudHJpZXM7CiAgICAgIHJldHVybiAoX3JlZiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZiwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuZ2V0TXVsdGlzaWdHcmFwaEFycmF5U29ydGVkKG11bHRpc2lnRW50cmllcykpKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbTsKICAgICAgfSk7IC8vIGZsYXR0ZW4KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNdWx0aXNpZ0dyYXBoQXJyYXlTb3J0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE11bHRpc2lnR3JhcGhBcnJheVNvcnRlZChtdWx0aXNpZ0VudHJpZXMpIHsKICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShtdWx0aXNpZ0VudHJpZXMua2V5cygpKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICB9KSAvLyBHZXQgYWRkcmVzc2VzIGZyb20gdG9wIHRvIGJvdHRvbQogICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gbXVsdGlzaWdFbnRyaWVzLmdldChrZXkpIHx8IFtdOwogICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsKICAgICAgICByZXR1cm4geC5sZW5ndGggPiAwOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBNdWx0aXNpZ1NlcnZpY2U7Cn0oKTs="},{"version":3,"sources":["/home/hero/lared-wallet/src/services/MultisigService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, MultisigAccountGraphInfo, MultisigAccountInfo, NetworkType } from 'symbol-sdk';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { Signer } from '@/store/Account';\n\nexport class MultisigService {\n    /**\n     * Returns all available multisig info from a multisig graph\n     * @static\n     * @param {MultisigAccountGraphInfo} multisig graph info\n     * @returns {MultisigAccountInfo[]} multisig info\n     */\n    public static getMultisigInfoFromMultisigGraphInfo(graphInfo: MultisigAccountGraphInfo): MultisigAccountInfo[] {\n        const { multisigEntries } = graphInfo;\n        return [].concat(...this.getMultisigGraphArraySorted(multisigEntries)).map((item) => item); // flatten\n    }\n\n    public static getMultisigGraphArraySorted(multisigEntries: Map<number, MultisigAccountInfo[]>): MultisigAccountInfo[][] {\n        return [...multisigEntries.keys()]\n            .sort((a, b) => b - a) // Get addresses from top to bottom\n            .map((key) => multisigEntries.get(key) || [])\n            .filter((x) => x.length > 0);\n    }\n\n    public getSigners(\n        networkType: NetworkType,\n        knownAccounts: AccountModel[],\n        currentAccount: AccountModel,\n        currentAccountMultisigInfo: MultisigAccountInfo | undefined,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        multisigAccountsInfo: MultisigAccountInfo[] | undefined,\n    ): Signer[] {\n        if (!currentAccount) {\n            return [];\n        }\n        const self: Signer[] = [\n            {\n                address: Address.createFromRawAddress(currentAccount.address),\n                label: currentAccount.name,\n                multisig: currentAccountMultisigInfo && currentAccountMultisigInfo.isMultisig(),\n                requiredCosignatures: (currentAccountMultisigInfo && currentAccountMultisigInfo.minApproval) || 0,\n            },\n        ];\n\n        if (!currentAccountMultisigInfo) {\n            return self;\n        }\n\n        // check if other child multisig accounts are already cosigners of other accounts and add their children multisig as signers if any to the main cosignatory account\n        let addedSignerFromMutlisigAccounts: Signer[] = [].concat(self);\n        multisigAccountsInfo.map((entry) => {\n            if (\n                (entry.minApproval > 0 || entry.minRemoval > 0) &&\n                entry.multisigAddresses.length > 0 &&\n                entry.cosignatoryAddresses.some((value) => value.equals(Address.createFromRawAddress(currentAccount.address)))\n            ) {\n                entry.multisigAddresses.map((address) => {\n                    if (!addedSignerFromMutlisigAccounts.some((val) => val.address.equals(address))) {\n                        return (addedSignerFromMutlisigAccounts = addedSignerFromMutlisigAccounts.concat([\n                            {\n                                address: address,\n                                multisig: true,\n                                label: this.getAccountLabel(address, knownAccounts),\n                                requiredCosignatures: (currentAccountMultisigInfo && currentAccountMultisigInfo.minApproval) || 0,\n                            },\n                        ]));\n                    }\n                });\n            }\n        });\n\n        // check for next level signers and add them to the main cosignatory as signers if any\n        let addressesFromNextLevel: Signer[] = [].concat(addedSignerFromMutlisigAccounts);\n        multisigAccountsInfo.map((term) => {\n            if (\n                !term.accountAddress.equals(Address.createFromRawAddress(currentAccount.address)) &&\n                !addressesFromNextLevel.find((val) => val.address.equals(term.accountAddress))\n            ) {\n                return (addressesFromNextLevel = addressesFromNextLevel.concat([\n                    {\n                        address: term.accountAddress,\n                        multisig: true,\n                        label: this.getAccountLabel(term.accountAddress, knownAccounts),\n                        requiredCosignatures: (currentAccountMultisigInfo && currentAccountMultisigInfo.minApproval) || 0,\n                    },\n                ]));\n            }\n        });\n        return addressesFromNextLevel;\n    }\n\n    private getAccountLabel(address: Address, accounts: AccountModel[]): string {\n        const account = accounts.find((wlt) => address.plain() === wlt.address);\n        return (account && account.name) || address.plain();\n    }\n}\n"],"sourceRoot":""}]}
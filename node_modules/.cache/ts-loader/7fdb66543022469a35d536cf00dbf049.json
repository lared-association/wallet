{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Mosaic.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Mosaic.ts","mtime":1611927204476},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL21udC9jL1VzZXJzL2p1c3RpL0Rlc2t0b3AvU1VQRVJIT1cvU3ltYm9sV2FsbGV0L2xhcmVkLXdhbGxldC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IiOwoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgppbXBvcnQgeyBfX2F3YWl0ZXIgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IHsgTW9zYWljSWQgfSBmcm9tICdzeW1ib2wtc2RrJzsgLy8gaW50ZXJuYWwgZGVwZW5kZW5jaWVzCgppbXBvcnQgeyBBd2FpdExvY2sgfSBmcm9tICcuL0F3YWl0TG9jayc7CmltcG9ydCB7IE1vc2FpY1NlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL01vc2FpY1NlcnZpY2UnOwppbXBvcnQgeyBmaXJzdCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL01ldGFkYXRhU2VydmljZSc7CnZhciBMb2NrID0gQXdhaXRMb2NrLmNyZWF0ZSgpOyAvLyBtb3NhaWMgc3RhdGUgaW5pdGlhbCBkZWZpbml0aW9uCgp2YXIgbW9zYWljU3RhdGUgPSB7CiAgaW5pdGlhbGl6ZWQ6IGZhbHNlLAogIG5ldHdvcmtNb3NhaWNJZDogbnVsbCwKICBtb3NhaWNzOiBbXSwKICBiYWxhbmNlTW9zYWljczogW10sCiAgaG9sZE1vc2FpY3M6IFtdLAogIG93bmVkTW9zYWljczogW10sCiAgbmV0d29ya0N1cnJlbmN5OiBudWxsLAogIG5ldHdvcmtNb3NhaWNOYW1lOiAnJywKICBuZXR3b3JrTW9zYWljVGlja2VyOiAnJywKICBhY2NvdW50TW9zYWljQ29uZmlndXJhdGlvbnM6IHt9LAogIGlzRmV0Y2hpbmdNb3NhaWNzOiBmYWxzZQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogbW9zYWljU3RhdGUsCiAgZ2V0dGVyczogewogICAgZ2V0SW5pdGlhbGl6ZWQ6IGZ1bmN0aW9uIGdldEluaXRpYWxpemVkKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5pbml0aWFsaXplZDsKICAgIH0sCiAgICBuZXR3b3JrQ3VycmVuY3k6IGZ1bmN0aW9uIG5ldHdvcmtDdXJyZW5jeShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubmV0d29ya0N1cnJlbmN5OwogICAgfSwKICAgIG1vc2FpY3M6IGZ1bmN0aW9uIG1vc2FpY3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm1vc2FpY3M7CiAgICB9LAogICAgb3duZWRNb3NhaWNzOiBmdW5jdGlvbiBvd25lZE1vc2FpY3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm93bmVkTW9zYWljczsKICAgIH0sCiAgICBob2xkTW9zYWljczogZnVuY3Rpb24gaG9sZE1vc2FpY3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmhvbGRNb3NhaWNzOwogICAgfSwKICAgIGJhbGFuY2VNb3NhaWNzOiBmdW5jdGlvbiBiYWxhbmNlTW9zYWljcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuYmFsYW5jZU1vc2FpY3M7CiAgICB9LAogICAgbmV0d29ya01vc2FpYzogZnVuY3Rpb24gbmV0d29ya01vc2FpYyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubmV0d29ya01vc2FpY0lkOwogICAgfSwKICAgIG5ldHdvcmtNb3NhaWNUaWNrZXI6IGZ1bmN0aW9uIG5ldHdvcmtNb3NhaWNUaWNrZXIoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm5ldHdvcmtNb3NhaWNUaWNrZXI7CiAgICB9LAogICAgYWNjb3VudE1vc2FpY0NvbmZpZ3VyYXRpb25zOiBmdW5jdGlvbiBhY2NvdW50TW9zYWljQ29uZmlndXJhdGlvbnMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmFjY291bnRNb3NhaWNDb25maWd1cmF0aW9uczsKICAgIH0sCiAgICBuZXR3b3JrTW9zYWljTmFtZTogZnVuY3Rpb24gbmV0d29ya01vc2FpY05hbWUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm5ldHdvcmtNb3NhaWNOYW1lOwogICAgfSwKICAgIGlzRmV0Y2hpbmdNb3NhaWNzOiBmdW5jdGlvbiBpc0ZldGNoaW5nTW9zYWljcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuaXNGZXRjaGluZ01vc2FpY3M7CiAgICB9LAogICAgbmV0d29ya0JhbGFuY2VNb3NhaWNzOiBmdW5jdGlvbiBuZXR3b3JrQmFsYW5jZU1vc2FpY3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmJhbGFuY2VNb3NhaWNzLmZpbmQoZnVuY3Rpb24gKG0pIHsKICAgICAgICByZXR1cm4gbS5tb3NhaWNJZEhleCA9PT0gc3RhdGUubmV0d29ya01vc2FpY0lkLnRvSGV4KCk7CiAgICAgIH0pOwogICAgfQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzZXRJbml0aWFsaXplZDogZnVuY3Rpb24gc2V0SW5pdGlhbGl6ZWQoc3RhdGUsIGluaXRpYWxpemVkKSB7CiAgICAgIHN0YXRlLmluaXRpYWxpemVkID0gaW5pdGlhbGl6ZWQ7CiAgICB9LAogICAgbmV0d29ya0N1cnJlbmN5OiBmdW5jdGlvbiBuZXR3b3JrQ3VycmVuY3koc3RhdGUsIF9uZXR3b3JrQ3VycmVuY3kpIHsKICAgICAgVnVlLnNldChzdGF0ZSwgJ25ldHdvcmtDdXJyZW5jeScsIF9uZXR3b3JrQ3VycmVuY3kpOwogICAgICBWdWUuc2V0KHN0YXRlLCAnbmV0d29ya01vc2FpY0lkJywgbmV3IE1vc2FpY0lkKF9uZXR3b3JrQ3VycmVuY3kubW9zYWljSWRIZXgpKTsKICAgICAgVnVlLnNldChzdGF0ZSwgJ25ldHdvcmtNb3NhaWNOYW1lJywgX25ldHdvcmtDdXJyZW5jeS5uYW1lc3BhY2VJZEZ1bGxuYW1lKTsKICAgICAgVnVlLnNldChzdGF0ZSwgJ25ldHdvcmtNb3NhaWNUaWNrZXInLCBfbmV0d29ya0N1cnJlbmN5LnRpY2tlcik7CiAgICB9LAogICAgbW9zYWljczogZnVuY3Rpb24gbW9zYWljcyhzdGF0ZSwgX3JlZikgewogICAgICB2YXIgX21vc2FpY3MgPSBfcmVmLm1vc2FpY3MsCiAgICAgICAgICBjdXJyZW50U2lnbmVyQWRkcmVzcyA9IF9yZWYuY3VycmVudFNpZ25lckFkZHJlc3MsCiAgICAgICAgICBuZXR3b3JrQ3VycmVuY3kgPSBfcmVmLm5ldHdvcmtDdXJyZW5jeSwKICAgICAgICAgIG1vc2FpY01ldGFkYXRhTGlzdCA9IF9yZWYubW9zYWljTWV0YWRhdGFMaXN0OwoKICAgICAgdmFyIHVuaXF1ZU1vc2FpY3MgPSBfbW9zYWljcy5tYXAoZnVuY3Rpb24gKG1vc2FpYykgewogICAgICAgIG1vc2FpYy5tZXRhZGF0YUxpc3QgPSBNZXRhZGF0YVNlcnZpY2UuZ2V0TW9zYWljTWV0YWRhdGFCeVRhcmdldElkKG1vc2FpY01ldGFkYXRhTGlzdCwgbW9zYWljLm1vc2FpY0lkSGV4KTsKICAgICAgICByZXR1cm4gbW9zYWljOwogICAgICB9KTsKCiAgICAgIHZhciBvd25lZE1vc2FpY3MgPSB1bmlxdWVNb3NhaWNzLmZpbHRlcihmdW5jdGlvbiAobSkgewogICAgICAgIHJldHVybiBtLm93bmVyUmF3UGxhaW4gPT09IGN1cnJlbnRTaWduZXJBZGRyZXNzLnBsYWluKCkgJiYgbS5hZGRyZXNzUmF3UGxhaW4gPT09IGN1cnJlbnRTaWduZXJBZGRyZXNzLnBsYWluKCk7CiAgICAgIH0pOwogICAgICB2YXIgaG9sZE1vc2FpY3MgPSB1bmlxdWVNb3NhaWNzLmZpbHRlcihmdW5jdGlvbiAobSkgewogICAgICAgIHJldHVybiBtLmFkZHJlc3NSYXdQbGFpbiA9PT0gY3VycmVudFNpZ25lckFkZHJlc3MucGxhaW4oKTsKICAgICAgfSkuc29ydChmdW5jdGlvbiAobTEsIG0yKSB7CiAgICAgICAgdmFyIG93bmVyMSA9IG0xLm93bmVyUmF3UGxhaW4gPT09IGN1cnJlbnRTaWduZXJBZGRyZXNzLnBsYWluKCk7CiAgICAgICAgdmFyIG93bmVyMiA9IG0yLm93bmVyUmF3UGxhaW4gPT09IGN1cnJlbnRTaWduZXJBZGRyZXNzLnBsYWluKCk7CiAgICAgICAgcmV0dXJuIE51bWJlcihvd25lcjEpIC0gTnVtYmVyKG93bmVyMik7CiAgICAgIH0pOwogICAgICB2YXIgbm9Nb3NhaWMgPSBuZXR3b3JrQ3VycmVuY3kgJiYgIWhvbGRNb3NhaWNzLmZpbmQoZnVuY3Rpb24gKG0pIHsKICAgICAgICByZXR1cm4gbS5pc0N1cnJlbmN5TW9zYWljOwogICAgICB9KTsKICAgICAgdmFyIGJhbGFuY2VNb3NhaWNzID0gKG5vTW9zYWljID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShob2xkTW9zYWljcyksIFt7CiAgICAgICAgbW9zYWljSWRIZXg6IG5ldHdvcmtDdXJyZW5jeS5tb3NhaWNJZEhleCwKICAgICAgICBkaXZpc2liaWxpdHk6IG5ldHdvcmtDdXJyZW5jeS5kaXZpc2liaWxpdHksCiAgICAgICAgbmFtZTogbmV0d29ya0N1cnJlbmN5Lm5hbWVzcGFjZUlkRnVsbG5hbWUsCiAgICAgICAgaXNDdXJyZW5jeU1vc2FpYzogdHJ1ZSwKICAgICAgICBiYWxhbmNlOiAwCiAgICAgIH1dKSA6IF90b0NvbnN1bWFibGVBcnJheShob2xkTW9zYWljcykpLmZpbHRlcihmdW5jdGlvbiAobSkgewogICAgICAgIHJldHVybiBtLmlzQ3VycmVuY3lNb3NhaWMgfHwgbS5iYWxhbmNlID4gMDsKICAgICAgfSk7CiAgICAgIFZ1ZS5zZXQoc3RhdGUsICdtb3NhaWNzJywgdW5pcXVlTW9zYWljcyk7CiAgICAgIFZ1ZS5zZXQoc3RhdGUsICdiYWxhbmNlTW9zYWljcycsIGJhbGFuY2VNb3NhaWNzKTsKICAgICAgVnVlLnNldChzdGF0ZSwgJ293bmVkTW9zYWljcycsIG93bmVkTW9zYWljcyk7CiAgICAgIFZ1ZS5zZXQoc3RhdGUsICdob2xkTW9zYWljcycsIGhvbGRNb3NhaWNzLmZpbHRlcihmdW5jdGlvbiAobSkgewogICAgICAgIHJldHVybiBtLm93bmVyUmF3UGxhaW4gPT09IGN1cnJlbnRTaWduZXJBZGRyZXNzLnBsYWluKCkgfHwgbS5iYWxhbmNlID4gMDsKICAgICAgfSkpOwogICAgfSwKICAgIGFjY291bnRNb3NhaWNDb25maWd1cmF0aW9uczogZnVuY3Rpb24gYWNjb3VudE1vc2FpY0NvbmZpZ3VyYXRpb25zKHN0YXRlLCBfYWNjb3VudE1vc2FpY0NvbmZpZ3VyYXRpb25zKSB7CiAgICAgIHJldHVybiBWdWUuc2V0KHN0YXRlLCAnYWNjb3VudE1vc2FpY0NvbmZpZ3VyYXRpb25zJywgX2FjY291bnRNb3NhaWNDb25maWd1cmF0aW9ucyk7CiAgICB9LAogICAgaXNGZXRjaGluZ01vc2FpY3M6IGZ1bmN0aW9uIGlzRmV0Y2hpbmdNb3NhaWNzKHN0YXRlLCBfaXNGZXRjaGluZ01vc2FpY3MpIHsKICAgICAgcmV0dXJuIFZ1ZS5zZXQoc3RhdGUsICdpc0ZldGNoaW5nTW9zYWljcycsIF9pc0ZldGNoaW5nTW9zYWljcyk7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiBpbml0aWFsaXplKF9yZWYyKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQsCiAgICAgICAgICBnZXR0ZXJzID0gX3JlZjIuZ2V0dGVyczsKICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICB2YXIgY2FsbGJhY2s7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldEluaXRpYWxpemVkJywgdHJ1ZSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9OyAvLyBhY3F1aXJlIGFzeW5jIGxvY2sgdW50aWwgaW5pdGlhbGl6ZWQKCgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIExvY2suaW5pdGlhbGl6ZShjYWxsYmFjaywgewogICAgICAgICAgICAgICAgICBnZXR0ZXJzOiBnZXR0ZXJzCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpOwogICAgfSwKICAgIHVuaW5pdGlhbGl6ZTogZnVuY3Rpb24gdW5pbml0aWFsaXplKF9yZWYzKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMy5jb21taXQsCiAgICAgICAgICBnZXR0ZXJzID0gX3JlZjMuZ2V0dGVyczsKICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgICAgdmFyIGNhbGxiYWNrOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcihfdGhpczIsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRJbml0aWFsaXplZCcsIGZhbHNlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gTG9jay51bmluaXRpYWxpemUoY2FsbGJhY2ssIHsKICAgICAgICAgICAgICAgICAgZ2V0dGVyczogZ2V0dGVycwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKTsKICAgIH0sCiAgICBMT0FEX05FVFdPUktfQ1VSUkVOQ0lFUzogZnVuY3Rpb24gTE9BRF9ORVRXT1JLX0NVUlJFTkNJRVMoX3JlZjQpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY0LmNvbW1pdCwKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjQucm9vdEdldHRlcnM7CiAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgdmFyIG1vc2FpY1NlcnZpY2UsIHJlcG9zaXRvcnlGYWN0b3J5LCBnZW5lcmF0aW9uSGFzaDsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1vc2FpY1NlcnZpY2UgPSBuZXcgTW9zYWljU2VydmljZSgpOwogICAgICAgICAgICAgICAgcmVwb3NpdG9yeUZhY3RvcnkgPSByb290R2V0dGVyc1snbmV0d29yay9yZXBvc2l0b3J5RmFjdG9yeSddOwogICAgICAgICAgICAgICAgZ2VuZXJhdGlvbkhhc2ggPSByb290R2V0dGVyc1snbmV0d29yay9nZW5lcmF0aW9uSGFzaCddOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIG1vc2FpY1NlcnZpY2UuZ2V0TmV0d29ya0N1cnJlbmNpZXMocmVwb3NpdG9yeUZhY3RvcnksIGdlbmVyYXRpb25IYXNoKS5waXBlKHRhcChmdW5jdGlvbiAobmV0d29ya0N1cnJlbmNpZXMpIHsKICAgICAgICAgICAgICAgICAgY29tbWl0KCduZXR3b3JrQ3VycmVuY3knLCBuZXR3b3JrQ3VycmVuY2llcy5uZXR3b3JrQ3VycmVuY3kpOwogICAgICAgICAgICAgICAgfSksIGZpcnN0KCkpLnRvUHJvbWlzZSgpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSk7CiAgICB9LAogICAgTE9BRF9NT1NBSUNTOiBmdW5jdGlvbiBMT0FEX01PU0FJQ1MoX3JlZjUpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdCwKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjUucm9vdEdldHRlcnM7CiAgICAgIHZhciByZXBvc2l0b3J5RmFjdG9yeSA9IHJvb3RHZXR0ZXJzWyduZXR3b3JrL3JlcG9zaXRvcnlGYWN0b3J5J107CiAgICAgIHZhciBuZXR3b3JrQ3VycmVuY3kgPSByb290R2V0dGVyc1snbW9zYWljL25ldHdvcmtDdXJyZW5jeSddOwogICAgICB2YXIgYWNjb3VudHNJbmZvID0gcm9vdEdldHRlcnNbJ2FjY291bnQvYWNjb3VudHNJbmZvJ10gfHwgW107CiAgICAgIHZhciBnZW5lcmF0aW9uSGFzaCA9IHJvb3RHZXR0ZXJzWyduZXR3b3JrL2dlbmVyYXRpb25IYXNoJ107CiAgICAgIHZhciBtb3NhaWNNZXRhZGF0YUxpc3QgPSByb290R2V0dGVyc1snbWV0YWRhdGEvbW9zYWljTWV0YWRhdGFMaXN0J107CiAgICAgIGNvbW1pdCgnaXNGZXRjaGluZ01vc2FpY3MnLCB0cnVlKTsKICAgICAgbmV3IE1vc2FpY1NlcnZpY2UoKS5nZXRNb3NhaWNzKHJlcG9zaXRvcnlGYWN0b3J5LCBnZW5lcmF0aW9uSGFzaCwgbmV0d29ya0N1cnJlbmN5LCBhY2NvdW50c0luZm8pLnN1YnNjcmliZShmdW5jdGlvbiAobW9zYWljcykgewogICAgICAgIHZhciBjdXJyZW50U2lnbmVyQWRkcmVzcyA9IHJvb3RHZXR0ZXJzWydhY2NvdW50L2N1cnJlbnRTaWduZXJBZGRyZXNzJ107CgogICAgICAgIGlmICghY3VycmVudFNpZ25lckFkZHJlc3MpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGNvbW1pdCgnbW9zYWljcycsIHsKICAgICAgICAgIG1vc2FpY3M6IG1vc2FpY3MsCiAgICAgICAgICBjdXJyZW50U2lnbmVyQWRkcmVzczogY3VycmVudFNpZ25lckFkZHJlc3MsCiAgICAgICAgICBuZXR3b3JrQ3VycmVuY3k6IG5ldHdvcmtDdXJyZW5jeSwKICAgICAgICAgIG1vc2FpY01ldGFkYXRhTGlzdDogbW9zYWljTWV0YWRhdGFMaXN0CiAgICAgICAgfSk7CiAgICAgIH0pLmFkZChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNvbW1pdCgnaXNGZXRjaGluZ01vc2FpY3MnLCBmYWxzZSk7CiAgICAgIH0pOwogICAgfSwKICAgIFJFU0VUX01PU0FJQ1M6IGZ1bmN0aW9uIFJFU0VUX01PU0FJQ1MoX3JlZjYpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY2LmNvbW1pdCwKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjYucm9vdEdldHRlcnM7CiAgICAgIHZhciBuZXR3b3JrQ3VycmVuY3kgPSByb290R2V0dGVyc1snbW9zYWljL25ldHdvcmtDdXJyZW5jeSddOwogICAgICBjb21taXQoJ21vc2FpY3MnLCB7CiAgICAgICAgbW9zYWljczogW10sCiAgICAgICAgdW5kZWZpbmVkOiB1bmRlZmluZWQsCiAgICAgICAgbmV0d29ya0N1cnJlbmN5OiBuZXR3b3JrQ3VycmVuY3kKICAgICAgfSk7CiAgICB9LAogICAgU0lHTkVSX0NIQU5HRUQ6IGZ1bmN0aW9uIFNJR05FUl9DSEFOR0VEKF9yZWY3KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmNy5jb21taXQsCiAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY3LnJvb3RHZXR0ZXJzLAogICAgICAgICAgZ2V0dGVycyA9IF9yZWY3LmdldHRlcnM7CiAgICAgIHZhciBjdXJyZW50U2lnbmVyQWRkcmVzcyA9IHJvb3RHZXR0ZXJzWydhY2NvdW50L2N1cnJlbnRTaWduZXJBZGRyZXNzJ107CiAgICAgIHZhciBuZXR3b3JrQ3VycmVuY3kgPSByb290R2V0dGVyc1snbW9zYWljL25ldHdvcmtDdXJyZW5jeSddOwoKICAgICAgaWYgKCFjdXJyZW50U2lnbmVyQWRkcmVzcykgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIG1vc2FpY1NlcnZpY2UgPSBuZXcgTW9zYWljU2VydmljZSgpOwogICAgICBjb21taXQoJ2FjY291bnRNb3NhaWNDb25maWd1cmF0aW9ucycsIG1vc2FpY1NlcnZpY2UuZ2V0TW9zYWljQ29uZmlndXJhdGlvbnNCeUFjY291bnQocm9vdEdldHRlcnNbJ2FjY291bnQvY3VycmVudEFjY291bnQnXSkpOwogICAgICBjb21taXQoJ21vc2FpY3MnLCB7CiAgICAgICAgbW9zYWljczogZ2V0dGVyc1snbW9zYWljcyddLAogICAgICAgIGN1cnJlbnRTaWduZXJBZGRyZXNzOiBjdXJyZW50U2lnbmVyQWRkcmVzcywKICAgICAgICBuZXR3b3JrQ3VycmVuY3k6IG5ldHdvcmtDdXJyZW5jeQogICAgICB9KTsKICAgIH0sCiAgICBISURFX01PU0FJQzogZnVuY3Rpb24gSElERV9NT1NBSUMoX3JlZjgsIF9yZWY5KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmOC5jb21taXQ7CiAgICAgIHZhciBtb3NhaWNJZCA9IF9yZWY5Lm1vc2FpY0lkLAogICAgICAgICAgYWNjb3VudCA9IF9yZWY5LmFjY291bnQ7CiAgICAgIGNvbW1pdCgnYWNjb3VudE1vc2FpY0NvbmZpZ3VyYXRpb25zJywgbmV3IE1vc2FpY1NlcnZpY2UoKS5jaGFuZ2VNb3NhaWNDb25maWd1cmF0aW9uKG1vc2FpY0lkLCBhY2NvdW50LCB7CiAgICAgICAgaGlkZGVuOiB0cnVlCiAgICAgIH0pKTsKICAgIH0sCiAgICBTSE9XX01PU0FJQzogZnVuY3Rpb24gU0hPV19NT1NBSUMoX3JlZjEwLCBfcmVmMTEpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYxMC5jb21taXQ7CiAgICAgIHZhciBtb3NhaWNJZCA9IF9yZWYxMS5tb3NhaWNJZCwKICAgICAgICAgIGFjY291bnQgPSBfcmVmMTEuYWNjb3VudDsKICAgICAgY29tbWl0KCdhY2NvdW50TW9zYWljQ29uZmlndXJhdGlvbnMnLCBuZXcgTW9zYWljU2VydmljZSgpLmNoYW5nZU1vc2FpY0NvbmZpZ3VyYXRpb24obW9zYWljSWQsIGFjY291bnQsIHsKICAgICAgICBoaWRkZW46IGZhbHNlCiAgICAgIH0pKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Mosaic.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport Vue from 'vue';\nimport { AccountInfo, Address, MosaicId, RepositoryFactory } from 'symbol-sdk';\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { MosaicService } from '@/services/MosaicService';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { MosaicConfigurationModel } from '@/core/database/entities/MosaicConfigurationModel';\nimport { first, tap } from 'rxjs/operators';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\nimport { MetadataService } from '@/services/MetadataService';\n\nconst Lock = AwaitLock.create();\n\n// mosaic state typing\ninterface MosaicState {\n    initialized: boolean;\n    networkCurrency: NetworkCurrencyModel;\n    mosaics: MosaicModel[];\n    balanceMosaics: MosaicModel[];\n    holdMosaics: MosaicModel[];\n    ownedMosaics: MosaicModel[];\n    networkMosaicId: MosaicId;\n    networkMosaicName: string;\n    networkMosaicTicker: string;\n    accountMosaicConfigurations: Record<string, MosaicConfigurationModel>;\n    isFetchingMosaics: boolean;\n}\n\n// mosaic state initial definition\nconst mosaicState: MosaicState = {\n    initialized: false,\n    networkMosaicId: null,\n    mosaics: [],\n    balanceMosaics: [],\n    holdMosaics: [],\n    ownedMosaics: [],\n    networkCurrency: null,\n    networkMosaicName: '',\n    networkMosaicTicker: '',\n    accountMosaicConfigurations: {},\n    isFetchingMosaics: false,\n};\n\nexport default {\n    namespaced: true,\n    state: mosaicState,\n    getters: {\n        getInitialized: (state: MosaicState) => state.initialized,\n        networkCurrency: (state: MosaicState) => state.networkCurrency,\n        mosaics: (state: MosaicState) => state.mosaics,\n        ownedMosaics: (state: MosaicState) => state.ownedMosaics,\n        holdMosaics: (state: MosaicState) => state.holdMosaics,\n        balanceMosaics: (state: MosaicState) => state.balanceMosaics,\n        networkMosaic: (state: MosaicState) => state.networkMosaicId,\n        networkMosaicTicker: (state: MosaicState) => state.networkMosaicTicker,\n        accountMosaicConfigurations: (state: MosaicState) => state.accountMosaicConfigurations,\n        networkMosaicName: (state: MosaicState) => state.networkMosaicName,\n        isFetchingMosaics: (state: MosaicState) => state.isFetchingMosaics,\n        networkBalanceMosaics: (state: MosaicState) => state.balanceMosaics.find((m) => m.mosaicIdHex === state.networkMosaicId.toHex()),\n    },\n    mutations: {\n        setInitialized: (state: MosaicState, initialized: boolean) => {\n            state.initialized = initialized;\n        },\n        networkCurrency: (state: MosaicState, networkCurrency: NetworkCurrencyModel) => {\n            Vue.set(state, 'networkCurrency', networkCurrency);\n            Vue.set(state, 'networkMosaicId', new MosaicId(networkCurrency.mosaicIdHex));\n            Vue.set(state, 'networkMosaicName', networkCurrency.namespaceIdFullname);\n            Vue.set(state, 'networkMosaicTicker', networkCurrency.ticker);\n        },\n        mosaics: (\n            state: MosaicState,\n            {\n                mosaics,\n                currentSignerAddress,\n                networkCurrency,\n                mosaicMetadataList,\n            }: {\n                mosaics: MosaicModel[];\n                currentSignerAddress: Address;\n                networkCurrency: NetworkCurrencyModel;\n                mosaicMetadataList: MetadataModel[];\n            },\n        ) => {\n            const uniqueMosaics = mosaics.map((mosaic) => {\n                mosaic.metadataList = MetadataService.getMosaicMetadataByTargetId(mosaicMetadataList, mosaic.mosaicIdHex);\n                return mosaic;\n            });\n            const ownedMosaics = uniqueMosaics.filter(\n                (m) => m.ownerRawPlain === currentSignerAddress.plain() && m.addressRawPlain === currentSignerAddress.plain(),\n            );\n\n            const holdMosaics = uniqueMosaics\n                .filter((m) => m.addressRawPlain === currentSignerAddress.plain())\n                .sort((m1, m2) => {\n                    const owner1 = m1.ownerRawPlain === currentSignerAddress.plain();\n                    const owner2 = m2.ownerRawPlain === currentSignerAddress.plain();\n                    return Number(owner1) - Number(owner2);\n                });\n\n            const noMosaic = networkCurrency && !holdMosaics.find((m) => m.isCurrencyMosaic);\n\n            const balanceMosaics = (noMosaic\n                ? [\n                      ...holdMosaics,\n                      {\n                          mosaicIdHex: networkCurrency.mosaicIdHex,\n                          divisibility: networkCurrency.divisibility,\n                          name: networkCurrency.namespaceIdFullname,\n                          isCurrencyMosaic: true,\n                          balance: 0,\n                      } as MosaicModel,\n                  ]\n                : [...holdMosaics]\n            ).filter((m) => m.isCurrencyMosaic || m.balance > 0);\n            Vue.set(state, 'mosaics', uniqueMosaics);\n            Vue.set(state, 'balanceMosaics', balanceMosaics);\n            Vue.set(state, 'ownedMosaics', ownedMosaics);\n            Vue.set(\n                state,\n                'holdMosaics',\n                holdMosaics.filter((m) => m.ownerRawPlain === currentSignerAddress.plain() || m.balance > 0),\n            );\n        },\n        accountMosaicConfigurations: (state: MosaicState, accountMosaicConfigurations: Record<string, MosaicConfigurationModel>) =>\n            Vue.set(state, 'accountMosaicConfigurations', accountMosaicConfigurations),\n\n        isFetchingMosaics: (state: MosaicState, isFetchingMosaics: boolean) => Vue.set(state, 'isFetchingMosaics', isFetchingMosaics),\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', true);\n            };\n            // acquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n        async uninitialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        async LOAD_NETWORK_CURRENCIES({ commit, rootGetters }) {\n            const mosaicService = new MosaicService();\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const generationHash: string = rootGetters['network/generationHash'];\n            await mosaicService\n                .getNetworkCurrencies(repositoryFactory, generationHash)\n                .pipe(\n                    tap((networkCurrencies) => {\n                        commit('networkCurrency', networkCurrencies.networkCurrency);\n                    }),\n                    first(),\n                )\n                .toPromise();\n        },\n\n        LOAD_MOSAICS({ commit, rootGetters }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const networkCurrency: NetworkCurrencyModel = rootGetters['mosaic/networkCurrency'];\n            const accountsInfo: AccountInfo[] = rootGetters['account/accountsInfo'] || [];\n            const generationHash = rootGetters['network/generationHash'];\n            const mosaicMetadataList: MetadataModel[] = rootGetters['metadata/mosaicMetadataList'];\n\n            commit('isFetchingMosaics', true);\n\n            new MosaicService()\n                .getMosaics(repositoryFactory, generationHash, networkCurrency, accountsInfo)\n                .subscribe((mosaics) => {\n                    const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n                    if (!currentSignerAddress) {\n                        return;\n                    }\n                    commit('mosaics', {\n                        mosaics: mosaics,\n                        currentSignerAddress,\n                        networkCurrency,\n                        mosaicMetadataList,\n                    });\n                })\n                .add(() => commit('isFetchingMosaics', false));\n        },\n\n        RESET_MOSAICS({ commit, rootGetters }) {\n            const networkCurrency: NetworkCurrencyModel = rootGetters['mosaic/networkCurrency'];\n            commit('mosaics', { mosaics: [], undefined, networkCurrency });\n        },\n\n        SIGNER_CHANGED({ commit, rootGetters, getters }) {\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            const networkCurrency: NetworkCurrencyModel = rootGetters['mosaic/networkCurrency'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            const mosaicService = new MosaicService();\n            commit('accountMosaicConfigurations', mosaicService.getMosaicConfigurationsByAccount(rootGetters['account/currentAccount']));\n            commit('mosaics', {\n                mosaics: getters['mosaics'],\n                currentSignerAddress,\n                networkCurrency,\n            });\n        },\n\n        HIDE_MOSAIC({ commit }, { mosaicId, account }) {\n            commit(\n                'accountMosaicConfigurations',\n                new MosaicService().changeMosaicConfiguration(mosaicId, account, {\n                    hidden: true,\n                }),\n            );\n        },\n        SHOW_MOSAIC({ commit }, { mosaicId, account }) {\n            commit(\n                'accountMosaicConfigurations',\n                new MosaicService().changeMosaicConfiguration(mosaicId, account, {\n                    hidden: false,\n                }),\n            );\n        },\n    },\n};\n"],"sourceRoot":""}]}
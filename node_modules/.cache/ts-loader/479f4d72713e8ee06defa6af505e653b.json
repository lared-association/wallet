{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/RESTService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/RESTService.ts","mtime":1611927204283},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/RESTService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, IListener, RepositoryFactory, TransactionStatusError } from 'symbol-sdk';\nimport { Subscription } from 'rxjs';\n// internal dependencies\nimport { AddressValidator } from '@/core/validation/validators';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { TransactionGroupState } from '@/store/Transaction';\n\n/**\n * This Service is more like a static helper now. All the methods are statics. Rename and move.\n */\nexport class RESTService {\n    /**\n     * Subscribe to transactions websocket channels\n     * @param {Context} dispatch context the context\n     * @param {RepositoryFactory} repositoryFactory the factory used to create the listener.\n     * @param {Address} address the listened account.\n     */\n    public static async subscribeTransactionChannels(\n        context: { dispatch: any; commit: any },\n        repositoryFactory: RepositoryFactory,\n        addressStr: string,\n    ): Promise<{ listener: IListener; subscriptions: Subscription[] }> {\n        if (!AddressValidator.validate(addressStr)) {\n            throw new Error('Invalid address for subscribing to websocket connections');\n        }\n\n        context.dispatch('diagnostic/ADD_DEBUG', `Opening REST websocket channel connections with ${addressStr}`, {\n            root: true,\n        });\n\n        // open websocket connection\n        const address = Address.createFromRawAddress(addressStr);\n        const listener = repositoryFactory.createListener();\n        await listener.open();\n\n        // error listener\n        const status = listener\n            .status(address)\n            .subscribe((error: TransactionStatusError) => context.dispatch('notification/ADD_ERROR', error.code, { root: true }));\n\n        // unconfirmed listeners\n        const unconfirmedAdded = listener.unconfirmedAdded(address).subscribe(\n            (transaction) => {\n                context.dispatch('transaction/ADD_TRANSACTION', { group: TransactionGroupState.unconfirmed, transaction }, { root: true });\n                context.dispatch('notification/ADD_SUCCESS', NotificationType.NEW_UNCONFIRMED_TRANSACTION, { root: true });\n            },\n            (err) => context.dispatch('diagnostic/ADD_ERROR', err, { root: true }),\n        );\n\n        const unconfirmedRemoved = listener.unconfirmedRemoved(address).subscribe(\n            (transactionHash) =>\n                context.dispatch(\n                    'transaction/REMOVE_TRANSACTION',\n                    { group: TransactionGroupState.unconfirmed, transactionHash },\n                    { root: true },\n                ),\n            (err) => context.dispatch('diagnostic/ADD_ERROR', err, { root: true }),\n        );\n\n        // partial listeners\n        const cosignatureAdded = listener.cosignatureAdded(address).subscribe(\n            (cosignature) => {\n                context.dispatch('transaction/ADD_COSIGNATURE', cosignature, {\n                    root: true,\n                });\n                context.dispatch('notification/ADD_SUCCESS', NotificationType.COSIGNATURE_ADDED, { root: true });\n            },\n            (err) => context.dispatch('diagnostic/ADD_ERROR', err, { root: true }),\n        );\n\n        const partialAdded = listener.aggregateBondedAdded(address).subscribe(\n            (transaction) => {\n                context.dispatch('transaction/ADD_TRANSACTION', { group: TransactionGroupState.partial, transaction }, { root: true });\n                context.dispatch('notification/ADD_SUCCESS', NotificationType.NEW_AGGREGATE_BONDED, { root: true });\n            },\n            (err) => context.dispatch('diagnostic/ADD_ERROR', err, { root: true }),\n        );\n\n        const partialRemoved = listener.aggregateBondedRemoved(address).subscribe(\n            (transactionHash) =>\n                context.dispatch(\n                    'transaction/REMOVE_TRANSACTION',\n                    { group: TransactionGroupState.partial, transactionHash },\n                    { root: true },\n                ),\n            (err) => context.dispatch('diagnostic/ADD_ERROR', err, { root: true }),\n        );\n\n        // confirmed listener\n        const confirmed = listener.confirmed(address).subscribe(\n            (transaction) => {\n                context.dispatch('transaction/ADD_TRANSACTION', { group: TransactionGroupState.confirmed, transaction }, { root: true });\n                context.dispatch('transaction/ON_NEW_TRANSACTION', transaction, {\n                    root: true,\n                });\n                context.dispatch('notification/ADD_SUCCESS', NotificationType.NEW_CONFIRMED_TRANSACTION, { root: true });\n            },\n            (err) => context.dispatch('diagnostic/ADD_ERROR', err, { root: true }),\n        );\n\n        return {\n            listener,\n            subscriptions: [status, unconfirmedAdded, unconfirmedRemoved, cosignatureAdded, partialAdded, partialRemoved, confirmed],\n        };\n    }\n}\n"],"sourceRoot":""}]}
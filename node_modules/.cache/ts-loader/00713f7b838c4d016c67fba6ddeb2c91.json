{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AddCosignatoryInput/AddCosignatoryInputTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AddCosignatoryInput/AddCosignatoryInputTs.ts","mtime":1611927226805},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AddCosignatoryInput/AddCosignatoryInputTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AACH;;AACA,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,UAAT,QAA2B,MAA3B;AACA,SAAS,OAAT,EAA+B,aAA/B,QAAuE,YAAvE,C,CACA;;AACA,SAAS,gBAAT,EAA2B,kBAA3B,QAAqD,8BAArD;AACA,SAAS,iBAAT,QAAkC,qCAAlC,C,CACA;;AACA,SAAS,kBAAT,EAA6B,kBAA7B,QAAuD,cAAvD,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB,C,CACA;;AACA,OAAO,OAAP,MAAoB,kCAApB,C,CACA;;AACA,OAAO,SAAP,MAAsB,sCAAtB;AACA,SAAS,aAAT,QAA8B,4BAA9B;;AAiBA,IAAa,qBAAb;AAAA;;AAAA;;AAAA,mCAAA;AAAA;;AAAA;;;AACI;;;AAGG;;AACI,UAAA,eAAA,GAAkB,iBAAlB;AAgBP;;;;AAIG;;AACI,UAAA,WAAA,GAAsB,EAAtB;AA1BX;AA2EC;AA/CG;;;;AAIG;;;AAhCP;AAAA;AAAA,uCAiC8B;AACtB,UAAI,gBAAgB,CAAC,QAAjB,CAA0B,KAAK,WAA/B,CAAJ,EAAiD;AAC7C,aAAK,sBAAL;AACA,aAAK,WAAL,GAAmB,EAAnB;AACA;AACH,OAJD,MAIO,IAAI,kBAAkB,CAAC,QAAnB,CAA4B,KAAK,WAAjC,CAAJ,EAAmD;AACtD,aAAK,wBAAL;AACA,aAAK,WAAL,GAAmB,EAAnB;AACA;AACH,OAJM,MAIA;AACH,aAAK,MAAL,CAAY,QAAZ,CAAqB,wBAArB,EAA+C,mBAA/C;AACA;AACH;AACJ;AAED;;;;AAIG;;AApDP;AAAA;AAAA,+CAqDoC;AAC5B,UAAI,CAAC,KAAK,WAAV,EAAuB;AACnB;AACH;;AACD,UAAM,aAAa,GAAG,aAAa,CAAC,mBAAd,CAAkC,KAAK,WAAvC,EAAoD,KAAK,WAAzD,CAAtB;AACA,WAAK,KAAL,CAAW,OAAX,EAAoB,aAAa,CAAC,OAAlC;AACH;AAED;;;;AAIG;;AAjEP;AAAA;AAAA,6CAkEwC;;;;;;AAChC,qBAAK,KAAL,CAAW,OAAX,EAAoB,OAAO,CAAC,oBAAR,CAA6B,KAAK,WAAlC,CAApB;;;;;;;;;AACH;AACD;;AAEG;;AAvEP;AAAA;AAAA,2CAwE+B;AACvB,WAAK,WAAL,GAAmB,aAAa,CAAC,WAAd,CAA0B,KAAK,WAA/B,CAAnB;AACH;AA1EL;;AAAA;AAAA,EAA2C,GAA3C,CAAA;;AAAa,qBAAqB,GAAA,UAAA,CAAA,CAfjC,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AACR,IAAA,kBAAkB,EAAlB,kBADQ;AAER,IAAA,kBAAkB,EAAlB,kBAFQ;AAGR,IAAA,YAAY,EAAZ,YAHQ;AAIR,IAAA,OAAO,EAAP,OAJQ;AAKR,IAAA,SAAS,EAAT;AALQ,GADL;AAQP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,iBAAiB,EAAE,2BADT;AAEV,IAAA,WAAW,EAAE;AAFH,GAAD,CADT;AARD,CAAD,CAewB,CAAA,EAArB,qBAAqB,CAArB;SAAA,qB","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Address, NetworkType, PublicAccount, RepositoryFactory } from 'symbol-sdk';\n// internal dependencies\nimport { AddressValidator, PublicKeyValidator } from '@/core/validation/validators';\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ButtonAdd from '@/components/ButtonAdd/ButtonAdd.vue';\nimport { FilterHelpers } from '@/core/utils/FilterHelpers';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        FormRow,\n        ButtonAdd,\n    },\n    computed: {\n        ...mapGetters({\n            repositoryFactory: 'network/repositoryFactory',\n            networkType: 'network/networkType',\n        }),\n    },\n})\nexport class AddCosignatoryInputTs extends Vue {\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Current peer\n     * @private\n     * @type {string}\n     */\n    private repositoryFactory: RepositoryFactory;\n\n    /**\n     * Current network type\n     * @private\n     * @type {NetworkType}\n     */\n    private networkType: NetworkType;\n\n    /**\n     * Cosignatory input (address or public key)\n     * @protected\n     * @type {string}\n     */\n    public cosignatory: string = '';\n\n    /**\n     * Handles the form submission\n     * @protected\n     * @return {void}\n     */\n    protected onAddCosignatory(): void {\n        if (AddressValidator.validate(this.cosignatory)) {\n            this.addCosignerFromAddress();\n            this.cosignatory = '';\n            return;\n        } else if (PublicKeyValidator.validate(this.cosignatory)) {\n            this.addCosignerFromPublicKey();\n            this.cosignatory = '';\n            return;\n        } else {\n            this.$store.dispatch('notification/ADD_ERROR', 'address_not_valid');\n            return;\n        }\n    }\n\n    /**\n     * Emits onAddCosignatory event when cosignatory is input as a public key\n     * @private\n     * @return {void}\n     */\n    private addCosignerFromPublicKey(): void {\n        if (!this.cosignatory) {\n            return;\n        }\n        const publicAccount = PublicAccount.createFromPublicKey(this.cosignatory, this.networkType);\n        this.$emit('added', publicAccount.address);\n    }\n\n    /**\n     * Emits onAddCosignatory event when cosignatory is input as an address\n     * @private\n     * @return {void}\n     */\n    private async addCosignerFromAddress() {\n        this.$emit('added', Address.createFromRawAddress(this.cosignatory));\n    }\n    /**\n     * filter tags\n     */\n    public stripTagsCosignatory() {\n        this.cosignatory = FilterHelpers.stripFilter(this.cosignatory);\n    }\n}\n"],"sourceRoot":""}]}
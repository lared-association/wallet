{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/NodeService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/NodeService.ts","mtime":1611927204270},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKLyoKICogQ29weXJpZ2h0IDIwMjAgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwppbXBvcnQgeyBPYnNlcnZhYmxlSGVscGVycyB9IGZyb20gJ0AvY29yZS91dGlscy9PYnNlcnZhYmxlSGVscGVycyc7CmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBOb2RlTW9kZWwgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2UvZW50aXRpZXMvTm9kZU1vZGVsJzsKaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBuZXR3b3JrQ29uZmlnIH0gZnJvbSAnQC9jb25maWcnOwppbXBvcnQgeyBOb2RlTW9kZWxTdG9yYWdlIH0gZnJvbSAnQC9jb3JlL2RhdGFiYXNlL3N0b3JhZ2UvTm9kZU1vZGVsU3RvcmFnZSc7Ci8qKgogKiBUaGUgc2VydmljZSBpbiBjaGFyZ2Ugb2YgbG9hZGluZyBhbmQgY2FjaGluZyBhbnl0aGluZyByZWxhdGVkIHRvIE5vZGUgYW5kIFBlZXJzIGZyb20gUmVzdC4KICogVGhlIGNhY2hlIGlzIGRvbmUgYnkgc3RvcmluZyB0aGUgcGF5bG9hZHMgaW4gU2ltcGxlT2JqZWN0U3RvcmFnZS4KICovCgpleHBvcnQgdmFyIE5vZGVTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBOb2RlU2VydmljZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlU2VydmljZSk7CgogICAgLyoqCiAgICAgKiBUaGUgcGVlciBpbmZvcm1hdGlvbiBsb2NhbCBjYWNoZS4KICAgICAqLwogICAgdGhpcy5zdG9yYWdlID0gTm9kZU1vZGVsU3RvcmFnZS5JTlNUQU5DRTsKICB9CgogIF9jcmVhdGVDbGFzcyhOb2RlU2VydmljZSwgW3sKICAgIGtleTogImdldEtub3dOb2Rlc09ubHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEtub3dOb2Rlc09ubHkoKSB7CiAgICAgIHJldHVybiBfLnVuaXFCeSh0aGlzLmxvYWROb2RlcygpLmNvbmNhdCh0aGlzLmxvYWRTdGF0aWNOb2RlcygpKSwgJ3VybCcpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldE5vZGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb2RlcyhyZXBvc2l0b3J5RmFjdG9yeSwgcmVwb3NpdG9yeUZhY3RvcnlVcmwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBzdG9yZWROb2RlcyA9IHRoaXMuZ2V0S25vd05vZGVzT25seSgpOwogICAgICB2YXIgbm9kZVJlcG9zaXRvcnkgPSByZXBvc2l0b3J5RmFjdG9yeS5jcmVhdGVOb2RlUmVwb3NpdG9yeSgpOwogICAgICByZXR1cm4gbm9kZVJlcG9zaXRvcnkuZ2V0Tm9kZUluZm8oKS5waXBlKG1hcChmdW5jdGlvbiAoZHRvKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmNyZWF0ZU5vZGVNb2RlbChyZXBvc2l0b3J5RmFjdG9yeVVybCwgZHRvLmZyaWVuZGx5TmFtZSwgdW5kZWZpbmVkLCBkdG8ucHVibGljS2V5LCBkdG8ubm9kZVB1YmxpY0tleSk7CiAgICAgIH0pLCBPYnNlcnZhYmxlSGVscGVycy5kZWZhdWx0TGFzdCh0aGlzLmNyZWF0ZU5vZGVNb2RlbChyZXBvc2l0b3J5RmFjdG9yeVVybCkpLCBtYXAoZnVuY3Rpb24gKGN1cnJlbnROb2RlKSB7CiAgICAgICAgcmV0dXJuIF8udW5pcUJ5KFtjdXJyZW50Tm9kZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzdG9yZWROb2RlcykpLCAndXJsJyk7CiAgICAgIH0pLCB0YXAoZnVuY3Rpb24gKHApIHsKICAgICAgICByZXR1cm4gX3RoaXMuc2F2ZU5vZGVzKHApOwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAibG9hZFN0YXRpY05vZGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkU3RhdGljTm9kZXMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldHdvcmtDb25maWcubm9kZXMubWFwKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMi5jcmVhdGVOb2RlTW9kZWwobi51cmwsIG4uZnJpZW5kbHlOYW1lLCB0cnVlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlTm9kZU1vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOb2RlTW9kZWwodXJsKSB7CiAgICAgIHZhciBmcmllbmRseU5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKICAgICAgdmFyIGlzRGVmYXVsdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwogICAgICB2YXIgcHVibGljS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CiAgICAgIHZhciBub2RlUHVibGljS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiBuZXcgTm9kZU1vZGVsKHVybCwgZnJpZW5kbHlOYW1lIHx8ICcnLCBpc0RlZmF1bHQgfHwgISFuZXR3b3JrQ29uZmlnLm5vZGVzLmZpbmQoZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gbi51cmwgPT09IHVybDsKICAgICAgfSksIHB1YmxpY0tleSwgbm9kZVB1YmxpY0tleSk7CiAgICB9CiAgfSwgewogICAga2V5OiAibG9hZE5vZGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTm9kZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0KCkgfHwgW107CiAgICB9CiAgfSwgewogICAga2V5OiAic2F2ZU5vZGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlTm9kZXMobm9kZXMpIHsKICAgICAgdGhpcy5zdG9yYWdlLnNldChub2Rlcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlKCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTm9kZVNlcnZpY2U7Cn0oKTs="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/NodeService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AAIH,SAAS,iBAAT,QAAkC,gCAAlC;AACA,SAAS,GAAT,EAAc,GAAd,QAAyB,gBAAzB;AACA,SAAS,SAAT,QAA0B,oCAA1B;AACA,OAAO,KAAK,CAAZ,MAAmB,QAAnB;AACA,SAAS,aAAT,QAA8B,UAA9B;AACA,SAAS,gBAAT,QAAiC,0CAAjC;AAEA;;;AAGG;;AACH,WAAa,WAAb;AAAA,yBAAA;AAAA;;AACI;;AAEG;AACc,SAAA,OAAA,GAAU,gBAAgB,CAAC,QAA3B;AAqDpB;;AAzDD;AAAA;AAAA,uCAM2B;AACnB,aAAO,CAAC,CAAC,MAAF,CAAS,KAAK,SAAL,GAAiB,MAAjB,CAAwB,KAAK,eAAL,EAAxB,CAAT,EAA0D,KAA1D,CAAP;AACH;AARL;AAAA;AAAA,6BAUoB,iBAVpB,EAU0D,oBAV1D,EAUsF;AAAA;;AAC9E,UAAM,WAAW,GAAG,KAAK,gBAAL,EAApB;AACA,UAAM,cAAc,GAAG,iBAAiB,CAAC,oBAAlB,EAAvB;AAEA,aAAO,cAAc,CAAC,WAAf,GAA6B,IAA7B,CACH,GAAG,CAAC,UAAC,GAAD;AAAA,eACA,KAAI,CAAC,eAAL,CAAqB,oBAArB,EAA2C,GAAG,CAAC,YAA/C,EAA6D,SAA7D,EAAwE,GAAG,CAAC,SAA5E,EAAuF,GAAG,CAAC,aAA3F,CADA;AAAA,OAAD,CADA,EAIH,iBAAiB,CAAC,WAAlB,CAA8B,KAAK,eAAL,CAAqB,oBAArB,CAA9B,CAJG,EAKH,GAAG,CAAC,UAAC,WAAD;AAAA,eAAiB,CAAC,CAAC,MAAF,EAAU,WAAV,4BAA0B,WAA1B,IAAwC,KAAxC,CAAjB;AAAA,OAAD,CALA,EAMH,GAAG,CAAC,UAAC,CAAD;AAAA,eAAO,KAAI,CAAC,SAAL,CAAe,CAAf,CAAP;AAAA,OAAD,CANA,CAAP;AAQH;AAtBL;AAAA;AAAA,sCAwB2B;AAAA;;AACnB,aAAO,aAAa,CAAC,KAAd,CAAoB,GAApB,CAAwB,UAAC,CAAD,EAAM;AACjC,eAAO,MAAI,CAAC,eAAL,CAAqB,CAAC,CAAC,GAAvB,EAA4B,CAAC,CAAC,YAA9B,EAA4C,IAA5C,CAAP;AACH,OAFM,CAAP;AAGH;AA5BL;AAAA;AAAA,oCA+BQ,GA/BR,EAmC8B;AAAA,UAHtB,YAGsB,uEAHa,SAGb;AAAA,UAFtB,SAEsB,uEAFW,SAEX;AAAA,UADtB,SACsB;AAAA,UAAtB,aAAsB;AAEtB,aAAO,IAAI,SAAJ,CACH,GADG,EAEH,YAAY,IAAI,EAFb,EAGH,SAAS,IAAI,CAAC,CAAC,aAAa,CAAC,KAAd,CAAoB,IAApB,CAAyB,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,GAAF,KAAU,GAAjB;AAAA,OAAzB,CAHZ,EAIH,SAJG,EAKH,aALG,CAAP;AAOH;AA5CL;AAAA;AAAA,gCA8CqB;AACb,aAAO,KAAK,OAAL,CAAa,GAAb,MAAsB,EAA7B;AACH;AAhDL;AAAA;AAAA,8BAkDqB,KAlDrB,EAkDuC;AAC/B,WAAK,OAAL,CAAa,GAAb,CAAiB,KAAjB;AACH;AApDL;AAAA;AAAA,4BAsDgB;AACR,WAAK,OAAL,CAAa,MAAb;AACH;AAxDL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { NodeInfo, RepositoryFactory } from 'symbol-sdk';\nimport { Observable } from 'rxjs';\nimport { ObservableHelpers } from '@/core/utils/ObservableHelpers';\nimport { map, tap } from 'rxjs/operators';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\nimport * as _ from 'lodash';\nimport { networkConfig } from '@/config';\nimport { NodeModelStorage } from '@/core/database/storage/NodeModelStorage';\n\n/**\n * The service in charge of loading and caching anything related to Node and Peers from Rest.\n * The cache is done by storing the payloads in SimpleObjectStorage.\n */\nexport class NodeService {\n    /**\n     * The peer information local cache.\n     */\n    private readonly storage = NodeModelStorage.INSTANCE;\n\n    public getKnowNodesOnly(): NodeModel[] {\n        return _.uniqBy(this.loadNodes().concat(this.loadStaticNodes()), 'url');\n    }\n\n    public getNodes(repositoryFactory: RepositoryFactory, repositoryFactoryUrl: string): Observable<NodeModel[]> {\n        const storedNodes = this.getKnowNodesOnly();\n        const nodeRepository = repositoryFactory.createNodeRepository();\n\n        return nodeRepository.getNodeInfo().pipe(\n            map((dto: NodeInfo) =>\n                this.createNodeModel(repositoryFactoryUrl, dto.friendlyName, undefined, dto.publicKey, dto.nodePublicKey),\n            ),\n            ObservableHelpers.defaultLast(this.createNodeModel(repositoryFactoryUrl)),\n            map((currentNode) => _.uniqBy([currentNode, ...storedNodes], 'url')),\n            tap((p) => this.saveNodes(p)),\n        );\n    }\n\n    private loadStaticNodes(): NodeModel[] {\n        return networkConfig.nodes.map((n) => {\n            return this.createNodeModel(n.url, n.friendlyName, true);\n        });\n    }\n\n    private createNodeModel(\n        url: string,\n        friendlyName: string | undefined = undefined,\n        isDefault: boolean | undefined = undefined,\n        publicKey?: string,\n        nodePublicKey?: string,\n    ): NodeModel {\n        return new NodeModel(\n            url,\n            friendlyName || '',\n            isDefault || !!networkConfig.nodes.find((n) => n.url === url),\n            publicKey,\n            nodePublicKey,\n        );\n    }\n\n    private loadNodes(): NodeModel[] {\n        return this.storage.get() || [];\n    }\n\n    public saveNodes(nodes: NodeModel[]) {\n        this.storage.set(nodes);\n    }\n\n    public reset() {\n        this.storage.remove();\n    }\n}\n"],"sourceRoot":""}]}
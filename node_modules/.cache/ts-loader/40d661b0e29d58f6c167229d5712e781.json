{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/AccountMultisigGraph/AccountMultisigGraphTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/AccountMultisigGraph/AccountMultisigGraphTs.ts","mtime":1606213958949},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/components/AccountMultisigGraph/AccountMultisigGraphTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { mapGetters } from 'vuex';\nimport { Address, MultisigAccountInfo } from 'symbol-sdk';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            multisigAccountGraphInfo: 'account/multisigAccountGraph',\n            knownAccounts: 'account/knownAccounts',\n        }),\n    },\n})\nexport class AccountMultisigGraphTs extends Vue {\n    @Prop({\n        default: null,\n    })\n    account: AccountModel;\n\n    @Prop({\n        default: null,\n    })\n    visible: boolean;\n    public multisigAccountGraphInfo: MultisigAccountInfo[][];\n    public knownAccounts: AccountModel[];\n\n    get multisigGraphTree(): any[] {\n        if (this.multisigAccountGraphInfo) {\n            const tree = [];\n            this.multisigAccountGraphInfo.map((level: MultisigAccountInfo[]) => {\n                level.map((entry: MultisigAccountInfo) => {\n                    const selected = this.account.address === entry.accountAddress.plain();\n                    if (!entry.cosignatoryAddresses.length) {\n                        tree.push({\n                            address: entry.accountAddress.plain(),\n                            title: this.getAccountLabel(entry.accountAddress, this.knownAccounts),\n                            children: [],\n                            selected,\n                        });\n                    } else {\n                        // find the entry matching with address matching cosignatory address and update his children\n                        const updateRecursively = (address, object) => (obj) => {\n                            if (obj.address === address) {\n                                obj.children.push(object);\n                            } else if (obj.children) {\n                                obj.children.forEach(updateRecursively(address, object));\n                            }\n                        };\n                        // @ts-ignore\n                        entry.cosignatoryAddresses.forEach((addressVal) => {\n                            tree.forEach(\n                                updateRecursively(addressVal['address'], {\n                                    // @ts-ignore\n                                    address: entry.accountAddress.plain(),\n                                    // @ts-ignore\n                                    title: this.getAccountLabel(entry.accountAddress, this.knownAccounts),\n                                    children: [],\n                                    selected,\n                                }),\n                            );\n                        });\n                    }\n                });\n            });\n            return tree;\n        }\n        return [];\n    }\n\n    getAccountLabel(address: Address, accounts: AccountModel[]): string {\n        const account = accounts.find((wlt) => address.plain() === wlt.address);\n        return (account && account.name) || address.plain();\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/NetworkService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/NetworkService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/services/NetworkService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { NetworkModel } from '@/core/database/entities/NetworkModel';\nimport { NetworkConfiguration, RepositoryFactory, RepositoryFactoryHttp } from 'symbol-sdk';\nimport { URLHelpers } from '@/core/utils/URLHelpers';\nimport { combineLatest, defer, EMPTY, from, Observable } from 'rxjs';\nimport { catchError, concatMap, flatMap, map, take, tap, isEmpty } from 'rxjs/operators';\nimport * as _ from 'lodash';\n\nimport { ObservableHelpers } from '@/core/utils/ObservableHelpers';\n\nimport { networkConfig } from '@/config';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\nimport { NetworkConfigurationHelpers } from '@/core/utils/NetworkConfigurationHelpers';\nimport { NetworkModelStorage } from '@/core/database/storage/NetworkModelStorage';\n\n/**\n * The service in charge of loading and caching anything related to Network from Rest.\n * The cache is done by storing the payloads in SimpleObjectStorage.\n */\nexport class NetworkService {\n    /**\n     * The network information local cache.\n     */\n    private readonly storage = NetworkModelStorage.INSTANCE;\n\n    /**\n     * The best default Url. It uses the stored condiguration if possible.\n     */\n    public getDefaultUrl(): string {\n        const storedNetworkModel = this.storage.getLatest();\n        return URLHelpers.formatUrl((storedNetworkModel && storedNetworkModel.url) || networkConfig.defaultNodeUrl).url;\n    }\n\n    /**\n     * This method get the network data from the provided URL. If the server in the candidateUrl is down,\n     * the next available url will be used.\n     *\n     * @param candidateUrl the new url.\n     * @param generationHash of the current profile\n     */\n    public getNetworkModel(\n        candidateUrl: string | undefined,\n        generationHash?: string | undefined,\n    ): Observable<{\n        fallback: boolean;\n        networkModel: NetworkModel;\n        repositoryFactory: RepositoryFactory;\n        isCandidateUrlAvailable: boolean;\n    }> {\n        const possibleUrls = this.resolveCandidates(candidateUrl, this.storage.get(generationHash) || this.storage.getLatest());\n        let isCandidateUrlAvailable: boolean = true;\n        const repositoryFactoryObservable = from(possibleUrls)\n            .pipe(\n                concatMap((url) => {\n                    if (url === candidateUrl) {\n                        this.createRepositoryFactory(url)\n                            .pipe(isEmpty())\n                            .subscribe((isEmpty) => (isCandidateUrlAvailable = !isEmpty));\n                    }\n                    return this.createRepositoryFactory(url);\n                }),\n            )\n            .pipe(take(1));\n        return repositoryFactoryObservable.pipe(\n            flatMap(({ url, repositoryFactory }) => {\n                return repositoryFactory.getGenerationHash().pipe(\n                    flatMap((generationHash) => {\n                        const storedNetworkModel = this.storage.get(generationHash);\n                        const networkRepository = repositoryFactory.createNetworkRepository();\n                        const nodeRepository = repositoryFactory.createNodeRepository();\n                        const networkTypeObservable = repositoryFactory\n                            .getNetworkType()\n                            .pipe(\n                                ObservableHelpers.defaultLast(\n                                    (storedNetworkModel && storedNetworkModel.networkType) || networkConfig.defaultNetworkType,\n                                ),\n                            );\n                        const generationHashObservable = repositoryFactory\n                            .getGenerationHash()\n                            .pipe(ObservableHelpers.defaultLast(storedNetworkModel && storedNetworkModel.generationHash));\n\n                        const networkPropertiesObservable = networkRepository.getNetworkProperties().pipe(\n                            map((d) => this.toNetworkConfigurationModel(d)),\n                            ObservableHelpers.defaultLast(storedNetworkModel && storedNetworkModel.networkConfiguration),\n                        );\n                        const nodeInfoObservable = nodeRepository\n                            .getNodeInfo()\n                            .pipe(ObservableHelpers.defaultLast(storedNetworkModel && storedNetworkModel.nodeInfo));\n\n                        const transactionFeesObservable = repositoryFactory\n                            .createNetworkRepository()\n                            .getTransactionFees()\n                            .pipe(ObservableHelpers.defaultLast(storedNetworkModel && storedNetworkModel.transactionFees));\n\n                        return combineLatest([\n                            networkTypeObservable,\n                            generationHashObservable,\n                            networkPropertiesObservable,\n                            nodeInfoObservable,\n                            transactionFeesObservable,\n                        ]).pipe(\n                            map(([networkType, generationHash, networkProperties, nodeInfo, transactionFees]) => {\n                                return {\n                                    fallback: !!candidateUrl && candidateUrl !== url,\n                                    networkModel: new NetworkModel(\n                                        url,\n                                        networkType,\n                                        generationHash,\n                                        networkProperties,\n                                        transactionFees,\n                                        nodeInfo,\n                                    ),\n                                    repositoryFactory,\n                                    isCandidateUrlAvailable,\n                                };\n                            }),\n                            tap((p) => this.storage.set(generationHash, p.networkModel)),\n                        );\n                    }),\n                );\n            }),\n        );\n    }\n\n    private createRepositoryFactory(url: string): Observable<{ url: string; repositoryFactory: RepositoryFactory }> {\n        console.log(`Testing ${url}`);\n        const repositoryFactory = NetworkService.createRepositoryFactory(url);\n        return defer(() => {\n            return repositoryFactory.getGenerationHash();\n        }).pipe(\n            map(() => {\n                console.log(`Peer ${url} seems OK`);\n                return { url, repositoryFactory };\n            }),\n            catchError((e) => {\n                console.log(`Peer ${url} seems down. Ignoring. Error: ${e.message}`, e);\n                return EMPTY;\n            }),\n        );\n    }\n\n    private toNetworkConfigurationModel(dto: NetworkConfiguration): NetworkConfigurationModel {\n        const fileDefaults: NetworkConfigurationModel = networkConfig.networkConfigurationDefaults;\n        const fromDto: NetworkConfigurationModel = {\n            epochAdjustment: NetworkConfigurationHelpers.epochAdjustment(dto),\n            maxMosaicDivisibility: NetworkConfigurationHelpers.maxMosaicDivisibility(dto),\n            namespaceGracePeriodDuration: NetworkConfigurationHelpers.namespaceGracePeriodDuration(dto),\n            lockedFundsPerAggregate: NetworkConfigurationHelpers.lockedFundsPerAggregate(dto),\n            maxCosignatoriesPerAccount: NetworkConfigurationHelpers.maxCosignatoriesPerAccount(dto),\n            blockGenerationTargetTime: NetworkConfigurationHelpers.blockGenerationTargetTime(dto),\n            maxNamespaceDepth: NetworkConfigurationHelpers.maxNamespaceDepth(dto),\n            maxMosaicDuration: NetworkConfigurationHelpers.maxMosaicDuration(dto),\n            minNamespaceDuration: NetworkConfigurationHelpers.minNamespaceDuration(dto),\n            maxNamespaceDuration: NetworkConfigurationHelpers.maxNamespaceDuration(dto),\n            maxTransactionsPerAggregate: NetworkConfigurationHelpers.maxTransactionsPerAggregate(dto),\n            maxCosignedAccountsPerAccount: NetworkConfigurationHelpers.maxCosignedAccountsPerAccount(dto),\n            maxMessageSize: NetworkConfigurationHelpers.maxMessageSize(dto),\n            maxMosaicAtomicUnits: NetworkConfigurationHelpers.maxMosaicAtomicUnits(dto),\n            currencyMosaicId: NetworkConfigurationHelpers.currencyMosaicId(dto),\n            harvestingMosaicId: NetworkConfigurationHelpers.harvestingMosaicId(dto),\n            defaultDynamicFeeMultiplier: NetworkConfigurationHelpers.defaultDynamicFeeMultiplier(dto),\n        };\n        return { ...fileDefaults, ...fromDto };\n    }\n\n    private resolveCandidates(newUrl: string | undefined, storedNetworkModel: NetworkModel | undefined): string[] {\n        // Should we load cached candidates in the node tables?\n        return _.uniq(\n            [\n                newUrl,\n                storedNetworkModel && storedNetworkModel.url,\n                networkConfig.defaultNodeUrl,\n                ...networkConfig.nodes.map((n) => n.url),\n            ].filter((p) => p !== undefined && p.length),\n        );\n    }\n\n    public reset(generationHash: string) {\n        this.storage.remove(generationHash);\n    }\n\n    /**\n     * It creates the RepositoryFactory used to build the http repository/clients and listeners.\n     * @param url the url.\n     */\n    public static createRepositoryFactory(url: string): RepositoryFactory {\n        return new RepositoryFactoryHttp(url, {\n            websocketUrl: URLHelpers.httpToWsUrl(url) + '/ws',\n            websocketInjected: WebSocket,\n        });\n    }\n}\n"],"sourceRoot":""}]}
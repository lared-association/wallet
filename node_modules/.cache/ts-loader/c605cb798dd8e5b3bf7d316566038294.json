{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormMosaicDefinitionTransaction/FormMosaicDefinitionTransactionTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormMosaicDefinitionTransaction/FormMosaicDefinitionTransactionTs.ts","mtime":1611927227569},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormMosaicDefinitionTransaction/FormMosaicDefinitionTransactionTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport {\n    MosaicDefinitionTransaction,\n    MosaicFlags,\n    MosaicId,\n    MosaicNonce,\n    MosaicSupplyChangeAction,\n    MosaicSupplyChangeTransaction,\n    Transaction,\n    UInt64,\n} from 'symbol-sdk';\nimport { Component, Prop, Watch } from 'vue-property-decorator';\n// internal dependencies\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport SupplyInput from '@/components/SupplyInput/SupplyInput.vue';\n// @ts-ignore\nimport DivisibilityInput from '@/components/DivisibilityInput/DivisibilityInput.vue';\n// @ts-ignore\nimport DurationInput from '@/components/DurationInput/DurationInput.vue';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n//@ts-ignore\nimport RentalFee from '@/components/RentalFees/RentalFee.vue';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        FormWrapper,\n        SignerSelector,\n        SupplyInput,\n        DivisibilityInput,\n        DurationInput,\n        ModalTransactionConfirmation,\n        MaxFeeAndSubmit,\n        FormRow,\n        RentalFee,\n    },\n})\nexport class FormMosaicDefinitionTransactionTs extends FormTransactionBase {\n    @Prop({\n        default: () => ({}),\n    })\n    value: any;\n\n    @Prop({\n        default: '',\n    })\n    title: string;\n\n    @Prop({\n        default: false,\n    })\n    isAggregate: boolean;\n    /**\n     * Form items\n     * @var {Record<string, any>}\n     */\n    public formItems = {\n        signerAddress: '',\n        supply: 500000000,\n        divisibility: 0,\n        supplyMutable: true,\n        transferable: true,\n        restrictable: true,\n        permanent: true,\n        duration: 10000,\n        maxFee: 0,\n    };\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        // - re-populate form if transaction staged\n        // if (this.stagedTransactions.length) {\n        //   const definition = this.stagedTransactions.find(staged => staged.type === TransactionType.MOSAIC_DEFINITION)\n        //   const supply = this.stagedTransactions.find(staged => staged.type === TransactionType.MOSAIC_SUPPLY_CHANGE)\n        //   if (definition === undefined || supply === undefined) return\n        //   this.setTransactions([\n        //     definition as MosaicDefinitionTransaction,\n        //     supply as MosaicSupplyChangeTransaction\n        //   ])\n        //   this.isAwaitingSignature = true\n        //   return ;\n        // }\n\n        // - set default form values\n        this.formItems.signerAddress = this.selectedSigner ? this.selectedSigner.address.plain() : this.currentAccount.address;\n        this.formItems.supplyMutable = false;\n        this.formItems.restrictable = false;\n        this.formItems.permanent = false;\n        this.formItems.duration = 10000;\n\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n    }\n\n    /// region computed properties getter/setter\n    /**\n     * Getter for MOSAIC DEFINITION and SUPPLY CHANGE transactions that will be staged\n     * @see {FormTransactionBase}\n     * @return {TransferTransaction[]}\n     */\n    protected getTransactions(): Transaction[] {\n        const maxFee = UInt64.fromUint(this.formItems.maxFee);\n        //const publicAccount = PublicAccount.createFromPublicKey(this.selectedSigner.publicKey, this.networkType)\n        const randomNonce = MosaicNonce.createRandom();\n        // - read form for definition\n        const mosaicId = MosaicId.createFromNonce(randomNonce, this.selectedSigner.address);\n        // the duration must be 0 when the permanent value of true\n        if (this.formItems.permanent) {\n            this.formItems.duration = 0;\n        }\n        const mosaicDefinitionTransaction = MosaicDefinitionTransaction.create(\n            this.createDeadline(),\n            randomNonce,\n            mosaicId,\n            MosaicFlags.create(this.formItems.supplyMutable, this.formItems.transferable, this.formItems.restrictable),\n            this.formItems.divisibility,\n            UInt64.fromUint(this.formItems.duration),\n            this.networkType,\n            maxFee,\n        );\n        const mosaicSupplyChangeTransaction = MosaicSupplyChangeTransaction.create(\n            this.createDeadline(),\n            mosaicId,\n            MosaicSupplyChangeAction.Increase,\n            UInt64.fromUint(this.formItems.supply),\n            this.networkType,\n            maxFee,\n        );\n        return [mosaicDefinitionTransaction, mosaicSupplyChangeTransaction];\n    }\n\n    /**\n     * Setter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @param {TransferTransaction[]} transactions\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions(transactions: Transaction[]) {\n        // - this form creates 2 transaction\n        const definition = transactions.shift() as MosaicDefinitionTransaction;\n        const supplyChange = transactions.shift() as MosaicSupplyChangeTransaction;\n\n        // - populate from definition\n        this.formItems.divisibility = definition.divisibility;\n        this.formItems.supplyMutable = definition.flags.supplyMutable;\n        this.formItems.transferable = definition.flags.transferable;\n        this.formItems.restrictable = definition.flags.restrictable;\n        this.formItems.permanent = definition.duration.compact() === 0;\n        this.formItems.duration = definition.duration.compact();\n\n        // - populate from supply change\n        this.formItems.supply = supplyChange.delta.compact();\n\n        // - populate maxFee\n        this.formItems.maxFee = definition.maxFee.compact();\n    }\n    /**\n     * emit formItems values to aggregate transaction form to be saved in storage\n     */\n    public emitToAggregate() {\n        if (this.getTransactions().length > 0) {\n            this.$emit('txInput', this.formItems);\n        }\n    }\n    mounted() {\n        if (this.isAggregate && this.value) {\n            Object.assign(this.formItems, this.value);\n            // set supplyMutable to true by default so users will be able to change supply after creating the mosaic\n            this.formItems.supplyMutable = true;\n        }\n    }\n    /**\n     * watch title to change form items on select different transactions\n     */\n    @Watch('title')\n    onTitleChange() {\n        if (this.isAggregate) {\n            Object.assign(this.formItems, this.value);\n        }\n    }\n    /**\n     * Resetting the form when choosing a multisig signer and changing multisig signer\n     * Is necessary to make the mosaic inputs reactive\n     */\n    @Watch('selectedSigner')\n    onSelectedSignerChange() {\n        this.formItems.signerAddress = this.selectedSigner.address.plain();\n        if (this.isMultisigMode()) {\n            this.resetForm();\n        }\n    }\n}\n"],"sourceRoot":""}]}
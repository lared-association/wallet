{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/AccountService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/AccountService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/services/AccountService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Account, Address, NetworkType, Password, SimpleWallet, Crypto } from 'symbol-sdk';\nimport { ExtendedKey, MnemonicPassPhrase, Wallet } from 'symbol-hd-wallets';\n// internal dependencies\nimport { DerivationPathLevels, DerivationService } from './DerivationService';\nimport { DerivationPathValidator } from '@/core/validation/validators';\nimport { AccountModel, AccountType } from '@/core/database/entities/AccountModel';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { SimpleObjectStorage } from '@/core/database/backends/SimpleObjectStorage';\nimport { AccountModelStorage } from '@/core/database/storage/AccountModelStorage';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\n\nexport class AccountService {\n    private readonly storage = AccountModelStorage.INSTANCE;\n\n    /**\n     * Default account derivation path\n     * @var {string}\n     */\n    public static readonly DEFAULT_ACCOUNT_PATH = `m/44'/4343'/0'/0'/0'`;\n\n    public getAccounts(): AccountModel[] {\n        return Object.values(this.getAccountsById());\n    }\n\n    public getAccount(id: string): AccountModel | undefined {\n        return this.getAccountsById()[id];\n    }\n\n    public getAccountsById(): Record<string, AccountModel> {\n        return this.storage.get() || {};\n    }\n\n    public saveAccount(account: AccountModel): AccountModel {\n        const accounts = this.getAccountsById();\n        accounts[account.id] = account;\n        this.storage.set(accounts);\n        return account;\n    }\n\n    public deleteAccount(account: AccountModel) {\n        const accounts = this.getAccountsById();\n        delete accounts[account.id];\n        this.storage.set(accounts);\n    }\n\n    public updateName(account: AccountModel, name: string): AccountModel {\n        return this.saveAccount(Object.assign(account, { name }));\n    }\n\n    public updateIsMultisig(account: AccountModel, isMultisig: boolean): AccountModel {\n        return this.saveAccount(Object.assign(account, { isMultisig }));\n    }\n\n    public updateRemoteAccount(account: AccountModel, encRemoteAccountPrivateKey: string): AccountModel {\n        return this.saveAccount(Object.assign(account, { encRemoteAccountPrivateKey }));\n    }\n\n    public updateSignedPersistentDelReqTxs(account: AccountModel, signedPersistentDelReqTxs): AccountModel {\n        return this.saveAccount(Object.assign(account, { signedPersistentDelReqTxs }));\n    }\n\n    public updateIsPersistentDelReqSent(account: AccountModel, isPersistentDelReqSent: boolean): AccountModel {\n        return this.saveAccount(Object.assign(account, { isPersistentDelReqSent }));\n    }\n\n    public updateSelectedHarvestingNode(account: AccountModel, selectedHarvestingNode: NodeModel): AccountModel {\n        return this.saveAccount(Object.assign(account, { selectedHarvestingNode }));\n    }\n\n    /**\n     * Derive \\a path using \\a mnemonic pass phrase\n     */\n    public getAccountByPath(\n        mnemonic: MnemonicPassPhrase,\n        networkType: NetworkType,\n        path: string = AccountService.DEFAULT_ACCOUNT_PATH,\n    ): Account {\n        if (false === DerivationPathValidator.validate(path)) {\n            const errorMessage = 'Invalid derivation path: ' + path;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n\n        // create hd extended key\n        const extendedKey = ExtendedKey.createFromSeed(mnemonic.toSeed().toString('hex'));\n\n        // create account\n        const account = new Wallet(extendedKey);\n        return Account.createFromPrivateKey(account.getChildAccountPrivateKey(path), networkType);\n    }\n\n    /**\n     * Get extended key around \\a mnemonic for \\a networkTypw\n     * @param {MnemonicPassPhrase} mnemonic\n     * @return {ExtendedKey}\n     */\n    public getExtendedKeyFromMnemonic(mnemonic: MnemonicPassPhrase): ExtendedKey {\n        return ExtendedKey.createFromSeed(mnemonic.toSeed().toString('hex'));\n    }\n\n    /**\n     * Generate \\a count accounts using \\a mnemonic\n     * @param {MnemonicPassPhrase} mnemonic\n     * @param {NetworkType} networkType\n     * @param {string} startPath\n     * @param {number} count\n     * @return {Account[]}\n     */\n    public generateAccountsFromMnemonic(mnemonic: MnemonicPassPhrase, networkType: NetworkType, count: number = 10): Account[] {\n        const derivationService = new DerivationService();\n\n        // create hd extended key\n        const xkey = this.getExtendedKeyFromMnemonic(mnemonic);\n\n        // increment derivation path \\a count times\n        const paths = [...Array(count).keys()].map((index) => {\n            if (index == 0) {\n                return AccountService.DEFAULT_ACCOUNT_PATH;\n            }\n\n            return derivationService.incrementPathLevel(AccountService.DEFAULT_ACCOUNT_PATH, DerivationPathLevels.Profile, index);\n        });\n\n        const wallets = paths.map((path) => new Wallet(xkey.derivePath(path)));\n        return wallets.map((wallet) => Account.createFromPrivateKey(wallet.getAccountPrivateKey(), networkType));\n    }\n\n    /**\n     * Generate accounts using a mnemonic and an array of paths\n     * @param {MnemonicPassPhrase} mnemonic\n     * @param {NetworkType} networkType\n     * @param {string[]} paths\n     * @returns {Account[]}\n     */\n    public generateAccountsFromPaths(mnemonic: MnemonicPassPhrase, networkType: NetworkType, paths: string[]): Account[] {\n        // create hd extended key\n        const xkey = this.getExtendedKeyFromMnemonic(mnemonic);\n        const wallets = paths.map((path) => new Wallet(xkey.derivePath(path)));\n\n        return wallets.map((wallet) => Account.createFromPrivateKey(wallet.getAccountPrivateKey(), networkType));\n    }\n\n    /**\n     * Get list of addresses using \\a mnemonic\n     * @return {Address[]}\n     */\n    public getAddressesFromMnemonic(mnemonic: MnemonicPassPhrase, networkType: NetworkType, count: number = 10): Address[] {\n        const accounts = this.generateAccountsFromMnemonic(mnemonic, networkType, count);\n        return accounts.map((acct) => acct.address);\n    }\n\n    public getKnownAccounts(knownAccounts: string[]): AccountModel[] {\n        // search in known accounts\n        return this.getAccounts().filter((wlt) => knownAccounts.includes(wlt.id));\n    }\n\n    /**\n     * Create a account instance from mnemonic\n     * @return {AccountModel}\n     */\n    public getDefaultAccount(\n        currentProfile: ProfileModel,\n        mnemonic: MnemonicPassPhrase,\n        password: Password,\n        networkType: NetworkType,\n    ): AccountModel {\n        const account = this.getAccountByPath(mnemonic, networkType, AccountService.DEFAULT_ACCOUNT_PATH);\n\n        const simpleWallet = SimpleWallet.createFromPrivateKey('Seed Account 1', password, account.privateKey, networkType);\n\n        return {\n            id: SimpleObjectStorage.generateIdentifier(),\n            profileName: currentProfile.profileName,\n            name: simpleWallet.name,\n            node: '',\n            type: AccountType.SEED,\n            address: simpleWallet.address.plain(),\n            publicKey: account.publicKey,\n            encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n            path: AccountService.DEFAULT_ACCOUNT_PATH,\n            isMultisig: false,\n        };\n    }\n\n    /**\n     * Create a child account instance from mnemonic and path\n     * @return {AccountModel}\n     */\n    public getChildAccountByPath(\n        currentProfile: ProfileModel,\n        password: Password,\n        mnemonic: MnemonicPassPhrase,\n        nextPath: string,\n        networkType: NetworkType,\n        childAccountName: string,\n    ): AccountModel {\n        // - derive account\n        const account = this.getAccountByPath(mnemonic, networkType, nextPath);\n\n        const simpleWallet = SimpleWallet.createFromPrivateKey(childAccountName, password, account.privateKey, networkType);\n\n        return {\n            id: SimpleObjectStorage.generateIdentifier(),\n            profileName: currentProfile.profileName,\n            name: childAccountName,\n            node: '',\n            type: AccountType.SEED,\n            address: simpleWallet.address.plain(),\n            publicKey: account.publicKey,\n            encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n            path: nextPath,\n            isMultisig: false,\n        };\n    }\n\n    /**\n     * Create a sub account by private key\n     * @param currentProfile\n     * @param password\n     * @param childAccountName\n     * @param privateKey\n     * @param networkType\n     * @return {AccountModel}\n     */\n    public getSubAccountByPrivateKey(\n        currentProfile: ProfileModel,\n        password: Password,\n        childAccountName: string,\n        privateKey: string,\n        networkType: NetworkType,\n    ): AccountModel {\n        const account = Account.createFromPrivateKey(privateKey, networkType);\n        const simpleWallet = SimpleWallet.createFromPrivateKey(childAccountName, password, account.privateKey, networkType);\n\n        return {\n            id: SimpleObjectStorage.generateIdentifier(),\n            profileName: currentProfile.profileName,\n            name: childAccountName,\n            node: '',\n            type: AccountType.PRIVATE_KEY,\n            address: simpleWallet.address.plain(),\n            publicKey: account.publicKey,\n            encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n            path: '',\n            isMultisig: false,\n        };\n    }\n\n    /**\n     * Returns a AccountModel with an updated SimpleWallet\n     * @param {AccountModel} account\n     * @param {Password} oldPassword\n     * @param {Password} newPassword\n     */\n    public updateWalletPassword(account: AccountModel, oldPassword: Password, newPassword: Password): AccountModel {\n        // Password modification is not allowed for hardware wallets\n        if (account.type !== AccountType.SEED && account.type !== AccountType.PRIVATE_KEY) {\n            throw new Error('Hardware account password cannot be changed');\n        }\n\n        const privateKey = Crypto.decrypt(account.encryptedPrivateKey, oldPassword.value);\n\n        // Encrypt the private key with the new password\n        const newSimpleWallet = SimpleWallet.createFromPrivateKey(\n            account.name,\n            newPassword,\n            privateKey,\n            AccountModel.getObjects(account).address.networkType,\n        );\n        // Update the account model\n        return {\n            ...account,\n            encryptedPrivateKey: newSimpleWallet.encryptedPrivateKey,\n        };\n    }\n}\n"],"sourceRoot":""}]}
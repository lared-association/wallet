{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/BlockService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/BlockService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KaW1wb3J0IHsgQmxvY2tJbmZvTW9kZWxTdG9yYWdlIH0gZnJvbSAnQC9jb3JlL2RhdGFiYXNlL3N0b3JhZ2UvQmxvY2tJbmZvTW9kZWxTdG9yYWdlJzsKaW1wb3J0IHsgQmxvY2tJbmZvTW9kZWwgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2UvZW50aXRpZXMvQmxvY2tJbmZvTW9kZWwnOwppbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBmbGF0TWFwLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsKaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBPYnNlcnZhYmxlSGVscGVycyB9IGZyb20gJ0AvY29yZS91dGlscy9PYnNlcnZhYmxlSGVscGVycyc7CmV4cG9ydCB2YXIgQmxvY2tTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBCbG9ja1NlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxvY2tTZXJ2aWNlKTsKCiAgICAvKioKICAgICAqIFRoZSBuYW1lc3BhY2UgaW5mb3JtYXRpb24gbG9jYWwgY2FjaGUuCiAgICAgKi8KICAgIHRoaXMuYmxvY2tJbmZvTW9kZWxTdG9yYWdlID0gQmxvY2tJbmZvTW9kZWxTdG9yYWdlLklOU1RBTkNFOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEJsb2NrU2VydmljZSwgW3sKICAgIGtleTogImdldEtub3duQmxvY2tJbmZvcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0S25vd25CbG9ja0luZm9zKGdlbmVyYXRpb25IYXNoKSB7CiAgICAgIHJldHVybiB0aGlzLmJsb2NrSW5mb01vZGVsU3RvcmFnZS5nZXQoZ2VuZXJhdGlvbkhhc2gpIHx8IFtdOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEJsb2NrSW5mbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QmxvY2tJbmZvKHJlcG9zaXRvcnlGYWN0b3J5LCBoZWlnaHQsIGFscmVhZHlMb2FkZWRCbG9ja3MpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiByZXBvc2l0b3J5RmFjdG9yeS5nZXRHZW5lcmF0aW9uSGFzaCgpLnBpcGUoZmxhdE1hcChmdW5jdGlvbiAoZ2VuZXJhdGlvbkhhc2gpIHsKICAgICAgICB2YXIgYmxvY2tJbmZvTW9kZWxzID0gX3RoaXMuZ2V0S25vd25CbG9ja0luZm9zKGdlbmVyYXRpb25IYXNoKTsKCiAgICAgICAgdmFyIGNhY2hlZE1vZGVsID0gYmxvY2tJbmZvTW9kZWxzLmZpbmQoZnVuY3Rpb24gKG0pIHsKICAgICAgICAgIHJldHVybiBtLmhlaWdodCA9PT0gaGVpZ2h0LnRvU3RyaW5nKCk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGFscmVhZHlMb2FkZWRCbG9jayA9IGFscmVhZHlMb2FkZWRCbG9ja3MuZmluZChmdW5jdGlvbiAobSkgewogICAgICAgICAgcmV0dXJuIG0uaGVpZ2h0ID09PSBoZWlnaHQudG9TdHJpbmcoKTsKICAgICAgICB9KTsgLy9Pbmx5IGxvYWQgZnJvbSByZXN0IHRoZSBmaXJzdCB0aW1lIGluIHRoZSBhcHAgc2Vzc2lvbiAoYnV0IHVzaW5nIHRoZSBzdG9yZWQgY2FjaGUgZm9yIHF1aWNrIHVzZXIgZmVlZGJhY2spLgoKICAgICAgICBpZiAoY2FjaGVkTW9kZWwgJiYgYWxyZWFkeUxvYWRlZEJsb2NrICYmIGNhY2hlZE1vZGVsLmdlbmVyYXRpb25IYXNoID09PSBhbHJlYWR5TG9hZGVkQmxvY2suZ2VuZXJhdGlvbkhhc2gpIHsKICAgICAgICAgIHJldHVybiBvZihjYWNoZWRNb2RlbCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVwb3NpdG9yeUZhY3RvcnkuY3JlYXRlQmxvY2tSZXBvc2l0b3J5KCkuZ2V0QmxvY2tCeUhlaWdodChoZWlnaHQpLnBpcGUobWFwKGZ1bmN0aW9uIChkdG8pIHsKICAgICAgICAgIHJldHVybiBuZXcgQmxvY2tJbmZvTW9kZWwoZHRvKTsKICAgICAgICB9KSwgdGFwKGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgICAgdmFyIGJsb2NrSW5mb01vZGVscyA9IF8udW5pcUJ5KFttb2RlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfdGhpcy5nZXRLbm93bkJsb2NrSW5mb3MoZ2VuZXJhdGlvbkhhc2gpKSksICdoZWlnaHQnKTsKCiAgICAgICAgICBfdGhpcy5ibG9ja0luZm9Nb2RlbFN0b3JhZ2Uuc2V0KGdlbmVyYXRpb25IYXNoLCBibG9ja0luZm9Nb2RlbHMpOwogICAgICAgIH0pLCBPYnNlcnZhYmxlSGVscGVycy5kZWZhdWx0Rmlyc3QoY2FjaGVkTW9kZWwpKTsKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJsb2NrU2VydmljZTsKfSgpOw=="},{"version":3,"sources":["/home/hero/lared-wallet/src/services/BlockService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAgBA,SAAS,qBAAT,QAAsC,+CAAtC;AAEA,SAAS,cAAT,QAA+B,yCAA/B;AACA,SAAqB,EAArB,QAA+B,MAA/B;AACA,SAAS,OAAT,EAAkB,GAAlB,EAAuB,GAAvB,QAAkC,gBAAlC;AACA,OAAO,KAAK,CAAZ,MAAmB,QAAnB;AACA,SAAS,iBAAT,QAAkC,gCAAlC;AAEA,WAAa,YAAb;AAAA,0BAAA;AAAA;;AACI;;;AAGiB,SAAA,qBAAA,GAAwB,qBAAqB,CAAC,QAA9C;AAkCpB;;AAtCD;AAAA;AAAA,uCAM8B,cAN9B,EAMoD;AAC5C,aAAO,KAAK,qBAAL,CAA2B,GAA3B,CAA+B,cAA/B,KAAkD,EAAzD;AACH;AARL;AAAA;AAAA,iCAWQ,iBAXR,EAYQ,MAZR,EAaQ,mBAbR,EAa6C;AAAA;;AAErC,aAAO,iBAAiB,CAAC,iBAAlB,GAAsC,IAAtC,CACH,OAAO,CAAC,UAAC,cAAD,EAAmB;AACvB,YAAM,eAAe,GAAG,KAAI,CAAC,kBAAL,CAAwB,cAAxB,CAAxB;;AACA,YAAM,WAAW,GAAG,eAAe,CAAC,IAAhB,CAAqB,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,MAAF,KAAa,MAAM,CAAC,QAAP,EAApB;AAAA,SAArB,CAApB;AACA,YAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAApB,CAAyB,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,MAAF,KAAa,MAAM,CAAC,QAAP,EAApB;AAAA,SAAzB,CAA3B,CAHuB,CAIvB;;AACA,YAAI,WAAW,IAAI,kBAAf,IAAqC,WAAW,CAAC,cAAZ,KAA+B,kBAAkB,CAAC,cAA3F,EAA2G;AACvG,iBAAO,EAAE,CAAC,WAAD,CAAT;AACH;;AACD,eAAO,iBAAiB,CACnB,qBADE,GAEF,gBAFE,CAEe,MAFf,EAGF,IAHE,CAIC,GAAG,CAAC,UAAC,GAAD;AAAA,iBAAS,IAAI,cAAJ,CAAmB,GAAnB,CAAT;AAAA,SAAD,CAJJ,EAKC,GAAG,CAAC,UAAC,KAAD,EAAU;AACV,cAAM,eAAe,GAAG,CAAC,CAAC,MAAF,EAAU,KAAV,4BAAoB,KAAI,CAAC,kBAAL,CAAwB,cAAxB,CAApB,IAA8D,QAA9D,CAAxB;;AACA,UAAA,KAAI,CAAC,qBAAL,CAA2B,GAA3B,CAA+B,cAA/B,EAA+C,eAA/C;AACH,SAHE,CALJ,EASC,iBAAiB,CAAC,YAAlB,CAA+B,WAA/B,CATD,CAAP;AAWH,OAnBM,CADJ,CAAP;AAsBH;AArCL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { BlockInfoModelStorage } from '@/core/database/storage/BlockInfoModelStorage';\nimport { RepositoryFactory, UInt64 } from 'symbol-sdk';\nimport { BlockInfoModel } from '@/core/database/entities/BlockInfoModel';\nimport { Observable, of } from 'rxjs';\nimport { flatMap, map, tap } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport { ObservableHelpers } from '@/core/utils/ObservableHelpers';\n\nexport class BlockService {\n    /**\n     * The namespace information local cache.\n     */\n    private readonly blockInfoModelStorage = BlockInfoModelStorage.INSTANCE;\n\n    public getKnownBlockInfos(generationHash: string): BlockInfoModel[] {\n        return this.blockInfoModelStorage.get(generationHash) || [];\n    }\n\n    public getBlockInfo(\n        repositoryFactory: RepositoryFactory,\n        height: UInt64,\n        alreadyLoadedBlocks: BlockInfoModel[],\n    ): Observable<BlockInfoModel> {\n        return repositoryFactory.getGenerationHash().pipe(\n            flatMap((generationHash) => {\n                const blockInfoModels = this.getKnownBlockInfos(generationHash);\n                const cachedModel = blockInfoModels.find((m) => m.height === height.toString());\n                const alreadyLoadedBlock = alreadyLoadedBlocks.find((m) => m.height === height.toString());\n                //Only load from rest the first time in the app session (but using the stored cache for quick user feedback).\n                if (cachedModel && alreadyLoadedBlock && cachedModel.generationHash === alreadyLoadedBlock.generationHash) {\n                    return of(cachedModel);\n                }\n                return repositoryFactory\n                    .createBlockRepository()\n                    .getBlockByHeight(height)\n                    .pipe(\n                        map((dto) => new BlockInfoModel(dto)),\n                        tap((model) => {\n                            const blockInfoModels = _.uniqBy([model, ...this.getKnownBlockInfos(generationHash)], 'height');\n                            this.blockInfoModelStorage.set(generationHash, blockInfoModels);\n                        }),\n                        ObservableHelpers.defaultFirst(cachedModel),\n                    );\n            }),\n        );\n    }\n}\n"],"sourceRoot":""}]}
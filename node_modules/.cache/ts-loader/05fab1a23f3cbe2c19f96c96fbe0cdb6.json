{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AssetTableService/AssetTableService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AssetTableService/AssetTableService.ts","mtime":1611927204166},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgovKgogKiBDb3B5cmlnaHQgMjAyMCBORU0gKGh0dHBzOi8vbmVtLmlvKQogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICoKICovCmV4cG9ydCB2YXIgQXNzZXRUYWJsZVNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFzc2V0VGFibGVTZXJ2aWNlKGN1cnJlbnRIZWlnaHQpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NldFRhYmxlU2VydmljZSk7CgogICAgdGhpcy5jdXJyZW50SGVpZ2h0ID0gY3VycmVudEhlaWdodDsKICB9CiAgLyoqCiAgICogRmlsdGVyIHRhYmxlIHJvd3MgYWNjb3JkaW5nIHRvIGZpbHRlcmluZyBvcHRpb25zCiAgICogQHBhcmFtIHtUYWJsZVJvd1ZhbHVlc1tdfSB2YWx1ZXMKICAgKiBAcGFyYW0ge1RhYmxlRmlsdGVyaW5nT3B0aW9uc30gZmlsdGVyQnkKICAgKiBAcmV0dXJucyB7VGFibGVSb3dWYWx1ZXNbXX0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhBc3NldFRhYmxlU2VydmljZSwgW3sKICAgIGtleTogImZpbHRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsdGVyKHZhbHVlcywgX2ZpbHRlcikgewogICAgICBpZiAoX2ZpbHRlci5maWx0ZXJpbmdUeXBlID09PSAnc2hvdycpIHsKICAgICAgICByZXR1cm4gdmFsdWVzOwogICAgICB9CgogICAgICBpZiAoX2ZpbHRlci5maWVsZE5hbWUgPT09ICdleHBpcmF0aW9uJykgewogICAgICAgIHJldHVybiB2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgICB2YXIgZXhwaXJhdGlvbiA9IF9yZWYuZXhwaXJhdGlvbjsKICAgICAgICAgIHJldHVybiBleHBpcmF0aW9uICE9PSAnZXhwaXJlZCc7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChfZmlsdGVyLmZpZWxkTmFtZSA9PT0gJ2V4cGlyZWQnKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlcy5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gJ2V4cGlyZWQnIGluIHZhbHVlICYmIHZhbHVlLmV4cGlyZWQ7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRocm93IG5ldyBFcnJvcigiU29ydGluZyBieSAnIi5jb25jYXQoX2ZpbHRlci5maWVsZE5hbWUsICInIGZpZWxkIGlzIG5vdCB5ZXQgaW1wbGVtZW50ZWQiKSk7CiAgICB9CiAgICAvKioKICAgICAqIFNvcnRzIGFycmF5IHZhbHVlcyBhY2NvcmRpbmcgdG8gc29ydGluZyBvcHRpb25zCiAgICAgKiBAcGFyYW0ge1RhYmxlUm93VmFsdWVzW119IHZhbHVlc1RvU29ydAogICAgICogQHBhcmFtIHtUYWJsZVNvcnRpbmdPcHRpb25zfSBzb3J0QnkKICAgICAqIEByZXR1cm5zIHtUYWJsZVJvd1ZhbHVlc1tdfQogICAgICovCgogIH0sIHsKICAgIGtleTogInNvcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnQodmFsdWVzVG9Tb3J0LCBvcHRpb25zKSB7CiAgICAgIHZhciB2YWx1ZXMgPSBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzVG9Tb3J0KTsKCiAgICAgIHZhciBzb3J0aW5nTWV0aG9kID0gb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdhc2MnID8gJ3NvcnQnIDogJ3JldmVyc2UnOwoKICAgICAgaWYgKCF2YWx1ZXMubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlczsKICAgICAgfSAvLyAtIHVzZSBzYW1wbGUgdG8gaWRlbnRpZnkgZmllbGRzIHR5cGUKCgogICAgICB2YXIgc2FtcGxlVmFsdWUgPSBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzKVswXVtvcHRpb25zLmZpZWxkTmFtZV07CgogICAgICBpZiAoc2FtcGxlVmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiB2YWx1ZXM7CiAgICAgIH0gLy8gLSBzb3J0aW5nIG1ldGhvZCBkZXBlbmRzIG9uIHR5cGUKCgogICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzYW1wbGVWYWx1ZSkgewogICAgICAgIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzKVtzb3J0aW5nTWV0aG9kXShmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgcmV0dXJuIGFbb3B0aW9ucy5maWVsZE5hbWVdLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiW29wdGlvbnMuZmllbGROYW1lXS50b0xvd2VyQ2FzZSgpLCBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IG5hdmlnYXRvci5sYW5ndWFnZSwgewogICAgICAgICAgICBudW1lcmljOiB0cnVlLAogICAgICAgICAgICBpZ25vcmVQdW5jdHVhdGlvbjogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoJ2Jvb2xlYW4nID09PSB0eXBlb2Ygc2FtcGxlVmFsdWUpIHsKICAgICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcylbc29ydGluZ01ldGhvZF0oZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBhW29wdGlvbnMuZmllbGROYW1lXSA9PT0gYltvcHRpb25zLmZpZWxkTmFtZV0gPyAwIDogYVtvcHRpb25zLmZpZWxkTmFtZV0gPyAtMSA6IDE7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzYW1wbGVWYWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZXNbc29ydGluZ01ldGhvZF0oZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIGlmICghYltvcHRpb25zLmZpZWxkTmFtZV0gfHwgIWFbb3B0aW9ucy5maWVsZE5hbWVdKSB7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBiW29wdGlvbnMuZmllbGROYW1lXSAtIGFbb3B0aW9ucy5maWVsZE5hbWVdOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aHJvdyBuZXcgRXJyb3IoInNvcnRpbmcgdGhlIGRhdGEgdHlwZSAiLmNvbmNhdChfdHlwZW9mKHNhbXBsZVZhbHVlKSwgIiBpcyBub3Qgc3VwcG9ydGVkIikpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFzc2V0VGFibGVTZXJ2aWNlOwp9KCk7"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AssetTableService/AssetTableService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AA8CH,WAAsB,iBAAtB;AACI,6BAAsC,aAAtC,EAA2D;AAAA;;AAArB,SAAA,aAAA,GAAA,aAAA;AAAyB;AAc/D;;;;;AAKG;;;AApBP;AAAA;AAAA,2BAqBkB,MArBlB,EAqBiC,OArBjC,EAqB8D;AACtD,UAAI,OAAM,CAAC,aAAP,KAAyB,MAA7B,EAAqC;AACjC,eAAO,MAAP;AACH;;AAED,UAAI,OAAM,CAAC,SAAP,KAAqB,YAAzB,EAAuC;AACnC,eAAO,MAAM,CAAC,MAAP,CAAc;AAAA,cAAG,UAAH,QAAG,UAAH;AAAA,iBAAoB,UAAU,KAAK,SAAnC;AAAA,SAAd,CAAP;AACH;;AAED,UAAI,OAAM,CAAC,SAAP,KAAqB,SAAzB,EAAoC;AAChC,eAAO,MAAM,CAAC,MAAP,CAAc,UAAC,KAAD;AAAA,iBAAW,aAAa,KAAb,IAAsB,KAAK,CAAC,OAAvC;AAAA,SAAd,CAAP;AACH;;AAED,YAAM,IAAI,KAAJ,uBAAyB,OAAM,CAAC,SAAhC,oCAAN;AACH;AAED;;;;;AAKG;;AA1CP;AAAA;AAAA,yBA2CgB,YA3ChB,EA2CqC,OA3CrC,EA2CiE;AACzD,UAAM,MAAM,sBAAO,YAAP,CAAZ;;AACA,UAAM,aAAa,GAAG,OAAO,CAAC,SAAR,KAAsB,KAAtB,GAA8B,MAA9B,GAAuC,SAA7D;;AACA,UAAI,CAAC,MAAM,CAAC,MAAZ,EAAoB;AAChB,eAAO,MAAP;AACH,OALwD,CAOzD;;;AACA,UAAM,WAAW,GAAG,mBAAI,MAAJ,EAAY,CAAZ,EAAe,OAAO,CAAC,SAAvB,CAApB;;AAEA,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC3B,eAAO,MAAP;AACH,OAZwD,CAczD;;;AACA,UAAI,aAAa,OAAO,WAAxB,EAAqC;AACjC,eAAO,mBAAI,MAAJ,EAAY,aAAZ,EAA2B,UAAC,CAAD,EAAI,CAAJ,EAAS;AACvC,iBAAO,CAAC,CAAC,OAAO,CAAC,SAAT,CAAD,CACF,WADE,GAEF,aAFE,CAEY,CAAC,CAAC,OAAO,CAAC,SAAT,CAAD,CAAqB,WAArB,EAFZ,EAEgD,SAAS,CAAC,SAAV,CAAoB,CAApB,KAA0B,SAAS,CAAC,QAFpF,EAE8F;AAC7F,YAAA,OAAO,EAAE,IADoF;AAE7F,YAAA,iBAAiB,EAAE;AAF0E,WAF9F,CAAP;AAMH,SAPM,CAAP;AAQH,OATD,MASO,IAAI,cAAc,OAAO,WAAzB,EAAsC;AACzC,eAAO,mBAAI,MAAJ,EAAY,aAAZ,EAA2B,UAAC,CAAD,EAAI,CAAJ,EAAS;AACvC,iBAAO,CAAC,CAAC,OAAO,CAAC,SAAT,CAAD,KAAyB,CAAC,CAAC,OAAO,CAAC,SAAT,CAA1B,GAAgD,CAAhD,GAAoD,CAAC,CAAC,OAAO,CAAC,SAAT,CAAD,GAAuB,CAAC,CAAxB,GAA4B,CAAvF;AACH,SAFM,CAAP;AAGH,OAJM,MAIA,IAAI,aAAa,OAAO,WAAxB,EAAqC;AACxC,eAAO,MAAM,CAAC,aAAD,CAAN,CAAsB,UAAC,CAAD,EAAI,CAAJ,EAAS;AAClC,cAAI,CAAC,CAAC,CAAC,OAAO,CAAC,SAAT,CAAF,IAAyB,CAAC,CAAC,CAAC,OAAO,CAAC,SAAT,CAA/B,EAAoD;AAChD,mBAAO,CAAP;AACH;;AACD,iBAAO,CAAC,CAAC,OAAO,CAAC,SAAT,CAAD,GAAuB,CAAC,CAAC,OAAO,CAAC,SAAT,CAA/B;AACH,SALM,CAAP;AAMH;;AAED,YAAM,IAAI,KAAJ,yCAA0C,WAA1C,wBAAN;AACH;AAjFL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/**\n * Table field to be used in a table header\n * @export\n * @interface TableField\n */\nexport interface TableField {\n    name: string;\n    label: string;\n}\n\n/**\n * Sorting directions\n * @export\n * @type {SortingDirections}\n */\nexport type SortingDirections = 'asc' | 'desc';\n\n/**\n * Sorting options\n * @export\n * @type {TableSortingOptions}\n */\nexport type TableSortingOptions = {\n    fieldName: string;\n    direction: SortingDirections;\n};\n\n/**\n * Filtering types\n * @export\n * @type {FilteringTypes}\n */\nexport type FilteringTypes = 'show' | 'hide';\n\n/**\n * Filtering options\n * @export\n * @type {TableFilteringOptions}\n */\nexport type TableFilteringOptions = {\n    fieldName: string;\n    filteringType: FilteringTypes;\n};\n\nexport abstract class AssetTableService {\n    protected constructor(public readonly currentHeight: number) {}\n\n    /**\n     * Return table fields to be displayed in a table header\n     * @returns {TableField[]}\n     */\n    public abstract getTableFields(): TableField[];\n\n    /**\n     * Return table values to be displayed in a table rows\n     * @returns {TableRowValues[]}\n     */\n    public abstract getTableRows(): any[];\n\n    /**\n     * Filter table rows according to filtering options\n     * @param {TableRowValues[]} values\n     * @param {TableFilteringOptions} filterBy\n     * @returns {TableRowValues[]}\n     */\n    public filter(values: any[], filter: TableFilteringOptions): any[] {\n        if (filter.filteringType === 'show') {\n            return values;\n        }\n\n        if (filter.fieldName === 'expiration') {\n            return values.filter(({ expiration }) => expiration !== 'expired');\n        }\n\n        if (filter.fieldName === 'expired') {\n            return values.filter((value) => 'expired' in value && value.expired);\n        }\n\n        throw new Error(`Sorting by '${filter.fieldName}' field is not yet implemented`);\n    }\n\n    /**\n     * Sorts array values according to sorting options\n     * @param {TableRowValues[]} valuesToSort\n     * @param {TableSortingOptions} sortBy\n     * @returns {TableRowValues[]}\n     */\n    public sort(valuesToSort: any[], options: TableSortingOptions): any[] {\n        const values = [...valuesToSort];\n        const sortingMethod = options.direction === 'asc' ? 'sort' : 'reverse';\n        if (!values.length) {\n            return values;\n        }\n\n        // - use sample to identify fields type\n        const sampleValue = [...values][0][options.fieldName];\n\n        if (sampleValue === undefined) {\n            return values;\n        }\n\n        // - sorting method depends on type\n        if ('string' === typeof sampleValue) {\n            return [...values][sortingMethod]((a, b) => {\n                return a[options.fieldName]\n                    .toLowerCase()\n                    .localeCompare(b[options.fieldName].toLowerCase(), navigator.languages[0] || navigator.language, {\n                        numeric: true,\n                        ignorePunctuation: true,\n                    });\n            });\n        } else if ('boolean' === typeof sampleValue) {\n            return [...values][sortingMethod]((a, b) => {\n                return a[options.fieldName] === b[options.fieldName] ? 0 : a[options.fieldName] ? -1 : 1;\n            });\n        } else if ('number' === typeof sampleValue) {\n            return values[sortingMethod]((a, b) => {\n                if (!b[options.fieldName] || !a[options.fieldName]) {\n                    return 1;\n                }\n                return b[options.fieldName] - a[options.fieldName];\n            });\n        }\n\n        throw new Error(`sorting the data type ${typeof sampleValue} is not supported`);\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormTransferTransaction/FormTransferTransactionTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormTransferTransaction/FormTransferTransactionTs.ts","mtime":1611927227667},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormTransferTransaction/FormTransferTransactionTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020-present NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n    Address,\n    EncryptedMessage,\n    Message,\n    Mosaic,\n    MosaicId,\n    NamespaceId,\n    PlainMessage,\n    RawUInt64,\n    Transaction,\n    TransferTransaction,\n    UInt64,\n    Account,\n    PublicAccount,\n} from 'symbol-sdk';\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// internal dependencies\nimport { Formatters } from '@/core/utils/Formatters';\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\nimport { AddressValidator, AliasValidator } from '@/core/validation/validators';\nimport { MosaicInputsManager } from './MosaicInputsManager';\nimport { ITransactionEntry } from '@/views/pages/dashboard/invoice/DashboardInvoicePageTs';\n// child components\nimport { ValidationObserver } from 'vee-validate';\n// @ts-ignore\nimport AmountInput from '@/components/AmountInput/AmountInput.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport MessageInput from '@/components/MessageInput/MessageInput.vue';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n// @ts-ignore\nimport MosaicAttachmentInput from '@/components/MosaicAttachmentInput/MosaicAttachmentInput.vue';\n// @ts-ignore\nimport MosaicSelector from '@/components/MosaicSelector/MosaicSelector.vue';\n// @ts-ignore\nimport RecipientInput from '@/components/RecipientInput/RecipientInput.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport ModalTransactionUriImport from '@/views/modals/ModalTransactionUriImport/ModalTransactionUriImport.vue';\n// @ts-ignore\nimport TransactionUriDisplay from '@/components/TransactionUri/TransactionUriDisplay/TransactionUriDisplay.vue';\n// @ts-ignore\nimport ProtectedPrivateKeyDisplay from '@/components/ProtectedPrivateKeyDisplay/ProtectedPrivateKeyDisplay.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\n\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\nimport { MosaicService } from '@/services/MosaicService';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { FilterHelpers } from '@/core/utils/FilterHelpers';\nimport { TransactionCommand } from '@/services/TransactionCommand';\nimport { feesConfig } from '@/config';\nimport { NotificationType } from '@/core/utils/NotificationType';\n\nexport interface MosaicAttachment {\n    mosaicHex: string;\n    amount: number; // Relative amount\n    id?: MosaicId;\n    name?: string;\n    uid?: number;\n}\n\n@Component({\n    components: {\n        AmountInput,\n        FormWrapper,\n        MessageInput,\n        ModalTransactionConfirmation,\n        MosaicAttachmentInput,\n        MosaicSelector,\n        RecipientInput,\n        SignerSelector,\n        ValidationObserver,\n        MaxFeeAndSubmit,\n        FormRow,\n        ModalTransactionUriImport,\n        TransactionUriDisplay,\n        ProtectedPrivateKeyDisplay,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            currentHeight: 'network/currentHeight',\n            balanceMosaics: 'mosaic/balanceMosaics',\n            currentRecipient: 'account/currentRecipient',\n        }),\n    },\n})\nexport class FormTransferTransactionTs extends FormTransactionBase {\n    @Prop({\n        default: null,\n    })\n    recipient: Address;\n\n    @Prop({\n        default: null,\n    })\n    message: Message;\n\n    @Prop({\n        default: false,\n    })\n    hideSubmit: boolean;\n\n    @Prop({\n        default: false,\n    })\n    hideSigner: boolean;\n\n    @Prop({\n        default: false,\n    })\n    showTransactionActions: boolean;\n\n    @Prop({\n        default: () => ({}),\n    })\n    value: any;\n\n    @Prop({\n        default: '',\n    })\n    title: string;\n\n    @Prop({\n        default: false,\n    })\n    isAggregate: boolean;\n\n    /// end-region component properties\n\n    /**\n     * Formatters helpers\n     * @var {Formatters}\n     */\n    public formatters = Formatters;\n\n    /**\n     * Form items\n     * @var {any}\n     */\n    public formItems = {\n        signerAddress: '',\n        attachedMosaics: [],\n        recipientRaw: '',\n        recipient: null,\n        selectedMosaicHex: '',\n        relativeAmount: 0,\n        messagePlain: '',\n        encryptMessage: false,\n        maxFee: 0,\n        mosaics: [],\n        signerPublicKey: '',\n    };\n\n    public currentHeight: number;\n\n    protected mosaicInputsManager;\n\n    private balanceMosaics: MosaicModel[];\n\n    /**\n     * Whether ModalTransactionUriImport is visible\n     */\n    private isImportTransactionUriModalVisible = false;\n\n    /**\n     * Transaction imported via transaction URI\n     */\n    private importedTransaction: Transaction;\n\n    /**\n     * Holds the just in time transactions\n     */\n    public transactions: TransferTransaction[] = [];\n\n    /**\n     * Calculated recommended fee based on the txs size\n     */\n    private calculatedRecommendedFee: number = 0;\n\n    /**\n     * Calculated highest fee based on the txs size\n     */\n    private calculatedHighestFee: number = 0;\n\n    /**\n     * Current recipient account info\n     */\n    private currentRecipient: PublicAccount;\n\n    private encyptedMessage: Message;\n\n    private showUnlockAccountModal = false;\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        // - reset attached mosaics\n        this.formItems.attachedMosaics = [];\n\n        // - set default form values\n        this.formItems.signerAddress = this.selectedSigner ? this.selectedSigner.address.plain() : this.currentAccount.address;\n        this.formItems.selectedMosaicHex = this.networkMosaic.toHex();\n        // default currentAccount Address to recipientRaw\n        if (this.$route.path.indexOf('invoice') > -1) {\n            this.formItems.recipientRaw = this.currentAccount.address || '';\n            this.onChangeRecipient();\n        } else {\n            this.formItems.recipientRaw = !!this.recipient ? this.recipient.plain() : '';\n        }\n        this.formItems.recipient = !!this.recipient ? this.recipient : null;\n\n        const currentMosaics = this.currentMosaicList();\n\n        const attachedMosaics: MosaicAttachment[] = [\n            {\n                id: new MosaicId(this.networkCurrency.mosaicIdHex),\n                mosaicHex: this.networkCurrency.mosaicIdHex,\n                name: this.networkCurrency.namespaceIdFullname,\n                amount: 0,\n                uid: Math.floor(Math.random() * 10e6), // used to index dynamic inputs\n            },\n        ];\n\n        this.formItems.messagePlain = this.message ? Formatters.hexToUtf8(this.message.payload) : '';\n        this.formItems.encryptMessage = false;\n        this.encyptedMessage = null;\n        this.showUnlockAccountModal = false;\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n        // - initialize mosaics input manager\n        this.mosaicInputsManager = MosaicInputsManager.initialize(currentMosaics);\n\n        // transaction details passed via router\n        if (this.$route.params.transaction || this.importedTransaction) {\n            // @ts-ignore\n            this.setTransactions([!!this.importedTransaction ? this.importedTransaction : this.$route.params.transaction]);\n            Vue.nextTick(() => {\n                this.formItems.attachedMosaics.forEach((attachedMosaic) => {\n                    this.mosaicInputsManager.setSlot(attachedMosaic.mosaicHex, attachedMosaic.uid);\n                });\n            });\n            this.onChangeRecipient();\n        } else {\n            // - set attachedMosaics and allocate slots\n            Vue.nextTick().then(async () => {\n                await attachedMosaics.forEach((attachedMosaic, index) => {\n                    this.mosaicInputsManager.setSlot(attachedMosaic.mosaicHex, attachedMosaic.uid);\n                    Vue.set(this.formItems.attachedMosaics, index, attachedMosaic);\n                });\n            });\n        }\n        this.triggerChange();\n    }\n\n    /**\n     * Returns the mosaic list of the current account or current signer\n     * depending on the multisig situation\n     * @protected\n     * @returns\n     */\n    protected currentMosaicList(): MosaicModel[] {\n        // filter out expired mosaics\n        return this.balanceMosaics.filter((mosaicInfo) => {\n            // calculate expiration\n            const expiration = MosaicService.getExpiration(\n                mosaicInfo,\n                this.currentHeight,\n                this.networkConfiguration.blockGenerationTargetTime,\n            );\n            // skip if mosaic is expired\n            return expiration !== 'expired';\n        });\n    }\n\n    /**\n     * Getter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @return {TransferTransaction[]}\n     */\n    protected getTransactions(): TransferTransaction[] {\n        const mosaicsInfo = this.$store.getters['mosaic/mosaics'] as MosaicModel[];\n        const mosaics = this.formItems.attachedMosaics\n            .filter(({ uid }) => uid) // filter out null values\n            .map(\n                (spec: MosaicAttachment): Mosaic => {\n                    const info = mosaicsInfo.find((i) => i.mosaicIdHex === spec.mosaicHex);\n                    const div = info ? info.divisibility : 0;\n                    // - format amount to absolute\n                    return new Mosaic(new MosaicId(RawUInt64.fromHex(spec.mosaicHex)), UInt64.fromUint(spec.amount * Math.pow(10, div)));\n                },\n            );\n        return [\n            TransferTransaction.create(\n                this.createDeadline(),\n                this.instantiatedRecipient,\n                mosaics.length ? mosaics : [],\n                this.formItems.encryptMessage ? this.encyptedMessage : PlainMessage.create(this.formItems.messagePlain || ''),\n                this.networkType,\n                UInt64.fromUint(this.formItems.maxFee),\n            ),\n        ];\n    }\n\n    /**\n     * Setter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @param {TransferTransaction[]} transactions\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions(transactions: TransferTransaction[]) {\n        // - this form creates only 1 transaction\n        const transaction = transactions.shift();\n\n        // - populate recipient\n        this.formItems.recipientRaw =\n            transaction.recipientAddress instanceof NamespaceId\n                ? transaction.recipientAddress.fullName\n                : transaction.recipientAddress.plain();\n\n        // - populate attached mosaics\n        this.formItems.attachedMosaics = this.mosaicsToAttachments(transaction.mosaics);\n\n        // - populate message\n        this.formItems.messagePlain = transaction.message.payload;\n\n        // - populate maxFee\n        this.formItems.maxFee = transaction.maxFee.compact();\n    }\n\n    /// region computed properties getter/setter\n    /**\n     * Recipient used in the transaction\n     * @readonly\n     * @protected\n     * @type {(Address | NamespaceId)}\n     */\n    protected get instantiatedRecipient(): Address | NamespaceId {\n        const { recipientRaw } = this.formItems;\n        if (AddressValidator.validate(recipientRaw)) {\n            return Address.createFromRawAddress(recipientRaw);\n        } else if (AliasValidator.validate(recipientRaw)) {\n            return new NamespaceId(recipientRaw);\n        } else {\n            return null;\n        }\n    }\n\n    protected get hasAccountUnlockModal(): boolean {\n        return this.showUnlockAccountModal;\n    }\n\n    protected set hasAccountUnlockModal(f: boolean) {\n        this.showUnlockAccountModal = f;\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Hook called when the child component MosaicAttachmentDisplay triggers\n     * the event 'delete'\n     * @return {void}\n     */\n    public onDeleteMosaic(id: MosaicId) {\n        const updatedAttachedMosaics = [...this.formItems.attachedMosaics].filter(({ mosaicHex }) => mosaicHex !== id.toHex());\n\n        // fixes reactivity on attachedMosaics (observer resolution)\n        Vue.set(this.formItems, 'attachedMosaics', updatedAttachedMosaics);\n    }\n\n    /**\n     * Hook called when the child component ButtonAdd triggers\n     * the event 'click'\n     * @return {void}\n     */\n    protected onMosaicInputChange(payload: { mosaicAttachment: MosaicAttachment; inputIndex: number }): void {\n        const { mosaicAttachment, inputIndex } = payload;\n\n        // set slot\n        this.mosaicInputsManager.setSlot(mosaicAttachment.mosaicHex, inputIndex);\n\n        // update formItems\n        const newAttachedMosaics = [...this.formItems.attachedMosaics];\n        const indexToUpdate = newAttachedMosaics.findIndex(({ uid }) => uid == inputIndex);\n        newAttachedMosaics[indexToUpdate] = mosaicAttachment;\n        Vue.set(this.formItems, 'attachedMosaics', newAttachedMosaics);\n        this.triggerChange();\n    }\n\n    /**\n     * Handle deletion of a mosaic input\n     * @protected\n     * @param {number} inputIndex\n     */\n    protected onDeleteMosaicInput(index: number): void {\n        // unset mosaic input slot\n        this.mosaicInputsManager.unsetSlot(index);\n\n        // update formItems, set input uid to null\n        const indexToUpdate = this.formItems.attachedMosaics.findIndex(({ uid }) => uid == index);\n        Vue.set(this.formItems.attachedMosaics, indexToUpdate, { uid: null });\n        // delete the last one in order to re-render the list\n        this.formItems.attachedMosaics.pop();\n        this.triggerChange();\n    }\n\n    /**\n     * Internal helper to format a {Mosaic} entry into\n     * an array of MosaicAttachment used in this form.\n     * @internal\n     * @param {Mosaic[]} mosaics\n     * @return {MosaicAttachment[]}\n     */\n    private mosaicsToAttachments(mosaics: Mosaic[]): MosaicAttachment[] {\n        return mosaics\n            .map((mosaic) => {\n                const info = this.balanceMosaics.find((m) => mosaic.id.toHex() === m.mosaicIdHex);\n                if (!info) {\n                    return null;\n                }\n                // amount will be converted to RELATIVE\n                return {\n                    id: new MosaicId(info.mosaicIdHex), // XXX resolve mosaicId from namespaceId\n                    mosaicHex: info.mosaicIdHex, // XXX resolve mosaicId from namespaceId\n                    name: info.name,\n                    amount: mosaic.amount.compact() / Math.pow(10, info.divisibility),\n                    uid: Math.floor(Math.random() * 10e6), // used to index dynamic inputs\n                };\n            })\n            .filter((a) => a);\n    }\n\n    /**\n     *  Hook called when adding a new mosaic attachment input\n     * @protected\n     */\n    protected addMosaicAttachmentInput(): void {\n        if (!this.mosaicInputsManager.hasFreeSlots()) {\n            return;\n        }\n\n        // generate id and prepare mosaic for slot\n        const uid = Math.floor(Math.random() * 10e6);\n        const [mosaicToAffectToNewInput] = this.mosaicInputsManager.getMosaicsBySlot(uid);\n\n        // update inputs manager and form items\n        this.mosaicInputsManager.setSlot(mosaicToAffectToNewInput, uid);\n        this.formItems.attachedMosaics.push({\n            mosaicHex: mosaicToAffectToNewInput,\n            amount: 0,\n            uid,\n        });\n\n        this.triggerChange();\n    }\n\n    /**\n     * Handler when changing message\n     */\n    onChangeMessage() {\n        this.triggerChange();\n    }\n\n    /**\n     * Handler when changing recipient\n     */\n    onChangeRecipient() {\n        // filter tags\n        this.formItems.recipientRaw = FilterHelpers.stripFilter(this.formItems.recipientRaw);\n        if (Address.isValidRawAddress(this.formItems.recipientRaw)) {\n            this.$store.dispatch('account/GET_RECIPIENT', Address.createFromRawAddress(this.formItems.recipientRaw)).then(() => {\n                if (!this.currentRecipient?.publicKey || /^0*$/.test(this.currentRecipient.publicKey)) {\n                    this.resetEncryptedMessage();\n                }\n            });\n        } else {\n            this.resetEncryptedMessage();\n        }\n        this.triggerChange();\n    }\n\n    /**\n     * Handler when changing max fee\n     */\n    onChangeMaxFee() {\n        if (this.formItems.recipientRaw && this.formItems.recipientRaw !== '') {\n            this.triggerChange();\n        }\n    }\n\n    triggerChange() {\n        if (Address.isValidRawAddress(this.formItems.recipientRaw)) {\n            this.transactions = this.getTransactions();\n            // avoid error\n            if (this.transactions) {\n                const data: ITransactionEntry[] = [];\n                this.transactions.map((item: TransferTransaction) => {\n                    data.push({\n                        transaction: item,\n                        attachments: this.mosaicsToAttachments(item.mosaics),\n                    });\n                });\n\n                this.$emit('onTransactionsChange', data);\n                this.calculateDynamicFees();\n            }\n        } else {\n            this.transactions = null;\n            this.resetDynamicFees();\n            this.resetEncryptedMessage();\n        }\n    }\n\n    /**\n     * Resetting the form when choosing a multisig signer and changing multisig signer\n     * Is necessary to make the mosaic inputs reactive\n     */\n    @Watch('selectedSigner')\n    onSelectedSignerChange() {\n        this.formItems.signerAddress = this.selectedSigner.address.plain();\n        if (this.isMultisigMode()) {\n            this.resetForm();\n        }\n    }\n\n    /**\n     * ModalTransactionUriImport modal page close event handler\n     */\n    onImportTransactionURIModalClose() {\n        this.isImportTransactionUriModalVisible = false;\n    }\n\n    /**\n     * Import transactionURI complete event handler\n     * @param transaction transaction to be imported\n     */\n    onImportTransaction(transaction: Transaction) {\n        this.importedTransaction = transaction;\n        this.resetForm();\n    }\n\n    /**\n     * Encrypt message checkbox click\n     */\n    onEncryptionChange() {\n        if (this.formItems.encryptMessage) {\n            if (!this.currentRecipient?.publicKey) {\n                this.$store\n                    .dispatch('notification/ADD_ERROR', this.$t(NotificationType.RECIPIENT_PUBLIC_KEY_INVALID_ERROR))\n                    .then(() => (this.formItems.encryptMessage = false));\n            } else if (!this.formItems.messagePlain) {\n                this.$store\n                    .dispatch('notification/ADD_ERROR', this.$t(NotificationType.ENCRYPTED_MESSAGE_EMPTY_ERROR))\n                    .then(() => (this.formItems.encryptMessage = false));\n            } else {\n                this.hasAccountUnlockModal = true;\n            }\n        } else {\n            this.encyptedMessage = null;\n            this.hasAccountUnlockModal = false;\n        }\n\n        this.triggerChange();\n    }\n\n    /**\n     * Hook called when the account has been unlocked\n     * @param {Account} account\n     * @return {boolean}\n     */\n    onAccountUnlocked(account: Account): boolean {\n        this.hasAccountUnlockModal = false;\n        this.encyptedMessage = this.formItems.messagePlain\n            ? EncryptedMessage.create(this.formItems.messagePlain, this.currentRecipient, account.privateKey)\n            : PlainMessage.create('');\n        this.formItems.encryptMessage = true;\n        this.triggerChange();\n        return true;\n    }\n\n    closeAccountUnlockModal() {\n        this.formItems.encryptMessage = false;\n        this.hasAccountUnlockModal = false;\n    }\n\n    /**\n     * Calculates the dynamic fees based on the txs size\n     * */\n    private calculateDynamicFees() {\n        this.createTransactionCommandForFee(feesConfig.median)\n            .getTotalMaxFee()\n            .subscribe((val) => (this.calculatedRecommendedFee = val.compact()));\n\n        this.createTransactionCommandForFee(feesConfig.highest)\n            .getTotalMaxFee()\n            .subscribe((val) => (this.calculatedHighestFee = val.compact()));\n    }\n\n    /**\n     * Creates a TransactionCommand object to calculate total fee\n     * for the given dynamic fee (Recommended/Highest)\n     * @param {number} maxFee\n     */\n    private createTransactionCommandForFee(maxFee: number): TransactionCommand {\n        const transactions = this.getTransactions().map((t) => {\n            //@ts-ignore\n            t.maxFee = UInt64.fromUint(maxFee);\n            return t;\n        });\n\n        const mode = this.getTransactionCommandMode(transactions);\n        return new TransactionCommand(\n            mode,\n            this.selectedSigner,\n            this.currentSignerPublicKey,\n            transactions,\n            this.networkMosaic,\n            this.generationHash,\n            this.epochAdjustment,\n            this.networkType,\n            this.networkConfiguration,\n            this.transactionFees,\n            this.currentSignerMultisigInfo ? this.currentSignerMultisigInfo.minApproval : this.selectedSigner.requiredCosignatures,\n        );\n    }\n\n    /**\n     * Resets calculated dynamic fees\n     */\n    private resetDynamicFees() {\n        this.calculatedRecommendedFee = 0;\n        this.calculatedHighestFee = 0;\n    }\n\n    /**\n     * Reset encrypted message\n     */\n    private resetEncryptedMessage() {\n        this.encyptedMessage = null;\n        this.formItems.encryptMessage = false;\n        this.hasAccountUnlockModal = false;\n        this.$store.dispatch('account/GET_RECIPIENT', null);\n    }\n    /**\n     * emit formItems values to aggregate transaction form to be saved in storage\n     */\n    public emitToAggregate() {\n        if (this.transactions && this.transactions[0]) {\n            this.formItems.mosaics = this.transactions[0].mosaics;\n            this.formItems.signerPublicKey = this.currentSignerPublicKey;\n            this.$emit('txInput', this.formItems);\n        }\n    }\n    mounted() {\n        if (this.isAggregate && this.value) {\n            Object.assign(this.formItems, this.value);\n        }\n    }\n    /**\n     * watch title to change form items on select different transactions\n     */\n    @Watch('title', { immediate: true })\n    onTitleChange() {\n        if (this.isAggregate && this.value) {\n            Object.assign(this.formItems, this.value);\n        }\n    }\n}\n"],"sourceRoot":""}]}
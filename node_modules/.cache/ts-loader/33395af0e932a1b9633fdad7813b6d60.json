{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/pages/profiles/LoginPageTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/pages/profiles/LoginPageTs.ts","mtime":1606213958977},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/pages/profiles/LoginPageTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { mapGetters } from 'vuex';\nimport { Component, Vue } from 'vue-property-decorator';\nimport { NetworkType, Password } from 'symbol-sdk';\nimport VideoBackground from 'vue-responsive-video-background-player';\n\n// internal dependencies\nimport { $eventBus } from '@/events';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { ProfileService } from '@/services/ProfileService';\n// child components\n// @ts-ignore\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport LanguageSelector from '@/components/LanguageSelector/LanguageSelector.vue';\n// configuration\nimport { SettingService } from '@/services/SettingService';\nimport { SettingsModel } from '@/core/database/entities/SettingsModel';\nimport { AccountService } from '@/services/AccountService';\nimport { NetworkTypeHelper } from '@/core/utils/NetworkTypeHelper';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            isAuthenticated: 'profile/isAuthenticated',\n        }),\n    },\n    components: {\n        ErrorTooltip,\n        ValidationProvider,\n        ValidationObserver,\n        LanguageSelector,\n        VideoBackground,\n    },\n})\nexport default class LoginPageTs extends Vue {\n    /**\n     * Display the application version. This is injected in the app when built.\n     */\n    public packageVersion = process.env.PACKAGE_VERSION || '0';\n\n    /**\n     * All known profiles\n     */\n    private profiles: ProfileModel[];\n\n    /**\n     * Profiles indexed by network type\n     */\n    private profilesClassifiedByNetworkType: {\n        networkType: NetworkType;\n        profiles: ProfileModel[];\n    }[];\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {string}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Profiles repository\n     * @var {ProfileService}\n     */\n    public profileService = new ProfileService();\n\n    public accountService = new AccountService();\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Form items\n     */\n    public formItems: any = {\n        currentProfileName: '',\n        password: '',\n        hasHint: false,\n    };\n\n    /**\n     * All known profiles names\n     */\n    protected get profileNames(): string[] {\n        return this.profiles.map(({ profileName }) => profileName);\n    }\n    /**\n     * Hook called when the page is mounted\n     * @return {void}\n     */\n    public created() {\n        // filter out invalid profiles\n        this.profiles = this.profileService.getProfiles().filter((p) => p.accounts.length > 0);\n\n        const reducer = (accumulator: { networkType: NetworkType; profiles: ProfileModel[] }[], currentValue: ProfileModel) => {\n            const currentAccumulator = accumulator.find((a) => a.networkType == currentValue.networkType);\n            if (currentAccumulator) {\n                currentAccumulator.profiles.push(currentValue);\n                return accumulator;\n            } else {\n                return [...accumulator, { networkType: currentValue.networkType, profiles: [currentValue] }];\n            }\n        };\n\n        this.profilesClassifiedByNetworkType = this.profiles.reduce(reducer, []);\n        if (!this.profiles.length) {\n            return;\n        }\n        // accounts available, iterate to first profiles\n        this.formItems.currentProfileName = this.profiles[0].profileName;\n    }\n\n    /**\n     * Getter for network type label\n     * @param {NetworkType} networkType\n     * @return {string}\n     */\n    public getNetworkTypeLabel(networkType: NetworkType): string {\n        return NetworkTypeHelper.getNetworkTypeLabel(networkType);\n    }\n\n    /**\n     * Get profile password hint\n     * XXX should be encrypted with accessSalt.\n     * @return {string}\n     */\n    public getPasswordHint(): string {\n        const profileName = this.formItems.currentProfileName;\n        const profile = this.profileService.getProfileByName(profileName);\n        return (profile && profile.hint) || '';\n    }\n\n    /**\n     * Submit action, validates form and logs in user if valid\n     * @return {void}\n     */\n    public async submit() {\n        if (!this.formItems.currentProfileName.length) {\n            return this.$store.dispatch('notification/ADD_ERROR', NotificationType.PROFILE_NAME_INPUT_ERROR);\n        }\n\n        if (!this.formItems.password.length || this.formItems.password.length < 8) {\n            return this.$store.dispatch('notification/ADD_ERROR', NotificationType.WRONG_PASSWORD_ERROR);\n        }\n\n        // now compare password hashes\n        return this.processLogin();\n    }\n\n    /**\n     * Process login request.\n     * @return {void}\n     */\n    private async processLogin() {\n        try {\n            const currentProfileName = this.formItems.currentProfileName;\n            const profile = this.profileService.getProfileByName(currentProfileName);\n            const settingService = new SettingService();\n\n            // if profile doesn't exist, authentication is not valid\n            if (!profile) {\n                return this.$store.dispatch('notification/ADD_ERROR', 'Invalid login attempt');\n            }\n\n            // profile exists, fetch data\n            const settings: SettingsModel = settingService.getProfileSettings(currentProfileName);\n\n            const knownAccounts: AccountModel[] = this.accountService.getKnownAccounts(profile.accounts);\n            if (knownAccounts.length == 0) {\n                throw new Error('knownAccounts is empty');\n            }\n\n            // use service to generate password hash\n            const passwordHash = ProfileService.getPasswordHash(new Password(this.formItems.password));\n\n            // read profile's password hash and compare\n            if (profile.password !== passwordHash) {\n                return this.$store.dispatch('notification/ADD_ERROR', NotificationType.WRONG_PASSWORD_ERROR);\n            }\n\n            // if profile setup was not finalized, redirect\n            if (!profile.seed && profile.accounts.length == 0) {\n                this.$store.dispatch('profile/SET_CURRENT_PROFILE', profile);\n                this.$store.dispatch('temporary/SET_PASSWORD', this.formItems.password);\n                this.$store.dispatch(\n                    'diagnostic/ADD_WARNING',\n                    'Profile has not setup mnemonic pass phrase, redirecting: ' + currentProfileName,\n                );\n                return this.$router.push({\n                    name: 'profiles.createProfile.generateMnemonic',\n                });\n            }\n\n            // read default account from settings\n            const defaultAccountId = settings.defaultAccount ? settings.defaultAccount : knownAccounts[0].id;\n            if (!defaultAccountId) {\n                throw new Error('defaultAccountId could not be resolved');\n            }\n            const defaultAccount = knownAccounts.find((w) => w.id == defaultAccountId);\n            if (!defaultAccount) {\n                throw new Error(`defaultAccount could not be resolved from id ${defaultAccountId}`);\n            }\n\n            // LOGIN SUCCESS: update app state\n            await this.$store.dispatch('profile/SET_CURRENT_PROFILE', profile);\n            this.$store.dispatch('network/CONNECT');\n            this.$store.dispatch('account/SET_KNOWN_ACCOUNTS', profile.accounts);\n            await this.$store.dispatch('account/SET_CURRENT_ACCOUNT', defaultAccount);\n            this.$store.dispatch('diagnostic/ADD_DEBUG', 'Profile login successful with currentProfileName: ' + currentProfileName);\n            $eventBus.$emit('onLogin', currentProfileName);\n            return this.$router.push({ name: 'dashboard' });\n        } catch (e) {\n            console.log('Unknown error trying to login', JSON.stringify(e));\n            return this.$store.dispatch('notification/ADD_ERROR', `Unknown error trying to login: ${JSON.stringify(e)}`);\n        }\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/pages/profiles/import-profile/ImportProfileTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/pages/profiles/import-profile/ImportProfileTs.ts","mtime":1611927227967},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/pages/profiles/import-profile/ImportProfileTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport { Formatters } from '@/core/utils/Formatters';\nimport { mapGetters } from 'vuex';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\nimport { AccountInfo, Address, MosaicId, RepositoryFactory } from 'symbol-sdk';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { AccountService } from '@/services/AccountService';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            currentMnemonic: 'temporary/mnemonic',\n            networkType: 'network/networkType',\n            networkMosaic: 'mosaic/networkMosaic',\n            networkCurrency: 'mosaic/networkCurrency',\n            currentProfile: 'profile/currentProfile',\n            currentPassword: 'temporary/password',\n            selectedAccounts: 'account/selectedAddressesToInteract',\n        }),\n    },\n})\nexport default class ImportProfileTs extends Vue {\n    /**\n     * Formatting helpers\n     * @protected\n     */\n    protected formatters = Formatters;\n    /**\n     * List of steps\n     * @var {string[]}\n     */\n    public StepBarTitleList = ['enter_profile_details', 'mnemonic_phrase', 'select_accounts', 'finish'];\n\n    /**\n     * Network's currency mosaic id\n     * @see {Store.Mosaic}\n     * @var {MosaicId}\n     */\n    public networkMosaic: MosaicId;\n\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {string}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Temporary stored mnemonic pass phrase\n     * @see {Store.Temporary}\n     * @var {MnemonicPassPhrase}\n     */\n    public currentMnemonic: string;\n\n    /**\n     * Account Service\n     * @var {AccountService}\n     */\n    public accountService: AccountService;\n\n    /**\n     * List of addresses\n     * @var {Address[]}\n     */\n    public addressesList: Address[] = [];\n\n    /**\n     * Balances map\n     * @var {any}\n     */\n    public addressMosaicMap = {};\n\n    /**\n     * Map of selected accounts\n     * @var {number[]}\n     */\n    public selectedAccounts: number[];\n\n    /**\n     * Indicates if account balance and addresses are already fetched\n     */\n    private initialized: boolean = false;\n\n    /**\n     * Hook called when the page is mounted\n     * @return {void}\n     */\n    async mounted() {\n        this.accountService = new AccountService();\n        Vue.nextTick().then(() => {\n            setTimeout(() => this.initAccounts(), 300);\n        });\n\n        await this.$store.dispatch('temporary/initialize');\n    }\n\n    @Watch('selectedAccounts')\n    /**\n     * Fetch account balances and map to address\n     * @return {void}\n     */\n    private async initAccounts() {\n        if (this.initialized) {\n            return;\n        }\n\n        // - generate addresses\n        this.addressesList = this.accountService.getAddressesFromMnemonic(\n            new MnemonicPassPhrase(this.currentMnemonic),\n            this.currentProfile.networkType,\n            10,\n        );\n        const repositoryFactory = this.$store.getters['network/repositoryFactory'] as RepositoryFactory;\n        // fetch accounts info\n        const accountsInfo = await repositoryFactory.createAccountRepository().getAccountsInfo(this.addressesList).toPromise();\n        if (!accountsInfo) {\n            return;\n        }\n        // map balances\n        this.addressMosaicMap = this.mapBalanceByAddress(accountsInfo, this.networkMosaic);\n\n        this.initialized = true;\n    }\n\n    public mapBalanceByAddress(accountsInfo: AccountInfo[], mosaic: MosaicId): Record<string, number> {\n        return accountsInfo\n            .map(({ mosaics, address }) => {\n                // - check balance\n                const hasNetworkMosaic = mosaics.find((mosaicOwned) => mosaicOwned.id.equals(mosaic));\n\n                // - account doesn't hold network mosaic so the balance is zero\n                if (hasNetworkMosaic === undefined) {\n                    return {\n                        address: address.plain(),\n                        balance: 0,\n                    };\n                }\n                // - map balance to address\n                const balance = hasNetworkMosaic.amount.compact();\n                return {\n                    address: address.plain(),\n                    balance: balance,\n                };\n            })\n            .reduce((acc, { address, balance }) => ({ ...acc, [address]: balance }), {});\n    }\n\n    public getCurrentStep(): number {\n        switch (this.$route.name) {\n            default:\n            case 'profiles.importProfile.info':\n                return 0;\n            case 'profiles.importProfile.importMnemonic':\n                return 1;\n            case 'profiles.importProfile.walletSelection':\n                return 2;\n            case 'profiles.importProfile.finalize':\n                return 3;\n        }\n    }\n\n    public getStepClassName(index: number): string {\n        return this.getCurrentStep() == index ? 'active' : this.getCurrentStep() > index ? 'done' : '';\n    }\n\n    /**\n     * Called when clicking on an address to remove it from the selection\n     * @protected\n     * @param {number} pathNumber\n     */\n    protected onRemoveAddress(pathNumber: number): void {\n        this.$store.commit('account/removeFromSelectedAddressesToInteract', pathNumber);\n    }\n}\n"],"sourceRoot":""}]}
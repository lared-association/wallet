{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormTransactionBase/FormTransactionBase.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormTransactionBase/FormTransactionBase.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormTransactionBase/FormTransactionBase.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { MosaicId, MultisigAccountInfo, NetworkType, PublicAccount, Transaction, TransactionFees, Address, Deadline } from 'symbol-sdk';\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { ValidationObserver } from 'vee-validate';\nimport { Signer } from '@/store/Account';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { TransactionCommand, TransactionCommandMode } from '@/services/TransactionCommand';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            generationHash: 'network/generationHash',\n            networkType: 'network/networkType',\n            epochAdjustment: 'network/epochAdjustment',\n            defaultFee: 'app/defaultFee',\n            currentAccount: 'account/currentAccount',\n            selectedSigner: 'account/currentSigner',\n            currentSignerPublicKey: 'account/currentSignerPublicKey',\n            currentSignerAddress: 'account/currentSignerAddress',\n            currentSignerMultisigInfo: 'account/currentSignerMultisigInfo',\n            currentAccountMultisigInfo: 'account/currentAccountMultisigInfo',\n            isCosignatoryMode: 'account/isCosignatoryMode',\n            networkMosaic: 'mosaic/networkMosaic',\n            networkCurrency: 'mosaic/networkCurrency',\n            signers: 'account/signers',\n            networkConfiguration: 'network/networkConfiguration',\n            transactionFees: 'network/transactionFees',\n        }),\n    },\n})\nexport class FormTransactionBase extends Vue {\n    /// region store getters\n    /**\n     * Network generation hash\n     */\n    public generationHash: string;\n\n    /**\n     * Network type\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * The network configuration epochAdjustment.\n     */\n    public epochAdjustment: number;\n\n    /**\n     * Default fee setting\n     */\n    public defaultFee: number;\n\n    /**\n     * Currently active account\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Currently active signer\n     */\n    public selectedSigner: Signer;\n\n    /**\n     * Currently active signer's public key\n     */\n    public currentSignerPublicKey: string;\n\n    /**\n     * Currently active signer's address\n     */\n    public currentSignerAddress: Address;\n\n    /**\n     * Current account multisig info\n     * @type {MultisigAccountInfo}\n     */\n    public currentAccountMultisigInfo: MultisigAccountInfo;\n\n    /**\n     * Current signer multisig info\n     * @var {MultisigAccountInfo}\n     */\n    public currentSignerMultisigInfo: MultisigAccountInfo;\n\n    /**\n     * Whether the form is in cosignatory mode (cosigner selected)\n     * @var {boolean}\n     */\n    public isCosignatoryMode: boolean;\n\n    /**\n     * Networks currency mosaic\n     * @var {MosaicId}\n     */\n    public networkMosaic: MosaicId;\n\n    /**\n     * Currently staged transactions\n     * @var {Transaction[]}\n     */\n    public stagedTransactions: Transaction[];\n\n    /**\n     * Public key of the current signer\n     * @var {any}\n     */\n    public currentSigner: PublicAccount;\n\n    public signers: Signer[];\n\n    public networkCurrency: NetworkCurrencyModel;\n\n    public networkConfiguration: NetworkConfigurationModel;\n\n    public command: TransactionCommand;\n\n    protected transactionFees: TransactionFees;\n\n    /**\n     * Type the ValidationObserver refs\n     * @type {{\n     *     observer: InstanceType<typeof ValidationObserver>\n     *   }}\n     */\n    public $refs!: {\n        observer: InstanceType<typeof ValidationObserver>;\n    };\n\n    /// end-region store getters\n\n    /// region property watches\n    @Watch('currentAccount')\n    onCurrentAccountChange() {\n        this.resetForm(); // @TODO: probably not the best way\n        this.resetFormValidation();\n    }\n\n    /// end-region property watches\n\n    /**\n     * Whether the form is currently awaiting a signature\n     * @var {boolean}\n     */\n    public isAwaitingSignature: boolean = false;\n\n    /**\n     * Hook called when the component is mounted\n     * @return {void}\n     */\n    public async created() {\n        this.$store.dispatch('network/LOAD_TRANSACTION_FEES');\n        this.resetForm();\n    }\n\n    /**\n     * it creates the deadlines for the transactions.\n     */\n    protected createDeadline(): Deadline {\n        return Deadline.create(this.epochAdjustment);\n    }\n\n    /**\n     * Hook called when the component is being destroyed (before)\n     * @return {void}\n     */\n    public beforeDestroy() {\n        // reset the selected signer if it is not the current account\n        if (!this.currentAccount) {\n            return;\n        }\n\n        if (!this.selectedSigner.address.equals(Address.createFromRawAddress(this.currentAccount.address))) {\n            this.$store.dispatch('account/SET_CURRENT_SIGNER', {\n                address: Address.createFromRawAddress(this.currentAccount.address),\n            });\n        }\n    }\n\n    /**\n     * Current signer's multisig accounts\n     * @readonly\n     * @type {{publicKey: string, label: string}[]}\n     */\n    get multisigAccounts(): Signer[] {\n        const signers = this.signers;\n        // if \"self\" is multisig, also return self\n        if (this.isMultisigAccount) {\n            return signers;\n        }\n\n        // all signers except current account\n        return [...signers].splice(1);\n    }\n\n    get hasConfirmationModal(): boolean {\n        return this.isAwaitingSignature;\n    }\n\n    set hasConfirmationModal(f: boolean) {\n        this.isAwaitingSignature = f;\n    }\n\n    get isMultisigAccount(): boolean {\n        return this.currentAccountMultisigInfo && this.currentAccountMultisigInfo.isMultisig();\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Reset the form with properties\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected resetForm() {\n        throw new Error(\"Method 'resetForm()' must be overloaded in derivate components.\");\n    }\n    /**\n     * Getter for whether forms should aggregate transactions in BONDED\n     * @return {boolean}\n     */\n    protected isMultisigMode(): boolean {\n        return this.isCosignatoryMode === true;\n    }\n\n    /**\n     * Getter for transactions that will be staged\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected getTransactions(): Transaction[] {\n        throw new Error(\"Getter method 'getTransactions()' must be overloaded in derivate components.\");\n    }\n\n    /**\n     * Setter for transactions that will be staged\n     * @param {Transaction[]} transactions\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions(transactions: Transaction[]) {\n        //TODO do we need these methods?\n        const error = `setTransactions() must be overloaded. Call got ${transactions.length} transactions.`;\n        throw new Error(error);\n    }\n\n    /**\n     * Hook called when the confirmation modal must open\n     * @see {FormTransactionBase}\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected onShowConfirmationModal() {\n        this.hasConfirmationModal = true;\n    }\n\n    /**\n     * Hook called when a signer is selected.\n     * @param {string} publicKey\n     */\n    public async onChangeSigner(address: string) {\n        // this.currentSigner = PublicAccount.createFromPublicKey(publicKey, this.networkType)\n        await this.$store.dispatch('account/SET_CURRENT_SIGNER', { address: Address.createFromRawAddress(address) });\n    }\n\n    protected getTransactionCommandMode(transactions: Transaction[]): TransactionCommandMode {\n        if (this.isMultisigMode()) {\n            return TransactionCommandMode.MULTISIGN;\n        }\n        if (transactions.length > 1) {\n            return TransactionCommandMode.AGGREGATE;\n        } else {\n            return TransactionCommandMode.SIMPLE;\n        }\n    }\n\n    public createTransactionCommand(): TransactionCommand {\n        const transactions = this.getTransactions();\n        const mode = this.getTransactionCommandMode(transactions);\n        return new TransactionCommand(\n            mode,\n            this.selectedSigner,\n            this.currentSignerPublicKey,\n            transactions,\n            this.networkMosaic,\n            this.generationHash,\n            this.networkType,\n            this.epochAdjustment,\n            this.networkConfiguration,\n            this.transactionFees,\n            this.currentSignerMultisigInfo ? this.currentSignerMultisigInfo.minApproval : this.selectedSigner.requiredCosignatures,\n        );\n    }\n\n    /**\n     * Process form input\n     * @return {void}\n     */\n    public onSubmit() {\n        // - open signature modal\n        this.command = this.createTransactionCommand();\n        this.onShowConfirmationModal();\n    }\n\n    /**\n     * Hook called when the child component ModalTransactionConfirmation triggers\n     * the event 'success'\n     */\n    public onConfirmationSuccess() {\n        // if the form was in multisig, set the signer to be the main account\n        // this triggers resetForm in the @Watch('currentAccount') hook\n        if (this.isMultisigMode()) {\n            this.$store.dispatch('account/SET_CURRENT_ACCOUNT', this.currentAccount);\n        }\n        this.resetForm();\n        this.hasConfirmationModal = false;\n        this.$emit('on-confirmation-success');\n        // Reset form validation\n        this.resetFormValidation();\n    }\n\n    /**\n     * Reset form validation\n     * @private\n     */\n    private resetFormValidation(): void {\n        this.$refs && this.$refs.observer && this.$refs.observer.reset();\n    }\n\n    /**\n     * Hook called when the child component ModalTransactionConfirmation triggers\n     * the event 'error'\n     * @return {void}\n     */\n    public onConfirmationError(error: string) {\n        this.$store.dispatch('notification/ADD_ERROR', error);\n    }\n\n    /**\n     * Hook called when the child component ModalTransactionConfirmation triggers\n     * the event 'close'\n     * @return {void}\n     */\n    public onConfirmationCancel() {\n        this.hasConfirmationModal = false;\n    }\n}\n"],"sourceRoot":""}]}
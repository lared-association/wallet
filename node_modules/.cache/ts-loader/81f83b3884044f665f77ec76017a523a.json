{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/AccountSelectorField/AccountSelectorFieldTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/AccountSelectorField/AccountSelectorFieldTs.ts","mtime":1606213958953},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7CiAgZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgewogICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsKICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7CiAgICBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsKCiAgICB0cnkgewogICAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwKICAgICAgICByZXN1bHQ7CgogICAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7CiAgICAgIHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7CgogICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsKICB9Owp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgQWNjb3VudFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL0FjY291bnRTZXJ2aWNlJzsKCnZhciBBY2NvdW50U2VsZWN0b3JGaWVsZFRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVnVlKSB7CiAgX2luaGVyaXRzKEFjY291bnRTZWxlY3RvckZpZWxkVHMsIF9WdWUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEFjY291bnRTZWxlY3RvckZpZWxkVHMpOwoKICBmdW5jdGlvbiBBY2NvdW50U2VsZWN0b3JGaWVsZFRzKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY2NvdW50U2VsZWN0b3JGaWVsZFRzKTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgLyoqCiAgICAgKiBBY2NvdW50cyByZXBvc2l0b3J5CiAgICAgKiBAdmFyIHtBY2NvdW50U2VydmljZX0KICAgICAqLwoKICAgIF90aGlzLmFjY291bnRTZXJ2aWNlID0gbmV3IEFjY291bnRTZXJ2aWNlKCk7IC8vLyBlbmQtcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgoKICAgIHJldHVybiBfdGhpczsKICB9IC8vLyByZWdpb24gY29tcHV0ZWQgcHJvcGVydGllcyBnZXR0ZXIvc2V0dGVyCgoKICBfY3JlYXRlQ2xhc3MoQWNjb3VudFNlbGVjdG9yRmllbGRUcywgW3sKICAgIGtleTogInRydW5jYXRlIiwKCiAgICAvKioKICAgICAqIFRydW5jYXRlcyB0aGUgYWNjb3VudCBuYW1lIGlmIGl0IGlzIHRvbyBsb25nCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJ1bmNhdGUoc3RyKSB7CiAgICAgIHZhciBtYXhTdHJpbmdMZW5ndGggPSAxNTsKCiAgICAgIGlmIChzdHIubGVuZ3RoIDw9IG1heFN0cmluZ0xlbmd0aCkgewogICAgICAgIHJldHVybiBzdHI7CiAgICAgIH0KCiAgICAgIHJldHVybiAiIi5jb25jYXQoc3RyLnN1YnN0cmluZygwLCA5KSwgIi4uLiIpLmNvbmNhdChzdHIuc3Vic3RyaW5nKHN0ci5sZW5ndGggLSAzKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3VycmVudEFjY291bnRJZGVudGlmaWVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBpZiAodGhpcy52YWx1ZSkgewogICAgICAgIHJldHVybiB0aGlzLnZhbHVlOwogICAgICB9CgogICAgICBpZiAodGhpcy5jdXJyZW50QWNjb3VudCkgewogICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRBY2NvdW50LmlkOwogICAgICB9IC8vIGZhbGxiYWNrIHZhbHVlCgoKICAgICAgcmV0dXJuICcnOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGlkKSB7CiAgICAgIGlmICghaWQgfHwgIWlkLmxlbmd0aCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBpZCk7CiAgICAgIHZhciBhY2NvdW50ID0gdGhpcy5hY2NvdW50U2VydmljZS5nZXRBY2NvdW50KGlkKTsKCiAgICAgIGlmICghYWNjb3VudCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImN1cnJlbnRBY2NvdW50cyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMua25vd25BY2NvdW50czsKICAgIH0KICB9XSk7CgogIHJldHVybiBBY2NvdW50U2VsZWN0b3JGaWVsZFRzOwp9KFZ1ZSk7CgpfX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IG51bGwKfSldLCBBY2NvdW50U2VsZWN0b3JGaWVsZFRzLnByb3RvdHlwZSwgInZhbHVlIiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogZmFsc2UKfSldLCBBY2NvdW50U2VsZWN0b3JGaWVsZFRzLnByb3RvdHlwZSwgImRlZmF1bHRGb3JtU3R5bGUiLCB2b2lkIDApOwoKX19kZWNvcmF0ZShbUHJvcCh7CiAgImRlZmF1bHQiOiB0cnVlCn0pXSwgQWNjb3VudFNlbGVjdG9yRmllbGRUcy5wcm90b3R5cGUsICJzaG93SWNvbiIsIHZvaWQgMCk7CgpBY2NvdW50U2VsZWN0b3JGaWVsZFRzID0gX19kZWNvcmF0ZShbQ29tcG9uZW50KHsKICBjb21wdXRlZDogT2JqZWN0LmFzc2lnbih7fSwgbWFwR2V0dGVycyh7CiAgICBjdXJyZW50QWNjb3VudDogJ2FjY291bnQvY3VycmVudEFjY291bnQnLAogICAga25vd25BY2NvdW50czogJ2FjY291bnQva25vd25BY2NvdW50cycKICB9KSkKfSldLCBBY2NvdW50U2VsZWN0b3JGaWVsZFRzKTsKZXhwb3J0IHsgQWNjb3VudFNlbGVjdG9yRmllbGRUcyB9Ow=="},{"version":3,"sources":["/home/hero/lared-wallet/src/components/AccountSelectorField/AccountSelectorFieldTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAeA,SAAS,SAAT,EAAoB,IAApB,EAA0B,GAA1B,QAAqC,wBAArC;AACA,SAAS,UAAT,QAA2B,MAA3B;AAGA,SAAS,cAAT,QAA+B,2BAA/B;;AAUA,IAAa,sBAAb;AAAA;;AAAA;;AAAA,oCAAA;AAAA;;AAAA;;;AA4BI;;;;;AAIgB,UAAA,cAAA,GAAiC,IAAI,cAAJ,EAAjC,CAhCpB,CA+EI;;AA/EJ;AAgFC,GAhFD,CAkCI;;;AAlCJ;AAAA;;AAiEI;;;;;;AAjEJ,6BAuEuB,GAvEvB,EAuEkC;AAC1B,UAAM,eAAe,GAAG,EAAxB;;AACA,UAAI,GAAG,CAAC,MAAJ,IAAc,eAAlB,EAAmC;AAC/B,eAAO,GAAP;AACH;;AACD,uBAAU,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAV,gBAAmC,GAAG,CAAC,SAAJ,CAAc,GAAG,CAAC,MAAJ,GAAa,CAA3B,CAAnC;AACH;AA7EL;AAAA;AAAA,wBAmCuC;AAC/B,UAAI,KAAK,KAAT,EAAgB;AACZ,eAAO,KAAK,KAAZ;AACH;;AAED,UAAI,KAAK,cAAT,EAAyB;AACrB,eAAO,KAAK,cAAL,CAAoB,EAA3B;AACH,OAP8B,CAS/B;;;AACA,aAAO,EAAP;AACH,KA9CL;AAAA,sBAgDwC,EAhDxC,EAgDkD;AAC1C,UAAI,CAAC,EAAD,IAAO,CAAC,EAAE,CAAC,MAAf,EAAuB;AACnB;AACH;;AAED,WAAK,KAAL,CAAW,OAAX,EAAoB,EAApB;AAEA,UAAM,OAAO,GAAG,KAAK,cAAL,CAAoB,UAApB,CAA+B,EAA/B,CAAhB;;AACA,UAAI,CAAC,OAAL,EAAc;AACV;AACH;AACJ;AA3DL;AAAA;AAAA,wBA6D8B;AACtB,aAAO,KAAK,aAAZ;AACH;AA/DL;;AAAA;AAAA,EAA4C,GAA5C,CAAA;;AAII,UAAA,CAAA,CAHC,IAAI,CAAC;AACF,aAAS;AADP,CAAD,CAGL,CAAA,E,gCAAA,E,OAAA,E,KAAc,CAAd,CAAA;;AAKA,UAAA,CAAA,CAHC,IAAI,CAAC;AACF,aAAS;AADP,CAAD,CAGL,CAAA,E,gCAAA,E,kBAAA,E,KAA0B,CAA1B,CAAA;;AAKA,UAAA,CAAA,CAHC,IAAI,CAAC;AACF,aAAS;AADP,CAAD,CAGL,CAAA,E,gCAAA,E,UAAA,E,KAAkB,CAAlB,CAAA;;AAdS,sBAAsB,GAAA,UAAA,CAAA,CARlC,SAAS,CAAC;AACP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,cAAc,EAAE,wBADN;AAEV,IAAA,aAAa,EAAE;AAFL,GAAD,CADT;AADD,CAAD,CAQyB,CAAA,EAAtB,sBAAsB,CAAtB;SAAA,sB","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { AccountService } from '@/services/AccountService';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n            knownAccounts: 'account/knownAccounts',\n        }),\n    },\n})\nexport class AccountSelectorFieldTs extends Vue {\n    @Prop({\n        default: null,\n    })\n    value: string;\n\n    @Prop({\n        default: false,\n    })\n    defaultFormStyle: boolean;\n\n    @Prop({\n        default: true,\n    })\n    showIcon: boolean;\n\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Known accounts\n     */\n    public knownAccounts: AccountModel[];\n\n    /**\n     * Accounts repository\n     * @var {AccountService}\n     */\n    public readonly accountService: AccountService = new AccountService();\n\n    /// region computed properties getter/setter\n    public get currentAccountIdentifier(): string {\n        if (this.value) {\n            return this.value;\n        }\n\n        if (this.currentAccount) {\n            return this.currentAccount.id;\n        }\n\n        // fallback value\n        return '';\n    }\n\n    public set currentAccountIdentifier(id: string) {\n        if (!id || !id.length) {\n            return;\n        }\n\n        this.$emit('input', id);\n\n        const account = this.accountService.getAccount(id);\n        if (!account) {\n            return;\n        }\n    }\n\n    public get currentAccounts(): AccountModel[] {\n        return this.knownAccounts;\n    }\n\n    /**\n     * Truncates the account name if it is too long\n     * @protected\n     * @param {string} str\n     * @returns {string}\n     */\n    protected truncate(str: string): string {\n        const maxStringLength = 15;\n        if (str.length <= maxStringLength) {\n            return str;\n        }\n        return `${str.substring(0, 9)}...${str.substring(str.length - 3)}`;\n    }\n\n    /// end-region computed properties getter/setter\n}\n"],"sourceRoot":""}]}
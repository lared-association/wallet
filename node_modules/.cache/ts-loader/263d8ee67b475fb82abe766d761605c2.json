{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/MnemonicVerification/MnemonicVerificationTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/MnemonicVerification/MnemonicVerificationTs.ts","mtime":1606213958957},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/components/MnemonicVerification/MnemonicVerificationTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport draggable from 'vuedraggable';\n// internal dependencies\nimport { NotificationType } from '@/core/utils/NotificationType';\n\n/**\n * Emits: success, error, canceled\n */\n@Component({\n    components: { draggable },\n})\nexport class MnemonicVerificationTs extends Vue {\n    @Prop({ default: [] }) words: string[];\n\n    /**\n     * Randomized words\n     * @var {Record<number, string>}\n     */\n    public shuffledWords: Record<number, string> = {};\n\n    /**\n     * Randomized words indexes\n     * @var {number[]}\n     */\n    public shuffledWordsIndexes: number[] = [];\n\n    /**\n     * Selected words indexes\n     * @var {number[]}\n     */\n    public selectedWordIndexes: number[] = [];\n\n    /**\n     * Hook called when the component is created\n     * @return {void}\n     */\n    public created() {\n        const shuffledWordsArray: string[] = [...this.words].sort((a, b) => a.localeCompare(b));\n        this.shuffledWords = shuffledWordsArray.reduce((acc, word, index) => ({ ...acc, ...{ [index]: word } }), {});\n        this.shuffledWordsIndexes = [...Array(shuffledWordsArray.length).keys()];\n    }\n\n    /**\n     * Toggle a word presence in the confirmed words\n     * @param {string} word\n     * @return {void}\n     */\n    public onWordClicked(index: number): void {\n        if (this.selectedWordIndexes.includes(index)) {\n            this.removeWord(index);\n            return;\n        }\n\n        this.selectedWordIndexes.push(index);\n    }\n\n    /**\n     * Add confirmed word\n     * @param {string} word\n     * @return {string[]}\n     */\n    public removeWord(index: number): void {\n        this.selectedWordIndexes = [...this.selectedWordIndexes].filter((sel) => sel !== index);\n    }\n\n    /**\n     * Process verification of mnemonic\n     * @return {boolean}\n     */\n    public processVerification(): boolean {\n        const origin = this.words.join(' ');\n        const rebuilt = this.selectedWordIndexes.map((i) => this.shuffledWords[i]).join(' ');\n\n        // - origin words list does not match\n        if (origin !== rebuilt) {\n            const errorMsg =\n                this.selectedWordIndexes.length < 1\n                    ? NotificationType.PLEASE_ENTER_MNEMONIC_INFO\n                    : NotificationType.MNEMONIC_INCONSISTENCY_ERROR;\n            this.$store.dispatch('notification/ADD_WARNING', errorMsg);\n            this.$emit('error', errorMsg);\n            return false;\n        }\n\n        this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.SUCCESS);\n        this.$emit('success');\n        return true;\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MetadataService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MetadataService.ts","mtime":1611927227376},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qKgogKiBDb3B5cmlnaHQgMjAyMCBORU0gKGh0dHBzOi8vbmVtLmlvKQogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICoKICovCmltcG9ydCB7IE1ldGFkYXRhVHlwZSwgVUludDY0LCBLZXlHZW5lcmF0b3IsIE1vc2FpY0lkLCBOYW1lc3BhY2VJZCwgTWV0YWRhdGFUcmFuc2FjdGlvblNlcnZpY2UsIENyeXB0byB9IGZyb20gJ3N5bWJvbC1zZGsnOwppbXBvcnQgeyBmcm9tLCBvZiB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7CmltcG9ydCB7IE1ldGFkYXRhTW9kZWwgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2UvZW50aXRpZXMvTWV0YWRhdGFNb2RlbCc7CmltcG9ydCB7IE1ldGFkYXRhTW9kZWxTdG9yYWdlIH0gZnJvbSAnQC9jb3JlL2RhdGFiYXNlL3N0b3JhZ2UvTWV0YWRhdGFNb2RlbFN0b3JhZ2UnOwovKioKICogVGhlIHNlcnZpY2UgaW4gY2hhcmdlIG9mIGxvYWRpbmcgYW5kIGNhY2hpbmcgYW55dGhpbmcgcmVsYXRlZCB0byBNZXRhZGF0YSBmcm9tIFJlc3QuCiAqIFRoZSBjYWNoZSBpcyBkb25lIGJ5IHN0b3JpbmcgdGhlIHBheWxvYWRzIGluIFNpbXBsZU9iamVjdFN0b3JhZ2UuCiAqLwoKZXhwb3J0IHZhciBNZXRhZGF0YVNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1ldGFkYXRhU2VydmljZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXRhZGF0YVNlcnZpY2UpOwoKICAgIC8qKgogICAgICogVGhlIG1ldGFkYXRhIGluZm9ybWF0aW9uIGxvY2FsIGNhY2hlLgogICAgICovCiAgICB0aGlzLm1ldGFkYXRhTW9kZWxTdG9yYWdlID0gTWV0YWRhdGFNb2RlbFN0b3JhZ2UuSU5TVEFOQ0U7CiAgfQogIC8qKgogICAqIFRoaXMgbWV0aG9kIGxvYWRzIGFuZCBjYWNoZXMgdGhlIG1ldGFkYXRhIGluZm9ybWF0aW9uIGZvciB0aGUgZ2l2ZW4gYWNjb3VudHMuCiAgICogVGhlIHJldHVybmVkIE9ic2VydmFibGUgd2lsbCBhbm5vdW5jZSB0aGUgY2FjaGVkIGluZm9ybWF0aW9uIGZpcnN0LCB0aGVuIHRoZSByZXN0IHJldHVybmVkCiAgICogaW5mb3JtYXRpb24gKGlmIHBvc3NpYmxlKS4KICAgKgogICAqIEBwYXJhbSByZXBvc2l0b3J5RmFjdG9yeSB0aGUgcmVwb3NpdG9yeSBmYWN0b3J5CiAgICogQHBhcmFtIGdlbmVyYXRpb25IYXNoIHRoZSBjdXJyZW50IG5ldHdvcmsgZ2VuZXJhdGlvbiBoYXNoLgogICAqIEBwYXJhbSBhZGRyZXNzIHRoZSBjdXJyZW50IGFkZHJlc3MuCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoTWV0YWRhdGFTZXJ2aWNlLCBbewogICAga2V5OiAiZ2V0TWV0YWRhdGFMaXN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUxpc3QocmVwb3NpdG9yeUZhY3RvcnksIGdlbmVyYXRpb25IYXNoLCBhZGRyZXNzKSB7CiAgICAgIGlmICghYWRkcmVzcykgewogICAgICAgIHJldHVybiBvZihbXSk7CiAgICAgIH0KCiAgICAgIHZhciBtZXRhZGF0YVJlcG9zaXRvcnkgPSByZXBvc2l0b3J5RmFjdG9yeS5jcmVhdGVNZXRhZGF0YVJlcG9zaXRvcnkoKTsgLy8gc2VhcmNoIHdoZXJlIHVzZXIgaXMgdGFyZ2V0CgogICAgICB2YXIgdGFyZ2V0U2VhcmNoQ3JpdGVyaWEgPSB7CiAgICAgICAgdGFyZ2V0QWRkcmVzczogYWRkcmVzcwogICAgICB9OwogICAgICB2YXIgdW5pcXVNZXRhQXJyYXkgPSBbXTsKICAgICAgbWV0YWRhdGFSZXBvc2l0b3J5LnNlYXJjaCh0YXJnZXRTZWFyY2hDcml0ZXJpYSkucGlwZShtYXAoZnVuY3Rpb24gKG1ldGFkYXRhTGlzdFBhZ2UpIHsKICAgICAgICByZXR1cm4gbWV0YWRhdGFMaXN0UGFnZS5kYXRhLm1hcChmdW5jdGlvbiAobWV0YWRhdGEpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWV0YWRhdGFNb2RlbChtZXRhZGF0YSk7CiAgICAgICAgfSk7CiAgICAgIH0pKS5zdWJzY3JpYmUoZnVuY3Rpb24gKHQpIHsKICAgICAgICB0Lm1hcChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIGlmICghdW5pcXVNZXRhQXJyYXkuZmluZChmdW5jdGlvbiAobykgewogICAgICAgICAgICByZXR1cm4gby5tZXRhZGF0YUlkID09PSB2YWx1ZS5tZXRhZGF0YUlkOwogICAgICAgICAgfSkpIHsKICAgICAgICAgICAgdW5pcXVNZXRhQXJyYXkucHVzaCh2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOyAvLyBzZWFyY2ggd2hlcmUgdXNlciBpcyBzZW5kZXIgb2YgbWV0YWRhdGEKCiAgICAgIHZhciBzb3VyY2VTZWFyY2hDcml0ZXJpYSA9IHsKICAgICAgICBzb3VyY2VBZGRyZXNzOiBhZGRyZXNzCiAgICAgIH07CiAgICAgIG1ldGFkYXRhUmVwb3NpdG9yeS5zZWFyY2goc291cmNlU2VhcmNoQ3JpdGVyaWEpLnBpcGUobWFwKGZ1bmN0aW9uIChtZXRhZGF0YUxpc3RQYWdlKSB7CiAgICAgICAgcmV0dXJuIG1ldGFkYXRhTGlzdFBhZ2UuZGF0YS5tYXAoZnVuY3Rpb24gKG1ldGFkYXRhKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1ldGFkYXRhTW9kZWwobWV0YWRhdGEpOwogICAgICAgIH0pOwogICAgICB9KSkuc3Vic2NyaWJlKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdC5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICBpZiAoIXVuaXF1TWV0YUFycmF5LmZpbmQoZnVuY3Rpb24gKG8pIHsKICAgICAgICAgICAgcmV0dXJuIG8ubWV0YWRhdGFJZCA9PT0gdmFsdWUubWV0YWRhdGFJZDsKICAgICAgICAgIH0pKSB7CiAgICAgICAgICAgIHVuaXF1TWV0YUFycmF5LnB1c2godmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgcmV0dXJuIGZyb20oW3VuaXF1TWV0YUFycmF5XSk7CiAgICB9CiAgICAvKioKICAgICAqIGdldCBtZXRhZGF0YSBjcmVhdGlvbiBvYnNlcnZhYmxlCiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxUcmFuc2FjdGlvbj59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAibWV0YWRhdGFUcmFuc2FjdGlvbk9ic2VydmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtZXRhZGF0YVRyYW5zYWN0aW9uT2JzZXJ2ZXIocmVwb3NpdG9yeUZhY3RvcnksIGRlYWRsaW5lLCBuZXR3b3JrVHlwZSwgc291cmNlQWRkcmVzcywgdGFyZ2V0QWRkcmVzcywgTWV0YWRhdGFLZXksIHZhbHVlLCB0YXJnZXRJZCwgbWV0YWRhdGFUeXBlLCBtYXhGZWUpIHsKICAgICAgdmFyIHNjb3BlZE1ldGFkYXRhS2V5ID0gTWV0YWRhdGFLZXkgPyBVSW50NjQuZnJvbUhleChNZXRhZGF0YUtleSkgOiBLZXlHZW5lcmF0b3IuZ2VuZXJhdGVVSW50NjRLZXkoQ3J5cHRvLnJhbmRvbUJ5dGVzKDgpKTsKICAgICAgdmFyIG1ldGFkYXRhUmVwb3NpdG9yeSA9IHJlcG9zaXRvcnlGYWN0b3J5LmNyZWF0ZU1ldGFkYXRhUmVwb3NpdG9yeSgpOwogICAgICB2YXIgbWV0YWRhdGFUcmFuc2FjdGlvblNlcnZpY2UgPSBuZXcgTWV0YWRhdGFUcmFuc2FjdGlvblNlcnZpY2UobWV0YWRhdGFSZXBvc2l0b3J5KTsKICAgICAgdmFyIG1ldGFkYXRhT2JzZXJ2YWJsZSA9IG51bGw7CgogICAgICBpZiAobWV0YWRhdGFUeXBlID09PSBNZXRhZGF0YVR5cGUuQWNjb3VudCkgewogICAgICAgIG1ldGFkYXRhT2JzZXJ2YWJsZSA9IG1ldGFkYXRhVHJhbnNhY3Rpb25TZXJ2aWNlLmNyZWF0ZUFjY291bnRNZXRhZGF0YVRyYW5zYWN0aW9uKGRlYWRsaW5lLCBuZXR3b3JrVHlwZSwgdGFyZ2V0QWRkcmVzcywgc2NvcGVkTWV0YWRhdGFLZXksIHZhbHVlLCBzb3VyY2VBZGRyZXNzLCBtYXhGZWUpOwogICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhVHlwZSA9PT0gTWV0YWRhdGFUeXBlLk1vc2FpYykgewogICAgICAgIHZhciBtb3NhaWNJZCA9IG5ldyBNb3NhaWNJZCh0YXJnZXRJZCk7CiAgICAgICAgbWV0YWRhdGFPYnNlcnZhYmxlID0gbWV0YWRhdGFUcmFuc2FjdGlvblNlcnZpY2UuY3JlYXRlTW9zYWljTWV0YWRhdGFUcmFuc2FjdGlvbihkZWFkbGluZSwgbmV0d29ya1R5cGUsIHRhcmdldEFkZHJlc3MsIG1vc2FpY0lkLCBzY29wZWRNZXRhZGF0YUtleSwgdmFsdWUsIHNvdXJjZUFkZHJlc3MsIG1heEZlZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIG5hbWVzcGFjZUlkID0gbmV3IE5hbWVzcGFjZUlkKHRhcmdldElkKTsKICAgICAgICBtZXRhZGF0YU9ic2VydmFibGUgPSBtZXRhZGF0YVRyYW5zYWN0aW9uU2VydmljZS5jcmVhdGVOYW1lc3BhY2VNZXRhZGF0YVRyYW5zYWN0aW9uKGRlYWRsaW5lLCBuZXR3b3JrVHlwZSwgdGFyZ2V0QWRkcmVzcywgbmFtZXNwYWNlSWQsIHNjb3BlZE1ldGFkYXRhS2V5LCB2YWx1ZSwgc291cmNlQWRkcmVzcywgbWF4RmVlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG1ldGFkYXRhT2JzZXJ2YWJsZTsKICAgIH0KICAgIC8qKgogICAgICogZ2V0IG1ldGFkYXRhIGxpc3QgYnkgdGFyZ2V0IGlkCiAgICAgKiBAcGFyYW0gbWV0YWRhdGFMaXN0CiAgICAgKiBAcGFyYW0gdGFyZ2V0SWQgTW9zYWljSWQgfCBOYW1lc3BhY2VJZAogICAgICovCgogIH1dLCBbewogICAga2V5OiAiZ2V0TW9zYWljTWV0YWRhdGFCeVRhcmdldElkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNb3NhaWNNZXRhZGF0YUJ5VGFyZ2V0SWQobWV0YWRhdGFMaXN0LCB0YXJnZXRJZCkgewogICAgICByZXR1cm4gbWV0YWRhdGFMaXN0ICYmIG1ldGFkYXRhTGlzdC5maWx0ZXIoZnVuY3Rpb24gKG1ldGFkYXRhTW9kZWwpIHsKICAgICAgICByZXR1cm4gbWV0YWRhdGFNb2RlbC50YXJnZXRJZCA9PT0gdGFyZ2V0SWQ7CiAgICAgIH0pIHx8IFtdOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE1ldGFkYXRhU2VydmljZTsKfSgpOw=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MetadataService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n    Address,\n    MetadataType,\n    RepositoryFactory,\n    Transaction,\n    NetworkType,\n    Deadline,\n    UInt64,\n    KeyGenerator,\n    MosaicId,\n    NamespaceId,\n    MetadataTransactionService,\n    MetadataSearchCriteria,\n    Crypto,\n} from 'symbol-sdk';\nimport { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\nimport { MetadataModelStorage } from '@/core/database/storage/MetadataModelStorage';\n\n/**\n * The service in charge of loading and caching anything related to Metadata from Rest.\n * The cache is done by storing the payloads in SimpleObjectStorage.\n */\n\nexport class MetadataService {\n    /**\n     * The metadata information local cache.\n     */\n    private readonly metadataModelStorage = MetadataModelStorage.INSTANCE;\n\n    /**\n     * This method loads and caches the metadata information for the given accounts.\n     * The returned Observable will announce the cached information first, then the rest returned\n     * information (if possible).\n     *\n     * @param repositoryFactory the repository factory\n     * @param generationHash the current network generation hash.\n     * @param address the current address.\n     */\n    public getMetadataList(repositoryFactory: RepositoryFactory, generationHash: string, address: Address): Observable<MetadataModel[]> {\n        if (!address) {\n            return of([]);\n        }\n        const metadataRepository = repositoryFactory.createMetadataRepository();\n\n        // search where user is target\n        const targetSearchCriteria: MetadataSearchCriteria = { targetAddress: address };\n        const uniquMetaArray: MetadataModel[] = [];\n        metadataRepository\n            .search(targetSearchCriteria)\n            .pipe(map((metadataListPage) => metadataListPage.data.map((metadata) => new MetadataModel(metadata))))\n            .subscribe((t) => {\n                t.map((value) => {\n                    if (!uniquMetaArray.find((o) => o.metadataId === value.metadataId)) {\n                        uniquMetaArray.push(value);\n                    }\n                });\n            });\n\n        // search where user is sender of metadata\n        const sourceSearchCriteria: MetadataSearchCriteria = { sourceAddress: address };\n        metadataRepository\n            .search(sourceSearchCriteria)\n            .pipe(map((metadataListPage) => metadataListPage.data.map((metadata) => new MetadataModel(metadata))))\n            .subscribe((t) => {\n                t.map((value) => {\n                    if (!uniquMetaArray.find((o) => o.metadataId === value.metadataId)) {\n                        uniquMetaArray.push(value);\n                    }\n                });\n            });\n        return from([uniquMetaArray]);\n    }\n\n    /**\n     * get metadata creation observable\n     * @returns {Observable<Transaction>}\n     */\n    public metadataTransactionObserver(\n        repositoryFactory: RepositoryFactory,\n        deadline: Deadline,\n        networkType: NetworkType,\n        sourceAddress: Address,\n        targetAddress: Address,\n        MetadataKey: string,\n        value: string,\n        targetId: string,\n        metadataType: MetadataType,\n        maxFee: UInt64,\n    ): Observable<Transaction> {\n        const scopedMetadataKey = MetadataKey ? UInt64.fromHex(MetadataKey) : KeyGenerator.generateUInt64Key(Crypto.randomBytes(8));\n\n        const metadataRepository = repositoryFactory.createMetadataRepository();\n        const metadataTransactionService = new MetadataTransactionService(metadataRepository);\n\n        let metadataObservable: Observable<Transaction> = null;\n\n        if (metadataType === MetadataType.Account) {\n            metadataObservable = metadataTransactionService.createAccountMetadataTransaction(\n                deadline,\n                networkType,\n                targetAddress,\n                scopedMetadataKey,\n                value,\n                sourceAddress,\n                maxFee,\n            );\n        } else if (metadataType === MetadataType.Mosaic) {\n            const mosaicId = new MosaicId(targetId);\n            metadataObservable = metadataTransactionService.createMosaicMetadataTransaction(\n                deadline,\n                networkType,\n                targetAddress,\n                mosaicId,\n                scopedMetadataKey,\n                value,\n                sourceAddress,\n                maxFee,\n            );\n        } else {\n            const namespaceId = new NamespaceId(targetId);\n            metadataObservable = metadataTransactionService.createNamespaceMetadataTransaction(\n                deadline,\n                networkType,\n                targetAddress,\n                namespaceId,\n                scopedMetadataKey,\n                value,\n                sourceAddress,\n                maxFee,\n            );\n        }\n\n        return metadataObservable;\n    }\n\n    /**\n     * get metadata list by target id\n     * @param metadataList\n     * @param targetId MosaicId | NamespaceId\n     */\n    public static getMosaicMetadataByTargetId(metadataList: MetadataModel[], targetId: string) {\n        return (metadataList && metadataList.filter((metadataModel) => metadataModel.targetId === targetId)) || [];\n    }\n}\n"],"sourceRoot":""}]}
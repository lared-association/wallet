{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Transaction.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Transaction.ts","mtime":1611927227440},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Transaction.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n//external dependencies\nimport {\n    Address,\n    AggregateTransaction,\n    CosignatureSignedTransaction,\n    RepositoryFactory,\n    Transaction,\n    TransactionType,\n    PublicAccount,\n    AggregateTransactionCosignature,\n    TransactionGroup,\n    Page,\n    TransactionStatus,\n    Order,\n} from 'symbol-sdk';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as _ from 'lodash';\n\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { TransactionFilterService } from '@/services/TransactionFilterService';\n\nconst Lock = AwaitLock.create();\n\nexport enum TransactionGroupState {\n    confirmed = 'confirmed',\n    unconfirmed = 'unconfirmed',\n    partial = 'partial',\n    all = 'all',\n}\n\nexport enum TransactionFilterOptions {\n    confirmed = 'isConfirmedSelected',\n    unconfirmed = 'isUnconfirmedSelected',\n    partial = 'isPartialSelected',\n    sent = 'isSentSelected',\n    received = 'isReceivedSelected',\n}\n\nexport class FilterOption {\n    constructor(public option: TransactionFilterOptions = TransactionFilterOptions.confirmed, public value: boolean = false) {}\n}\n\nexport class TransactionFilterOptionsState {\n    public isConfirmedSelected: boolean = false;\n    public isUnconfirmedSelected: boolean = false;\n    public isPartialSelected: boolean = false;\n    public isSentSelected: boolean = false;\n    public isReceivedSelected: boolean = false;\n\n    /**\n     * Returns false when all from any group or nothing selected.\n     */\n    public get isFilterShouldBeApplied(): boolean {\n        if (this.checkAllUnselected()) {\n            return false;\n        }\n\n        const isAllByConfirmedStatusSelected = this.isConfirmedSelected && this.isUnconfirmedSelected && this.isPartialSelected;\n\n        return !isAllByConfirmedStatusSelected;\n    }\n\n    /**\n     * Sets selected key-value pair.\n     * @param filterOption one of existing filter options and value\n     */\n    public setFilterOption(filterOption: FilterOption): void {\n        this[filterOption.option] = filterOption.value;\n    }\n\n    /**\n     * Checks if all property falsy.\n     */\n    private checkAllUnselected(): boolean {\n        return Object.keys(this).every((key) => !this[key]);\n    }\n}\n\n/**\n * Helper to format transaction group in name of state variable.\n *\n * @internal\n * @param {string} group\n * @return {string} One of 'confirmedTransactions', 'unconfirmedTransactions' or\n *   'partialTransactions'\n */\nconst transactionGroupToStateVariable = (group: TransactionGroupState): string => {\n    return group + 'Transactions';\n};\n\nconst transactionComparator = (t1, t2) => {\n    // - unconfirmed/partial sorted by index\n    return t1.transactionInfo.index - t2.transactionInfo.index;\n};\nconst confirmedTransactionComparator = (t1, t2) => {\n    const info1 = t1.transactionInfo;\n    const info2 = t2.transactionInfo;\n    // - confirmed sorted by height then index\n    const diffHeight = info2.height.compact() - info1.height.compact();\n    const diffIndex = info1.index - info2.index;\n    return diffHeight !== 0 ? diffHeight : diffIndex;\n};\n\nfunction conditionalSort<T>(array: T[] | undefined, comparator: (a: T, b: T) => number): T[] | undefined {\n    if (!array) {\n        return array;\n    }\n    return array.sort(comparator);\n}\n\nexport interface PageInfo {\n    pageNumber: number;\n    isLastPage: boolean;\n}\nexport interface TransactionState {\n    initialized: boolean;\n    isFetchingTransactions: boolean;\n    transactions: Transaction[];\n    filteredTransactions: Transaction[];\n    confirmedTransactions: Transaction[];\n    unconfirmedTransactions: Transaction[];\n    partialTransactions: Transaction[];\n    filterOptions: TransactionFilterOptionsState;\n    currentConfirmedPage: PageInfo;\n}\n\nconst transactionState: TransactionState = {\n    initialized: false,\n    isFetchingTransactions: false,\n    transactions: [],\n    filteredTransactions: [],\n    confirmedTransactions: [],\n    unconfirmedTransactions: [],\n    partialTransactions: [],\n    filterOptions: new TransactionFilterOptionsState(),\n    currentConfirmedPage: { pageNumber: 1, isLastPage: false },\n};\nexport default {\n    namespaced: true,\n    state: transactionState,\n    getters: {\n        getInitialized: (state: TransactionState) => state.initialized,\n        isFetchingTransactions: (state: TransactionState) => state.isFetchingTransactions,\n        transactions: (state: TransactionState) => state.transactions,\n        filteredTransactions: (state: TransactionState) => {\n            return state.filteredTransactions;\n        },\n        filterOptions: (state: TransactionState) => state.filterOptions,\n        currentConfirmedPage: (state: TransactionState) => state.currentConfirmedPage,\n        confirmedTransactions: (state: TransactionState) => state.confirmedTransactions,\n        unconfirmedTransactions: (state: TransactionState) => state.unconfirmedTransactions,\n        partialTransactions: (state: TransactionState) => state.partialTransactions,\n    },\n    mutations: {\n        setInitialized: (state: TransactionState, initialized: boolean) => {\n            state.initialized = initialized;\n        },\n        isFetchingTransactions: (state: TransactionState, isFetchingTransactions: boolean) => {\n            state.isFetchingTransactions = isFetchingTransactions;\n        },\n        confirmedTransactions: (\n            state: TransactionState,\n            { transactions, refresh, pageInfo }: { transactions: Transaction[]; refresh: boolean; pageInfo: PageInfo },\n        ) => {\n            // if it's a refresh request then refresh the list, else concat the new items to the list\n            if (refresh) {\n                state.confirmedTransactions = conditionalSort(transactions, confirmedTransactionComparator);\n            } else {\n                state.confirmedTransactions = conditionalSort(\n                    state.confirmedTransactions.concat(transactions),\n                    confirmedTransactionComparator,\n                );\n            }\n            state.currentConfirmedPage = pageInfo;\n        },\n        unconfirmedTransactions: (\n            state: TransactionState,\n            { transactions }: { transactions: Transaction[]; refresh: boolean; pageInfo: PageInfo },\n        ) => {\n            state.unconfirmedTransactions = conditionalSort(transactions, transactionComparator);\n        },\n        partialTransactions: (\n            state: TransactionState,\n            { transactions }: { transactions: Transaction[]; refresh: boolean; pageInfo: PageInfo },\n        ) => {\n            state.partialTransactions = conditionalSort(transactions, transactionComparator);\n        },\n        setAllTransactions: (state: TransactionState) => {\n            state.transactions = [...state.partialTransactions, ...state.unconfirmedTransactions, ...state.confirmedTransactions];\n        },\n        filterTransactions: (\n            state: TransactionState,\n            {\n                filterOption,\n                currentSignerAddress,\n                shouldFilterOptionChange = true,\n            }: { filterOption?: FilterOption; currentSignerAddress: string; shouldFilterOptionChange: boolean },\n        ) => {\n            if (shouldFilterOptionChange) {\n                if (filterOption) {\n                    state.filterOptions.setFilterOption(filterOption);\n                } else {\n                    state.filterOptions = new TransactionFilterOptionsState();\n                }\n            }\n\n            state.filteredTransactions = TransactionFilterService.filter(state, currentSignerAddress);\n        },\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                // Placeholder for initialization if necessary.\n                commit('setInitialized', true);\n            };\n            // aquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n\n        async uninitialize({ commit, getters, dispatch }) {\n            const callback = async () => {\n                await dispatch('RESET_TRANSACTIONS');\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        LOAD_TRANSACTIONS(\n            { commit, rootGetters },\n            { pageSize, pageNumber }: { pageSize: number; pageNumber: number } = {\n                pageSize: 20,\n                pageNumber: 1,\n            },\n        ) {\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const transactionRepository = repositoryFactory.createTransactionRepository();\n            const subscribeTransactions = (\n                group: TransactionGroupState,\n                transactionCall: Observable<Page<Transaction>>,\n            ): Observable<Transaction[]> => {\n                const attributeName = transactionGroupToStateVariable(group);\n                return transactionCall.pipe(\n                    map((transactionsPage) => {\n                        commit(attributeName, {\n                            transactions: transactionsPage.data || [],\n                            refresh: transactionsPage.pageNumber === 1,\n                            pageInfo: {\n                                pageNumber: transactionsPage.pageNumber,\n                                isLastPage: transactionsPage.isLastPage,\n                            },\n                        });\n                        return transactionsPage.data;\n                    }),\n                );\n            };\n\n            const subscriptions: Observable<Transaction[]>[] = [];\n            commit('isFetchingTransactions', true);\n\n            subscriptions.push(\n                subscribeTransactions(\n                    TransactionGroupState.confirmed,\n                    transactionRepository.search({\n                        group: TransactionGroup.Confirmed,\n                        address: currentSignerAddress,\n                        pageSize,\n                        pageNumber,\n                        order: Order.Desc,\n                    }),\n                ),\n            );\n\n            if (pageNumber === 1) {\n                subscriptions.push(\n                    subscribeTransactions(\n                        TransactionGroupState.unconfirmed,\n                        transactionRepository.search({\n                            group: TransactionGroup.Unconfirmed,\n                            address: currentSignerAddress,\n                            pageSize: 100,\n                            pageNumber: 1, // not paginating\n                            order: Order.Desc,\n                        }),\n                    ),\n                );\n\n                subscriptions.push(\n                    subscribeTransactions(\n                        TransactionGroupState.partial,\n                        transactionRepository.search({\n                            group: TransactionGroup.Partial,\n                            address: currentSignerAddress,\n                            pageSize: 100,\n                            pageNumber: 1, // not paginating\n                            order: Order.Desc,\n                        }),\n                    ),\n                );\n            }\n\n            combineLatest(subscriptions).subscribe({\n                complete: () => {\n                    commit('setAllTransactions');\n                    commit('filterTransactions', {\n                        filterOption: null,\n                        currentSignerAddress: currentSignerAddress.plain(),\n                        shouldFilterOptionChange: false,\n                    });\n                    commit('isFetchingTransactions', false);\n                },\n            });\n        },\n\n        LOAD_TRANSACTION_DETAILS(\n            { rootGetters },\n            { group, transactionHash }: { group: TransactionGroupState; transactionHash: string },\n        ): Promise<Transaction | AggregateTransaction> {\n            if (!group) {\n                throw Error(\"Missing mandatory field 'group' for action transaction/LOAD_TRANSACTION_DETAILS.\");\n            }\n\n            if (!transactionHash) {\n                throw Error(\"Missing mandatory field 'transactionHash' for action transaction/LOAD_TRANSACTION_DETAILS.\");\n            }\n\n            // prepare\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const transactionRepository = repositoryFactory.createTransactionRepository();\n\n            let sdkGroup = TransactionGroup.Confirmed;\n            if (![TransactionGroupState.all, TransactionGroupState.confirmed].includes(group)) {\n                sdkGroup = group === TransactionGroupState.partial ? TransactionGroup.Partial : TransactionGroup.Unconfirmed;\n            }\n\n            // fetch transaction details\n            return transactionRepository.getTransaction(transactionHash, sdkGroup).toPromise();\n        },\n\n        FETCH_TRANSACTION_STATUS(\n            { rootGetters },\n            { transactionHash }: { transactionHash: string },\n        ): Promise<Transaction | TransactionStatus> {\n            if (!transactionHash) {\n                throw Error(\"Missing mandatory field 'transactionHash' for action transaction/FETCH_TRANSACTION_STATUS.\");\n            }\n\n            // prepare\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const transactionStatusRepository = repositoryFactory.createTransactionStatusRepository();\n\n            // fetch transaction status\n            return transactionStatusRepository.getTransactionStatus(transactionHash).toPromise();\n        },\n\n        SIGNER_CHANGED({ dispatch }) {\n            dispatch('LOAD_TRANSACTIONS');\n        },\n\n        RESET_TRANSACTIONS({ commit }) {\n            Object.keys(TransactionGroupState).forEach((group: TransactionGroupState) => {\n                if (group !== TransactionGroupState.all) {\n                    commit(transactionGroupToStateVariable(group), {\n                        transactions: [],\n                        pageInfo: { pageNumber: 1, isLastPage: false },\n                    });\n                }\n            });\n        },\n\n        ADD_TRANSACTION(\n            { commit, getters, rootGetters },\n            { group, transaction }: { group: TransactionGroupState; transaction: Transaction },\n        ) {\n            if (!group) {\n                throw Error(\"Missing mandatory field 'group' for action transaction/ADD_TRANSACTION.\");\n            }\n\n            if (!transaction) {\n                throw Error(\"Missing mandatory field 'transaction' for action transaction/ADD_TRANSACTION.\");\n            }\n            // format transactionAttribute to store variable name\n            const transactionAttribute = transactionGroupToStateVariable(group);\n\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n\n            // register transaction\n            const transactions = getters[transactionAttribute] || [];\n            if (!transactions.find((t) => t.transactionInfo.hash === transaction.transactionInfo.hash)) {\n                // update state\n                commit(transactionAttribute, {\n                    transactions: [transaction, ...transactions],\n                    refresh: true,\n                    pageInfo: getters['currentConfirmedPage'],\n                });\n\n                commit('setAllTransactions');\n                commit('filterTransactions', {\n                    filterOption: null,\n                    currentSignerAddress: currentSignerAddress.plain(),\n                    shouldFilterOptionChange: false,\n                });\n            }\n        },\n\n        REMOVE_TRANSACTION(\n            { commit, getters, rootGetters },\n            { group, transactionHash }: { group: TransactionGroupState; transactionHash: string },\n        ) {\n            if (!group) {\n                throw Error(\"Missing mandatory field 'group' for action transaction/REMOVE_TRANSACTION.\");\n            }\n\n            if (!transactionHash) {\n                throw Error(\"Missing mandatory field 'transactionHash' for action transaction/REMOVE_TRANSACTION.\");\n            }\n            // format transactionAttribute to store variable name\n            const transactionAttribute = transactionGroupToStateVariable(group);\n\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n\n            // register transaction\n            const transactions = getters[transactionAttribute] || [];\n            commit(transactionAttribute, {\n                transactions: transactions.filter((t) => t.transactionInfo.hash !== transactionHash),\n                refresh: true,\n                pageInfo: getters['currentConfirmedPage'],\n            });\n\n            commit('setAllTransactions');\n            commit('filterTransactions', {\n                filterOption: null,\n                currentSignerAddress: currentSignerAddress.plain(),\n                shouldFilterOptionChange: false,\n            });\n        },\n\n        async ON_NEW_TRANSACTION({ dispatch }, transaction: Transaction) {\n            if (!transaction) {\n                return;\n            }\n\n            // extract transaction types from the transaction\n            const transactionTypes: TransactionType[] = _.uniq(\n                transaction instanceof AggregateTransaction ? transaction.innerTransactions.map(({ type }) => type) : [transaction.type],\n            );\n\n            await dispatch('LOAD_TRANSACTIONS');\n\n            // reload metadata list first so that mosaics and namespaces can be updated\n            await dispatch('metadata/LOAD_METADATA_LIST', {}, { root: true });\n\n            // add actions to the dispatcher according to the transaction types\n            if (\n                [TransactionType.NAMESPACE_REGISTRATION, TransactionType.MOSAIC_ALIAS, TransactionType.ADDRESS_ALIAS].some((a) =>\n                    transactionTypes.some((b) => b === a),\n                )\n            ) {\n                dispatch('namespace/LOAD_NAMESPACES', {}, { root: true });\n            }\n\n            // Reloading Balances\n            await dispatch('account/LOAD_ACCOUNT_INFO', {}, { root: true });\n            dispatch('mosaic/LOAD_MOSAICS', {}, { root: true });\n\n            await dispatch('restriction/LOAD_ACCOUNT_RESTRICTIONS', {}, { root: true });\n        },\n        /// end-region scoped actions\n\n        ADD_COSIGNATURE({ commit, getters, rootGetters }, transaction: CosignatureSignedTransaction) {\n            if (!transaction || !transaction.parentHash) {\n                throw Error(\"Missing mandatory field 'parentHash' for action transaction/ADD_COSIGNATURE.\");\n            }\n            const transactionAttribute = transactionGroupToStateVariable(TransactionGroupState.partial);\n            const transactions: AggregateTransaction[] = getters[transactionAttribute] || [];\n\n            // return if no transactions\n            if (!transactions.length) {\n                return;\n            }\n\n            const index = transactions.findIndex((t) => t.transactionInfo.hash === transaction.parentHash);\n\n            // partial tx unknown, @TODO: handle this case (fetch partials)\n            if (index === -1) {\n                return;\n            }\n\n            // convert CosignatureSignedTransaction to AggregateTransactionCosignature\n            const generationHash = rootGetters['network/generationHash'];\n            const cosigner = PublicAccount.createFromPublicKey(transaction.signerPublicKey, generationHash);\n            const cosignature = new AggregateTransactionCosignature(transaction.signature, cosigner);\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n\n            // update the partial transaction cosignatures\n            transactions[index] = transactions[index].addCosignatures([cosignature]);\n\n            commit('partialTransactions', transactions);\n            commit('setAllTransactions');\n            commit('filterTransactions', {\n                filterOption: null,\n                currentSignerAddress: currentSignerAddress.plain(),\n                shouldFilterOptionChange: false,\n            });\n        },\n    },\n};\n"],"sourceRoot":""}]}
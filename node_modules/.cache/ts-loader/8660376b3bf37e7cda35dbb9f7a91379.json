{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/Harvesting.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/Harvesting.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/store/Harvesting.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n    AccountInfo,\n    Address,\n    BalanceChangeReceipt,\n    Order,\n    ReceiptPaginationStreamer,\n    ReceiptType,\n    RepositoryFactory,\n    RepositoryFactoryHttp,\n    UInt64,\n} from 'symbol-sdk';\nimport Vue from 'vue';\nimport { map, reduce } from 'rxjs/operators';\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { PageInfo } from '@/store/Transaction';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { URLHelpers } from '@/core/utils/URLHelpers';\n\nconst Lock = AwaitLock.create();\n\nexport type HarvestedBlock = {\n    blockNo: UInt64;\n    fee: UInt64;\n};\n\nexport type HarvestedBlockStats = {\n    totalBlockCount: number;\n    totalFeesEarned: UInt64;\n};\n\nexport enum HarvestingStatus {\n    ACTIVE = 'ACTIVE',\n    INACTIVE = 'INACTIVE',\n    KEYS_LINKED = 'KEYS_LINKED',\n    INPROGRESS_ACTIVATION = 'INPROGRESS_ACTIVATION',\n    INPROGRESS_DEACTIVATION = 'INPROGRESS_DEACTIVATION',\n}\ninterface HarvestingState {\n    initialized: boolean;\n    harvestedBlocks: HarvestedBlock[];\n    isFetchingHarvestedBlocks: boolean;\n    harvestedBlocksPageInfo: PageInfo;\n    status: HarvestingStatus;\n    harvestedBlockStats: HarvestedBlockStats;\n    isFetchingHarvestedBlockStats: boolean;\n}\n\nconst initialState: HarvestingState = {\n    initialized: false,\n    harvestedBlocks: null,\n    isFetchingHarvestedBlocks: false,\n    harvestedBlocksPageInfo: { pageNumber: 1, isLastPage: false },\n    status: HarvestingStatus.INACTIVE,\n    harvestedBlockStats: {\n        totalBlockCount: 0,\n        totalFeesEarned: UInt64.fromUint(0),\n    },\n    isFetchingHarvestedBlockStats: false,\n};\n\nexport default {\n    namespaced: true,\n    state: initialState,\n    getters: {\n        getInitialized: (state) => state.initialized,\n        harvestedBlocks: (state) => state.harvestedBlocks,\n        isFetchingHarvestedBlocks: (state) => state.isFetchingHarvestedBlocks,\n        harvestedBlocksPageInfo: (state) => state.harvestedBlocksPageInfo,\n        status: (state) => state.status,\n        harvestedBlockStats: (state) => state.harvestedBlockStats,\n        isFetchingHarvestedBlockStats: (state) => state.isFetchingHarvestedBlockStats,\n    },\n    mutations: {\n        setInitialized: (state, initialized) => {\n            state.initialized = initialized;\n        },\n        harvestedBlocks: (state, { harvestedBlocks, pageInfo }) => {\n            Vue.set(state, 'harvestedBlocks', harvestedBlocks);\n            Vue.set(state, 'harvestedBlocksPageInfo', pageInfo);\n        },\n        isFetchingHarvestedBlocks: (state, isFetchingHarvestedBlocks) =>\n            Vue.set(state, 'isFetchingHarvestedBlocks', isFetchingHarvestedBlocks),\n        status: (state, status) => Vue.set(state, 'status', status),\n        harvestedBlockStats: (state, harvestedBlockStats) => Vue.set(state, 'harvestedBlockStats', harvestedBlockStats),\n        isFetchingHarvestedBlockStats: (state, isFetchingHarvestedBlockStats) =>\n            Vue.set(state, 'isFetchingHarvestedBlockStats', isFetchingHarvestedBlockStats),\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                // update store\n                commit('setInitialized', true);\n            };\n\n            // acquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n        async uninitialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n        /// region scoped actions\n        RESET_STATE({ commit }) {\n            commit('harvestedBlocks', { harvestedBlocks: null, pageInfo: { pageNumber: 1, isLastPage: false } });\n            commit('isFetchingHarvestedBlocks', false);\n        },\n        async FETCH_STATUS({ commit, rootGetters }) {\n            const currentSignerAccountInfo: AccountInfo = rootGetters['account/currentSignerAccountInfo'];\n            // reset\n            commit('status', HarvestingStatus.INACTIVE);\n            if (!currentSignerAccountInfo) {\n                return;\n            }\n            const currentSignerAccountModel: AccountModel = rootGetters['account/currentSignerAccountModel'];\n\n            //find the node url from currentSignerAccountModel (localStorage)\n            const remotePublicKey = currentSignerAccountInfo.supplementalPublicKeys?.linked?.publicKey;\n            const selectedNode = currentSignerAccountModel.selectedHarvestingNode;\n            const harvestingNodeUrl = selectedNode?.url;\n            let unlockedAccounts: string[] = [];\n\n            if (harvestingNodeUrl) {\n                const repositoryFactory = new RepositoryFactoryHttp(URLHelpers.getNodeUrl(harvestingNodeUrl));\n                const nodeRepository = repositoryFactory.createNodeRepository();\n                try {\n                    unlockedAccounts = await nodeRepository.getUnlockedAccount().toPromise();\n                } catch (error) {\n                    //proceed\n                }\n            }\n\n            const allKeysLinked =\n                currentSignerAccountInfo.supplementalPublicKeys?.linked &&\n                currentSignerAccountInfo.supplementalPublicKeys?.node &&\n                currentSignerAccountInfo.supplementalPublicKeys?.vrf;\n            const accountUnlocked = unlockedAccounts?.some((publicKey) => publicKey === remotePublicKey);\n\n            let status: HarvestingStatus;\n            if (allKeysLinked) {\n                status = accountUnlocked\n                    ? HarvestingStatus.ACTIVE\n                    : currentSignerAccountModel.isPersistentDelReqSent\n                    ? HarvestingStatus.INPROGRESS_ACTIVATION\n                    : HarvestingStatus.KEYS_LINKED;\n            } else {\n                status = accountUnlocked ? HarvestingStatus.INPROGRESS_DEACTIVATION : HarvestingStatus.INACTIVE;\n            }\n            commit('status', status);\n        },\n        LOAD_HARVESTED_BLOCKS({ commit, rootGetters }, { pageNumber, pageSize }: { pageNumber: number; pageSize: number }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const receiptRepository = repositoryFactory.createReceiptRepository();\n\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            if (!currentSignerAddress) {\n                return;\n            }\n\n            const targetAddress = currentSignerAddress;\n            // for testing => const targetAddress = Address.createFromRawAddress('TD5YTEJNHOMHTMS6XESYAFYUE36COQKPW6MQQQY');\n\n            commit('isFetchingHarvestedBlocks', true);\n\n            receiptRepository\n                .searchReceipts({\n                    targetAddress: targetAddress,\n                    receiptTypes: [ReceiptType.Harvest_Fee],\n                    pageNumber: pageNumber,\n                    pageSize: pageSize,\n                    order: Order.Desc,\n                })\n                .pipe(\n                    map((pageTxStatement) => {\n                        const harvestedBlocks = pageTxStatement.data.map(\n                            (t) =>\n                                (({\n                                    blockNo: t.height,\n                                    fee: (t.receipts as BalanceChangeReceipt[]).find(\n                                        (r) => r.targetAddress.plain() === targetAddress.plain(),\n                                    )?.amount,\n                                } as unknown) as HarvestedBlock),\n                        );\n                        const pageInfo = { isLastPage: pageTxStatement.isLastPage, pageNumber: pageTxStatement.pageNumber };\n\n                        commit('harvestedBlocks', { harvestedBlocks, pageInfo });\n                    }),\n                )\n                .subscribe({ complete: () => commit('isFetchingHarvestedBlocks', false) });\n        },\n        LOAD_HARVESTED_BLOCKS_STATS({ commit, rootGetters }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const receiptRepository = repositoryFactory.createReceiptRepository();\n            const streamer = ReceiptPaginationStreamer.transactionStatements(receiptRepository);\n\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            if (!currentSignerAddress) {\n                return;\n            }\n\n            const targetAddress = currentSignerAddress;\n            // for testing => const targetAddress = Address.createFromRawAddress('TD5YTEJNHOMHTMS6XESYAFYUE36COQKPW6MQQQY');\n\n            commit('isFetchingHarvestedBlockStats', true);\n            let counter = 0;\n            streamer\n                .search({\n                    targetAddress: targetAddress,\n                    receiptTypes: [ReceiptType.Harvest_Fee],\n                    pageNumber: 1,\n                    pageSize: 50,\n                })\n                .pipe(\n                    map(\n                        (t) =>\n                            (({\n                                blockNo: t.height,\n                                fee: (t.receipts as BalanceChangeReceipt[]).find((r) => r.targetAddress.plain() === targetAddress.plain())\n                                    .amount,\n                            } as unknown) as HarvestedBlock),\n                    ),\n                    reduce(\n                        (acc, harvestedBlock) => ({\n                            totalBlockCount: ++counter,\n                            totalFeesEarned: acc.totalFeesEarned.add(harvestedBlock.fee),\n                        }),\n                        {\n                            totalBlockCount: 0,\n                            totalFeesEarned: UInt64.fromUint(0),\n                        },\n                    ),\n                )\n                .subscribe({\n                    next: (harvestedBlockStats) => {\n                        commit('harvestedBlockStats', harvestedBlockStats);\n                    },\n                    complete: () => commit('isFetchingHarvestedBlockStats', false),\n                });\n        },\n        /// end-region scoped actions\n    },\n};\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/Statistics.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/Statistics.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvaGVyby9sYXJlZC13YWxsZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKaW1wb3J0IHsgX19hd2FpdGVyIH0gZnJvbSAidHNsaWIiOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7IC8vIGludGVybmFsIGRlcGVuZGVuY2llcwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIGNvdW50QmxvY2tzOiAwLAogICAgY291bnRUcmFuc2FjdGlvbnM6IDAsCiAgICBjb3VudEFjY291bnRzOiAwLAogICAgY291bnROb2RlczogMAogIH0sCiAgZ2V0dGVyczogewogICAgY291bnRCbG9ja3M6IGZ1bmN0aW9uIGNvdW50QmxvY2tzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jb3VudEJsb2NrczsKICAgIH0sCiAgICBjb3VudFRyYW5zYWN0aW9uczogZnVuY3Rpb24gY291bnRUcmFuc2FjdGlvbnMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmNvdW50VHJhbnNhY3Rpb25zOwogICAgfSwKICAgIGNvdW50QWNjb3VudHM6IGZ1bmN0aW9uIGNvdW50QWNjb3VudHMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmNvdW50QWNjb3VudHM7CiAgICB9LAogICAgY291bnROb2RlczogZnVuY3Rpb24gY291bnROb2RlcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY291bnROb2RlczsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgY291bnRCbG9ja3M6IGZ1bmN0aW9uIGNvdW50QmxvY2tzKHN0YXRlLCBjbnQpIHsKICAgICAgcmV0dXJuIFZ1ZS5zZXQoc3RhdGUsICdjb3VudEJsb2NrcycsIGNudCk7CiAgICB9LAogICAgY291bnRUcmFuc2FjdGlvbnM6IGZ1bmN0aW9uIGNvdW50VHJhbnNhY3Rpb25zKHN0YXRlLCBjbnQpIHsKICAgICAgcmV0dXJuIFZ1ZS5zZXQoc3RhdGUsICdjb3VudFRyYW5zYWN0aW9ucycsIGNudCk7CiAgICB9LAogICAgY291bnRBY2NvdW50czogZnVuY3Rpb24gY291bnRBY2NvdW50cyhzdGF0ZSwgY250KSB7CiAgICAgIHJldHVybiBWdWUuc2V0KHN0YXRlLCAnY291bnRBY2NvdW50cycsIGNudCk7CiAgICB9LAogICAgY291bnROb2RlczogZnVuY3Rpb24gY291bnROb2RlcyhzdGF0ZSwgY250KSB7CiAgICAgIHJldHVybiBWdWUuc2V0KHN0YXRlLCAnY291bnROb2RlcycsIGNudCk7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBMT0FEOiBmdW5jdGlvbiBMT0FEKF9yZWYpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0LAogICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmLnJvb3RHZXR0ZXJzOwogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlcG9zaXRvcnlGYWN0b3J5LCBub2RlSHR0cCwgc3RvcmFnZUluZm9Qcm9taXNlLCBub2RlUGVlcnNQcm9taXNlLCBkaWFnbm9zdGljLCBub2RlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0KCdjb3VudFRyYW5zYWN0aW9ucycsIDApOwogICAgICAgICAgICAgICAgY29tbWl0KCdjb3VudEJsb2NrcycsIDApOwogICAgICAgICAgICAgICAgY29tbWl0KCdjb3VudEFjY291bnRzJywgMCk7CiAgICAgICAgICAgICAgICBjb21taXQoJ2NvdW50Tm9kZXMnLCAwKTsKICAgICAgICAgICAgICAgIHJlcG9zaXRvcnlGYWN0b3J5ID0gcm9vdEdldHRlcnNbJ25ldHdvcmsvcmVwb3NpdG9yeUZhY3RvcnknXTsKICAgICAgICAgICAgICAgIG5vZGVIdHRwID0gcmVwb3NpdG9yeUZhY3RvcnkuY3JlYXRlTm9kZVJlcG9zaXRvcnkoKTsKICAgICAgICAgICAgICAgIHN0b3JhZ2VJbmZvUHJvbWlzZSA9IG5vZGVIdHRwLmdldFN0b3JhZ2VJbmZvKCkudG9Qcm9taXNlKCk7CiAgICAgICAgICAgICAgICBub2RlUGVlcnNQcm9taXNlID0gbm9kZUh0dHAuZ2V0Tm9kZVBlZXJzKCkudG9Qcm9taXNlKCk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmFnZUluZm9Qcm9taXNlOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgZGlhZ25vc3RpYyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVBlZXJzUHJvbWlzZTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIG5vZGVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnY291bnRUcmFuc2FjdGlvbnMnLCBkaWFnbm9zdGljLm51bVRyYW5zYWN0aW9ucyk7CiAgICAgICAgICAgICAgICBjb21taXQoJ2NvdW50QmxvY2tzJywgZGlhZ25vc3RpYy5udW1CbG9ja3MpOwogICAgICAgICAgICAgICAgY29tbWl0KCdjb3VudEFjY291bnRzJywgZGlhZ25vc3RpYy5udW1BY2NvdW50cyk7CiAgICAgICAgICAgICAgICBjb21taXQoJ2NvdW50Tm9kZXMnLCBub2Rlcy5sZW5ndGgpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["/home/hero/lared-wallet/src/store/Statistics.ts"],"names":[],"mappings":";;AAgBA,OAAO,GAAP,MAAgB,KAAhB,C,CACA;;AAEA,eAAe;AACX,EAAA,UAAU,EAAE,IADD;AAEX,EAAA,KAAK,EAAE;AACH,IAAA,WAAW,EAAE,CADV;AAEH,IAAA,iBAAiB,EAAE,CAFhB;AAGH,IAAA,aAAa,EAAE,CAHZ;AAIH,IAAA,UAAU,EAAE;AAJT,GAFI;AAQX,EAAA,OAAO,EAAE;AACL,IAAA,WAAW,EAAE,qBAAC,KAAD;AAAA,aAAW,KAAK,CAAC,WAAjB;AAAA,KADR;AAEL,IAAA,iBAAiB,EAAE,2BAAC,KAAD;AAAA,aAAW,KAAK,CAAC,iBAAjB;AAAA,KAFd;AAGL,IAAA,aAAa,EAAE,uBAAC,KAAD;AAAA,aAAW,KAAK,CAAC,aAAjB;AAAA,KAHV;AAIL,IAAA,UAAU,EAAE,oBAAC,KAAD;AAAA,aAAW,KAAK,CAAC,UAAjB;AAAA;AAJP,GARE;AAcX,EAAA,SAAS,EAAE;AACP,IAAA,WAAW,EAAE,qBAAC,KAAD,EAAQ,GAAR;AAAA,aAAgB,GAAG,CAAC,GAAJ,CAAQ,KAAR,EAAe,aAAf,EAA8B,GAA9B,CAAhB;AAAA,KADN;AAEP,IAAA,iBAAiB,EAAE,2BAAC,KAAD,EAAQ,GAAR;AAAA,aAAgB,GAAG,CAAC,GAAJ,CAAQ,KAAR,EAAe,mBAAf,EAAoC,GAApC,CAAhB;AAAA,KAFZ;AAGP,IAAA,aAAa,EAAE,uBAAC,KAAD,EAAQ,GAAR;AAAA,aAAgB,GAAG,CAAC,GAAJ,CAAQ,KAAR,EAAe,eAAf,EAAgC,GAAhC,CAAhB;AAAA,KAHR;AAIP,IAAA,UAAU,EAAE,oBAAC,KAAD,EAAQ,GAAR;AAAA,aAAgB,GAAG,CAAC,GAAJ,CAAQ,KAAR,EAAe,YAAf,EAA6B,GAA7B,CAAhB;AAAA;AAJL,GAdA;AAoBX,EAAA,OAAO,EAAE;AACC,IAAA,IADD,sBAC6B;AAAA,UAArB,MAAqB,QAArB,MAAqB;AAAA,UAAb,WAAa,QAAb,WAAa;;;;;;;AAC9B,gBAAA,MAAM,CAAC,mBAAD,EAAsB,CAAtB,CAAN;AACA,gBAAA,MAAM,CAAC,aAAD,EAAgB,CAAhB,CAAN;AACA,gBAAA,MAAM,CAAC,eAAD,EAAkB,CAAlB,CAAN;AACA,gBAAA,MAAM,CAAC,YAAD,EAAe,CAAf,CAAN;AAEM,gBAAA,iB,GAAoB,WAAW,CAAC,2BAAD,C;AAC/B,gBAAA,Q,GAAW,iBAAiB,CAAC,oBAAlB,E;AACX,gBAAA,kB,GAAqB,QAAQ,CAAC,cAAT,GAA0B,SAA1B,E;AACrB,gBAAA,gB,GAAmB,QAAQ,CAAC,YAAT,GAAwB,SAAxB,E;;AAEO,uBAAM,kBAAN;;;AAA1B,gBAAA,U;;AACQ,uBAAM,gBAAN;;;AAAR,gBAAA,K;AAEN,gBAAA,MAAM,CAAC,mBAAD,EAAsB,UAAU,CAAC,eAAjC,CAAN;AACA,gBAAA,MAAM,CAAC,aAAD,EAAgB,UAAU,CAAC,SAA3B,CAAN;AACA,gBAAA,MAAM,CAAC,eAAD,EAAkB,UAAU,CAAC,WAA7B,CAAN;AACA,gBAAA,MAAM,CAAC,YAAD,EAAe,KAAK,CAAC,MAArB,CAAN;;;;;;;;;AACH;AAnBI;AApBE,CAAf","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { RepositoryFactory, StorageInfo } from 'symbol-sdk';\nimport Vue from 'vue';\n// internal dependencies\n\nexport default {\n    namespaced: true,\n    state: {\n        countBlocks: 0,\n        countTransactions: 0,\n        countAccounts: 0,\n        countNodes: 0,\n    },\n    getters: {\n        countBlocks: (state) => state.countBlocks,\n        countTransactions: (state) => state.countTransactions,\n        countAccounts: (state) => state.countAccounts,\n        countNodes: (state) => state.countNodes,\n    },\n    mutations: {\n        countBlocks: (state, cnt) => Vue.set(state, 'countBlocks', cnt),\n        countTransactions: (state, cnt) => Vue.set(state, 'countTransactions', cnt),\n        countAccounts: (state, cnt) => Vue.set(state, 'countAccounts', cnt),\n        countNodes: (state, cnt) => Vue.set(state, 'countNodes', cnt),\n    },\n    actions: {\n        async LOAD({ commit, rootGetters }) {\n            commit('countTransactions', 0);\n            commit('countBlocks', 0);\n            commit('countAccounts', 0);\n            commit('countNodes', 0);\n\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const nodeHttp = repositoryFactory.createNodeRepository();\n            const storageInfoPromise = nodeHttp.getStorageInfo().toPromise();\n            const nodePeersPromise = nodeHttp.getNodePeers().toPromise();\n\n            const diagnostic: StorageInfo = await storageInfoPromise;\n            const nodes = await nodePeersPromise;\n\n            commit('countTransactions', diagnostic.numTransactions);\n            commit('countBlocks', diagnostic.numBlocks);\n            commit('countAccounts', diagnostic.numAccounts);\n            commit('countNodes', nodes.length);\n        },\n    },\n};\n"],"sourceRoot":""}]}
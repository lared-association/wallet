{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/MetadataService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/MetadataService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qKgogKiBDb3B5cmlnaHQgMjAyMCBORU0gKGh0dHBzOi8vbmVtLmlvKQogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICoKICovCmltcG9ydCB7IE1ldGFkYXRhVHlwZSwgS2V5R2VuZXJhdG9yLCBNb3NhaWNJZCwgTmFtZXNwYWNlSWQsIE1ldGFkYXRhVHJhbnNhY3Rpb25TZXJ2aWNlLCBDcnlwdG8gfSBmcm9tICdzeW1ib2wtc2RrJzsKaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBNZXRhZGF0YU1vZGVsIH0gZnJvbSAnQC9jb3JlL2RhdGFiYXNlL2VudGl0aWVzL01ldGFkYXRhTW9kZWwnOwppbXBvcnQgeyBNZXRhZGF0YU1vZGVsU3RvcmFnZSB9IGZyb20gJ0AvY29yZS9kYXRhYmFzZS9zdG9yYWdlL01ldGFkYXRhTW9kZWxTdG9yYWdlJzsKLyoqCiAqIFRoZSBzZXJ2aWNlIGluIGNoYXJnZSBvZiBsb2FkaW5nIGFuZCBjYWNoaW5nIGFueXRoaW5nIHJlbGF0ZWQgdG8gTWV0YWRhdGEgZnJvbSBSZXN0LgogKiBUaGUgY2FjaGUgaXMgZG9uZSBieSBzdG9yaW5nIHRoZSBwYXlsb2FkcyBpbiBTaW1wbGVPYmplY3RTdG9yYWdlLgogKi8KCmV4cG9ydCB2YXIgTWV0YWRhdGFTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBNZXRhZGF0YVNlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWV0YWRhdGFTZXJ2aWNlKTsKCiAgICAvKioKICAgICAqIFRoZSBtZXRhZGF0YSBpbmZvcm1hdGlvbiBsb2NhbCBjYWNoZS4KICAgICAqLwogICAgdGhpcy5tZXRhZGF0YU1vZGVsU3RvcmFnZSA9IE1ldGFkYXRhTW9kZWxTdG9yYWdlLklOU1RBTkNFOwogIH0KICAvKioKICAgKiBUaGlzIG1ldGhvZCBsb2FkcyBhbmQgY2FjaGVzIHRoZSBtZXRhZGF0YSBpbmZvcm1hdGlvbiBmb3IgdGhlIGdpdmVuIGFjY291bnRzLgogICAqIFRoZSByZXR1cm5lZCBPYnNlcnZhYmxlIHdpbGwgYW5ub3VuY2UgdGhlIGNhY2hlZCBpbmZvcm1hdGlvbiBmaXJzdCwgdGhlbiB0aGUgcmVzdCByZXR1cm5lZAogICAqIGluZm9ybWF0aW9uIChpZiBwb3NzaWJsZSkuCiAgICoKICAgKiBAcGFyYW0gcmVwb3NpdG9yeUZhY3RvcnkgdGhlIHJlcG9zaXRvcnkgZmFjdG9yeQogICAqIEBwYXJhbSBnZW5lcmF0aW9uSGFzaCB0aGUgY3VycmVudCBuZXR3b3JrIGdlbmVyYXRpb24gaGFzaC4KICAgKiBAcGFyYW0gYWRkcmVzcyB0aGUgY3VycmVudCBhZGRyZXNzLgogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKE1ldGFkYXRhU2VydmljZSwgW3sKICAgIGtleTogImdldE1ldGFkYXRhTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWV0YWRhdGFMaXN0KHJlcG9zaXRvcnlGYWN0b3J5LCBnZW5lcmF0aW9uSGFzaCwgYWRkcmVzcykgewogICAgICBpZiAoIWFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gb2YoW10pOwogICAgICB9CgogICAgICB2YXIgbWV0YWRhdGFSZXBvc2l0b3J5ID0gcmVwb3NpdG9yeUZhY3RvcnkuY3JlYXRlTWV0YWRhdGFSZXBvc2l0b3J5KCk7CiAgICAgIHZhciBzZWFyY2hDcml0ZXJpYSA9IHsKICAgICAgICB0YXJnZXRBZGRyZXNzOiBhZGRyZXNzCiAgICAgIH07CiAgICAgIHJldHVybiBtZXRhZGF0YVJlcG9zaXRvcnkuc2VhcmNoKHNlYXJjaENyaXRlcmlhKS5waXBlKG1hcChmdW5jdGlvbiAobWV0YWRhdGFMaXN0UGFnZSkgewogICAgICAgIHJldHVybiBtZXRhZGF0YUxpc3RQYWdlLmRhdGEubWFwKGZ1bmN0aW9uIChtZXRhZGF0YSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNZXRhZGF0YU1vZGVsKG1ldGFkYXRhKTsKICAgICAgICB9KTsKICAgICAgfSkpOwogICAgfQogICAgLyoqCiAgICAgKiBnZXQgbWV0YWRhdGEgY3JlYXRpb24gb2JzZXJ2YWJsZQogICAgICogQHJldHVybnMge09ic2VydmFibGU8VHJhbnNhY3Rpb24+fQogICAgICovCgogIH0sIHsKICAgIGtleTogIm1ldGFkYXRhVHJhbnNhY3Rpb25PYnNlcnZlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWV0YWRhdGFUcmFuc2FjdGlvbk9ic2VydmVyKHJlcG9zaXRvcnlGYWN0b3J5LCBkZWFkbGluZSwgbmV0d29ya1R5cGUsIHNvdXJjZUFkZHJlc3MsIHRhcmdldEFkZHJlc3MsIHZhbHVlLCB0YXJnZXRJZCwgbWV0YWRhdGFUeXBlLCBtYXhGZWUpIHsKICAgICAgdmFyIHNjb3BlZE1ldGFkYXRhS2V5ID0gS2V5R2VuZXJhdG9yLmdlbmVyYXRlVUludDY0S2V5KENyeXB0by5yYW5kb21CeXRlcyg4KSk7CiAgICAgIHZhciBtZXRhZGF0YVJlcG9zaXRvcnkgPSByZXBvc2l0b3J5RmFjdG9yeS5jcmVhdGVNZXRhZGF0YVJlcG9zaXRvcnkoKTsKICAgICAgdmFyIG1ldGFkYXRhVHJhbnNhY3Rpb25TZXJ2aWNlID0gbmV3IE1ldGFkYXRhVHJhbnNhY3Rpb25TZXJ2aWNlKG1ldGFkYXRhUmVwb3NpdG9yeSk7CiAgICAgIHZhciBtZXRhZGF0YU9ic2VydmFibGUgPSBudWxsOwoKICAgICAgaWYgKG1ldGFkYXRhVHlwZSA9PT0gTWV0YWRhdGFUeXBlLkFjY291bnQpIHsKICAgICAgICBtZXRhZGF0YU9ic2VydmFibGUgPSBtZXRhZGF0YVRyYW5zYWN0aW9uU2VydmljZS5jcmVhdGVBY2NvdW50TWV0YWRhdGFUcmFuc2FjdGlvbihkZWFkbGluZSwgbmV0d29ya1R5cGUsIHRhcmdldEFkZHJlc3MsIHNjb3BlZE1ldGFkYXRhS2V5LCB2YWx1ZSwgc291cmNlQWRkcmVzcywgbWF4RmVlKTsKICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YVR5cGUgPT09IE1ldGFkYXRhVHlwZS5Nb3NhaWMpIHsKICAgICAgICB2YXIgbW9zYWljSWQgPSBuZXcgTW9zYWljSWQodGFyZ2V0SWQpOwogICAgICAgIG1ldGFkYXRhT2JzZXJ2YWJsZSA9IG1ldGFkYXRhVHJhbnNhY3Rpb25TZXJ2aWNlLmNyZWF0ZU1vc2FpY01ldGFkYXRhVHJhbnNhY3Rpb24oZGVhZGxpbmUsIG5ldHdvcmtUeXBlLCB0YXJnZXRBZGRyZXNzLCBtb3NhaWNJZCwgc2NvcGVkTWV0YWRhdGFLZXksIHZhbHVlLCBzb3VyY2VBZGRyZXNzLCBtYXhGZWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBuYW1lc3BhY2VJZCA9IG5ldyBOYW1lc3BhY2VJZCh0YXJnZXRJZCk7CiAgICAgICAgbWV0YWRhdGFPYnNlcnZhYmxlID0gbWV0YWRhdGFUcmFuc2FjdGlvblNlcnZpY2UuY3JlYXRlTmFtZXNwYWNlTWV0YWRhdGFUcmFuc2FjdGlvbihkZWFkbGluZSwgbmV0d29ya1R5cGUsIHRhcmdldEFkZHJlc3MsIG5hbWVzcGFjZUlkLCBzY29wZWRNZXRhZGF0YUtleSwgdmFsdWUsIHNvdXJjZUFkZHJlc3MsIG1heEZlZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBtZXRhZGF0YU9ic2VydmFibGU7CiAgICB9CiAgICAvKioKICAgICAqIGdldCBtZXRhZGF0YSBsaXN0IGJ5IHRhcmdldCBpZAogICAgICogQHBhcmFtIG1ldGFkYXRhTGlzdAogICAgICogQHBhcmFtIHRhcmdldElkIE1vc2FpY0lkIHwgTmFtZXNwYWNlSWQKICAgICAqLwoKICB9XSwgW3sKICAgIGtleTogImdldE1vc2FpY01ldGFkYXRhQnlUYXJnZXRJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TW9zYWljTWV0YWRhdGFCeVRhcmdldElkKG1ldGFkYXRhTGlzdCwgdGFyZ2V0SWQpIHsKICAgICAgcmV0dXJuIG1ldGFkYXRhTGlzdCAmJiBtZXRhZGF0YUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChtZXRhZGF0YU1vZGVsKSB7CiAgICAgICAgcmV0dXJuIG1ldGFkYXRhTW9kZWwudGFyZ2V0SWQgPT09IHRhcmdldElkOwogICAgICB9KSB8fCBbXTsKICAgIH0KICB9XSk7CgogIHJldHVybiBNZXRhZGF0YVNlcnZpY2U7Cn0oKTs="},{"version":3,"sources":["/home/hero/lared-wallet/src/services/MetadataService.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAeA,SAEI,YAFJ,EAQI,YARJ,EASI,QATJ,EAUI,WAVJ,EAWI,0BAXJ,EAaI,MAbJ,QAcO,YAdP;AAeA,SAAqB,EAArB,QAA+B,MAA/B;AACA,SAAS,GAAT,QAAoB,gBAApB;AACA,SAAS,aAAT,QAA8B,wCAA9B;AACA,SAAS,oBAAT,QAAqC,8CAArC;AAEA;;;;;AAKA,WAAa,eAAb;AAAA,6BAAA;AAAA;;AACI;;;AAGiB,SAAA,oBAAA,GAAuB,oBAAoB,CAAC,QAA5C;AA6FpB;AA3FG;;;;;;;;;;;AANJ;AAAA;AAAA,oCAe2B,iBAf3B,EAeiE,cAfjE,EAeyF,OAfzF,EAeyG;AACjG,UAAI,CAAC,OAAL,EAAc;AACV,eAAO,EAAE,CAAC,EAAD,CAAT;AACH;;AAED,UAAM,kBAAkB,GAAG,iBAAiB,CAAC,wBAAlB,EAA3B;AACA,UAAM,cAAc,GAA2B;AAAE,QAAA,aAAa,EAAE;AAAjB,OAA/C;AAEA,aAAO,kBAAkB,CACpB,MADE,CACK,cADL,EAEF,IAFE,CAEG,GAAG,CAAC,UAAC,gBAAD;AAAA,eAAsB,gBAAgB,CAAC,IAAjB,CAAsB,GAAtB,CAA0B,UAAC,QAAD;AAAA,iBAAc,IAAI,aAAJ,CAAkB,QAAlB,CAAd;AAAA,SAA1B,CAAtB;AAAA,OAAD,CAFN,CAAP;AAGH;AAED;;;;;AA5BJ;AAAA;AAAA,gDAiCQ,iBAjCR,EAkCQ,QAlCR,EAmCQ,WAnCR,EAoCQ,aApCR,EAqCQ,aArCR,EAsCQ,KAtCR,EAuCQ,QAvCR,EAwCQ,YAxCR,EAyCQ,MAzCR,EAyCsB;AAEd,UAAM,iBAAiB,GAAG,YAAY,CAAC,iBAAb,CAA+B,MAAM,CAAC,WAAP,CAAmB,CAAnB,CAA/B,CAA1B;AAEA,UAAM,kBAAkB,GAAG,iBAAiB,CAAC,wBAAlB,EAA3B;AACA,UAAM,0BAA0B,GAAG,IAAI,0BAAJ,CAA+B,kBAA/B,CAAnC;AAEA,UAAI,kBAAkB,GAA4B,IAAlD;;AAEA,UAAI,YAAY,KAAK,YAAY,CAAC,OAAlC,EAA2C;AACvC,QAAA,kBAAkB,GAAG,0BAA0B,CAAC,gCAA3B,CACjB,QADiB,EAEjB,WAFiB,EAGjB,aAHiB,EAIjB,iBAJiB,EAKjB,KALiB,EAMjB,aANiB,EAOjB,MAPiB,CAArB;AASH,OAVD,MAUO,IAAI,YAAY,KAAK,YAAY,CAAC,MAAlC,EAA0C;AAC7C,YAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,QAAb,CAAjB;AACA,QAAA,kBAAkB,GAAG,0BAA0B,CAAC,+BAA3B,CACjB,QADiB,EAEjB,WAFiB,EAGjB,aAHiB,EAIjB,QAJiB,EAKjB,iBALiB,EAMjB,KANiB,EAOjB,aAPiB,EAQjB,MARiB,CAArB;AAUH,OAZM,MAYA;AACH,YAAM,WAAW,GAAG,IAAI,WAAJ,CAAgB,QAAhB,CAApB;AACA,QAAA,kBAAkB,GAAG,0BAA0B,CAAC,kCAA3B,CACjB,QADiB,EAEjB,WAFiB,EAGjB,aAHiB,EAIjB,WAJiB,EAKjB,iBALiB,EAMjB,KANiB,EAOjB,aAPiB,EAQjB,MARiB,CAArB;AAUH;;AAED,aAAO,kBAAP;AACH;AAED;;;;;;AAzFJ;AAAA;AAAA,gDA8F8C,YA9F9C,EA8F6E,QA9F7E,EA8F6F;AACrF,aAAQ,YAAY,IAAI,YAAY,CAAC,MAAb,CAAoB,UAAC,aAAD;AAAA,eAAmB,aAAa,CAAC,QAAd,KAA2B,QAA9C;AAAA,OAApB,CAAjB,IAAiG,EAAxG;AACH;AAhGL;;AAAA;AAAA","sourcesContent":["/**\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n    Address,\n    MetadataType,\n    RepositoryFactory,\n    Transaction,\n    NetworkType,\n    Deadline,\n    UInt64,\n    KeyGenerator,\n    MosaicId,\n    NamespaceId,\n    MetadataTransactionService,\n    MetadataSearchCriteria,\n    Crypto,\n} from 'symbol-sdk';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\nimport { MetadataModelStorage } from '@/core/database/storage/MetadataModelStorage';\n\n/**\n * The service in charge of loading and caching anything related to Metadata from Rest.\n * The cache is done by storing the payloads in SimpleObjectStorage.\n */\n\nexport class MetadataService {\n    /**\n     * The metadata information local cache.\n     */\n    private readonly metadataModelStorage = MetadataModelStorage.INSTANCE;\n\n    /**\n     * This method loads and caches the metadata information for the given accounts.\n     * The returned Observable will announce the cached information first, then the rest returned\n     * information (if possible).\n     *\n     * @param repositoryFactory the repository factory\n     * @param generationHash the current network generation hash.\n     * @param address the current address.\n     */\n    public getMetadataList(repositoryFactory: RepositoryFactory, generationHash: string, address: Address): Observable<MetadataModel[]> {\n        if (!address) {\n            return of([]);\n        }\n\n        const metadataRepository = repositoryFactory.createMetadataRepository();\n        const searchCriteria: MetadataSearchCriteria = { targetAddress: address };\n\n        return metadataRepository\n            .search(searchCriteria)\n            .pipe(map((metadataListPage) => metadataListPage.data.map((metadata) => new MetadataModel(metadata))));\n    }\n\n    /**\n     * get metadata creation observable\n     * @returns {Observable<Transaction>}\n     */\n    public metadataTransactionObserver(\n        repositoryFactory: RepositoryFactory,\n        deadline: Deadline,\n        networkType: NetworkType,\n        sourceAddress: Address,\n        targetAddress: Address,\n        value: string,\n        targetId: string,\n        metadataType: MetadataType,\n        maxFee: UInt64,\n    ): Observable<Transaction> {\n        const scopedMetadataKey = KeyGenerator.generateUInt64Key(Crypto.randomBytes(8));\n\n        const metadataRepository = repositoryFactory.createMetadataRepository();\n        const metadataTransactionService = new MetadataTransactionService(metadataRepository);\n\n        let metadataObservable: Observable<Transaction> = null;\n\n        if (metadataType === MetadataType.Account) {\n            metadataObservable = metadataTransactionService.createAccountMetadataTransaction(\n                deadline,\n                networkType,\n                targetAddress,\n                scopedMetadataKey,\n                value,\n                sourceAddress,\n                maxFee,\n            );\n        } else if (metadataType === MetadataType.Mosaic) {\n            const mosaicId = new MosaicId(targetId);\n            metadataObservable = metadataTransactionService.createMosaicMetadataTransaction(\n                deadline,\n                networkType,\n                targetAddress,\n                mosaicId,\n                scopedMetadataKey,\n                value,\n                sourceAddress,\n                maxFee,\n            );\n        } else {\n            const namespaceId = new NamespaceId(targetId);\n            metadataObservable = metadataTransactionService.createNamespaceMetadataTransaction(\n                deadline,\n                networkType,\n                targetAddress,\n                namespaceId,\n                scopedMetadataKey,\n                value,\n                sourceAddress,\n                maxFee,\n            );\n        }\n\n        return metadataObservable;\n    }\n\n    /**\n     * get metadata list by target id\n     * @param metadataList\n     * @param targetId MosaicId | NamespaceId\n     */\n    public static getMosaicMetadataByTargetId(metadataList: MetadataModel[], targetId: string) {\n        return (metadataList && metadataList.filter((metadataModel) => metadataModel.targetId === targetId)) || [];\n    }\n}\n"],"sourceRoot":""}]}
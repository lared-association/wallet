{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/Namespace.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/Namespace.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/store/Namespace.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, NamespaceId, RepositoryFactory } from 'symbol-sdk';\nimport Vue from 'vue';\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { NamespaceService } from '@/services/NamespaceService';\nimport { NamespaceModel } from '@/core/database/entities/NamespaceModel';\n\nimport * as _ from 'lodash';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\nimport { MetadataService } from '@/services/MetadataService';\n\nconst Lock = AwaitLock.create();\n\ninterface NamespaceState {\n    initialized: boolean;\n    namespaces: NamespaceModel[];\n    ownedNamespaces: NamespaceModel[];\n    isFetchingNamespaces: boolean;\n    linkedAddress: Address | null;\n}\n\nconst namespaceState: NamespaceState = {\n    initialized: false,\n    namespaces: [],\n    ownedNamespaces: [],\n    isFetchingNamespaces: false,\n    linkedAddress: null,\n};\n\nexport default {\n    namespaced: true,\n    state: namespaceState,\n    getters: {\n        getInitialized: (state: NamespaceState) => state.initialized,\n        namespaces: (state: NamespaceState) => state.namespaces,\n        ownedNamespaces: (state: NamespaceState) => state.ownedNamespaces,\n        isFetchingNamespaces: (state: NamespaceState) => state.isFetchingNamespaces,\n        linkedAddress: (state: NamespaceState) => state.linkedAddress,\n    },\n    mutations: {\n        setInitialized: (state: NamespaceState, initialized) => {\n            state.initialized = initialized;\n        },\n        namespaces: (\n            state: NamespaceState,\n            {\n                namespaces,\n                currentSignerAddress,\n                namespaceMetadataList,\n            }: { namespaces: NamespaceModel[]; currentSignerAddress: Address; namespaceMetadataList: MetadataModel[] },\n        ) => {\n            const uniqueNamespaces = _.uniqBy(namespaces, (n) => n.namespaceIdHex).map((namespace) => {\n                namespace.metadataList = MetadataService.getMosaicMetadataByTargetId(namespaceMetadataList, namespace.namespaceIdHex);\n                return namespace;\n            });\n            Vue.set(state, 'namespaces', uniqueNamespaces);\n            Vue.set(\n                state,\n                'ownedNamespaces',\n                uniqueNamespaces.filter((n) => n.ownerAddressRawPlain === currentSignerAddress.plain()),\n            );\n        },\n        isFetchingNamespaces: (state: NamespaceState, isFetchingNamespaces: boolean) =>\n            Vue.set(state, 'isFetchingNamespaces', isFetchingNamespaces),\n        linkedAddress: (state: NamespaceState, linkedAddress: Address | null) => Vue.set(state, 'linkedAddress', linkedAddress),\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                // Placeholder for initialization if necessary.\n                commit('setInitialized', true);\n            };\n            // aquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n\n        async uninitialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        LOAD_NAMESPACES({ commit, rootGetters }) {\n            const repositoryFactory = rootGetters['network/repositoryFactory'];\n            const generationHash = rootGetters['network/generationHash'];\n            const namespaceService = new NamespaceService();\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            const namespaceMetadataList: MetadataModel[] = rootGetters['metadata/namespaceMetadataList'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            commit('isFetchingNamespaces', true);\n            namespaceService\n                .getNamespaces(repositoryFactory, generationHash, [currentSignerAddress])\n                .subscribe((namespaces) => {\n                    commit('namespaces', { namespaces, currentSignerAddress, namespaceMetadataList });\n                })\n                .add(() => commit('isFetchingNamespaces', false));\n        },\n\n        RESET_NAMESPACES({ commit }) {\n            const namespaces: NamespaceModel[] = [];\n            commit('namespaces', { namespaces, undefined });\n        },\n\n        async GET_LINKED_ADDRESS({ commit, rootGetters }, namespaceId: NamespaceId) {\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const getLinkedAccountPromise = repositoryFactory\n                .createNamespaceRepository()\n                .getLinkedAddress(namespaceId)\n                .toPromise()\n                .catch(() => commit('linkedAddress', null));\n            const linkedAddress = await getLinkedAccountPromise;\n\n            commit('linkedAddress', linkedAddress);\n        },\n\n        SIGNER_CHANGED({ commit, rootGetters, getters }) {\n            const namespaces: NamespaceModel[] = getters['namespaces'];\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            commit('namespaces', { namespaces, currentSignerAddress });\n        },\n\n        async RESOLVE_NAME({ commit, getters, rootGetters }, namespaceId: NamespaceId): Promise<string> {\n            if (!namespaceId) {\n                return '';\n            }\n\n            if (namespaceId.fullName) {\n                return namespaceId.fullName;\n            }\n            const namespaces: NamespaceModel[] = getters['namespaces'];\n            const knownNamespace = namespaces.find((n) => n.namespaceIdHex === namespaceId.toHex());\n            if (knownNamespace) {\n                return knownNamespace.name;\n            }\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const currentSignerAddress = rootGetters['account/currentSignerAddress'] as Address;\n            const namespaceRepository = repositoryFactory.createNamespaceRepository();\n\n            const namespaceInfo = await namespaceRepository.getNamespace(namespaceId).toPromise();\n\n            // map by hex if names available\n            const namespaceName = await namespaceRepository.getNamespacesNames([namespaceId]).toPromise();\n\n            // Note, fullName may not be full. How can we load it without needing to load each parent recursively?.\n            const model = new NamespaceModel(\n                namespaceInfo,\n                NamespaceService.getFullNameFromNamespaceNames(namespaceName[0], namespaceName),\n            );\n            namespaces.push(model);\n            commit('namespaces', { namespaces, currentSignerAddress });\n            return model.name;\n        },\n    },\n};\n"],"sourceRoot":""}]}
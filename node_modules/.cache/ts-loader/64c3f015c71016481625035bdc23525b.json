{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormAggregateTransaction/FormAggregateTransactionTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormAggregateTransaction/FormAggregateTransactionTs.ts","mtime":1611927227514},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormAggregateTransaction/FormAggregateTransactionTs.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// @ts-ignore\nimport FormTransferTransaction from '@/views/forms/FormTransferTransaction/FormTransferTransaction.vue';\n// @ts-ignore\nimport FormNamespaceRegistrationTransaction from '@/views/forms/FormNamespaceRegistrationTransaction/FormNamespaceRegistrationTransaction.vue';\n// @ts-ignore\nimport FormMosaicDefinitionTransaction from '@/views/forms/FormMosaicDefinitionTransaction/FormMosaicDefinitionTransaction.vue';\nimport {\n    TransferTransaction,\n    PlainMessage,\n    UInt64,\n    Address,\n    NetworkType,\n    Transaction,\n    NamespaceId,\n    PublicAccount,\n    MosaicDefinitionTransaction,\n    MosaicNonce,\n    MosaicId,\n    MosaicFlags,\n    NamespaceRegistrationTransaction,\n} from 'symbol-sdk';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper';\nimport { ValidationObserver } from 'vee-validate';\n// @ts-ignore\nimport MaxFeeSelector from '@/components/MaxFeeSelector/MaxFeeSelector.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\nimport { AddressValidator, AliasValidator } from '@/core/validation/validators';\nimport { TransactionCommandMode } from '@/services/TransactionCommand';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\n\n@Component({\n    components: {\n        FormWrapper,\n        ValidationObserver,\n        FormTransferTransaction,\n        FormNamespaceRegistrationTransaction,\n        FormMosaicDefinitionTransaction,\n        FormRow,\n        MaxFeeSelector,\n        ModalTransactionConfirmation,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            simpleAggregateTransaction: 'aggregateTransaction/simpleAggregateTransaction',\n            aggregateTransactionIndex: 'aggregateTransaction/aggregateTransactionIndex',\n            networkType: 'network/networkType',\n            currentAccount: 'account/currentAccount',\n        }),\n    },\n})\nexport class FormAggregateTransactionTs extends FormTransactionBase {\n    private simpleAggregateTransaction: [];\n    private aggregateTransactionIndex: number;\n\n    public formItems = {\n        maxFee: 0,\n        recipientRaw: '',\n        signerPublicKey: '',\n    };\n    /**\n     * currently selected tx title\n     * @var {string}\n     */\n    private txTitle = '';\n    /**\n     * Whether account is currently being unlocked\n     * @var {boolean}\n     */\n    public isUnlockingAccount: boolean = false;\n\n    /**\n     *  items to be binded to the shown form\n     * @var {object}\n     */\n    private currentTxItems = {};\n\n    /**\n     * current selected saved transaction\n     * @var {object}\n     */\n    public currentSelectedTransaction = {};\n\n    /**\n     * object containing title and component for each newly created tx before being saved\n     * @var {object}\n     */\n    public transaction = {};\n\n    public networkType: NetworkType;\n\n    public currentAccount: AccountModel;\n\n    public onClickAdd(type: number): void {\n        this.transaction = {};\n        this.currentTxItems = {};\n\n        switch (type) {\n            case 1:\n                this.transaction['title'] = `${this.$t('simple_transaction')}` + this.aggregateTransactionIndex;\n                this.transaction['component'] = FormTransferTransaction;\n                break;\n            case 2:\n                this.transaction['title'] = `${this.$t('mosaic_transaction')}` + this.aggregateTransactionIndex;\n                this.transaction['component'] = FormMosaicDefinitionTransaction;\n                break;\n            case 3:\n                this.transaction['title'] = `${this.$t('namespace_transaction')}` + this.aggregateTransactionIndex;\n                this.transaction['component'] = FormNamespaceRegistrationTransaction;\n                break;\n        }\n        this.currentSelectedTransaction = this.transaction;\n    }\n\n    // on click delete transaction\n    public onClickDelete(title: string): void {\n        // unlock account before being allowed to delete tx\n        if (this.currentAccount) {\n            this.txTitle = title;\n            this.hasAccountUnlockModal = true;\n            return;\n        }\n    }\n\n    // fetch form details for the selected transaction\n    public onSelectTx(title: string) {\n        this.$store.dispatch('aggregateTransaction/GET_TRANSACTION_FROM_AGGREGATE_ARRAY', title).then((val) => {\n            if (val) {\n                this.currentSelectedTransaction = val;\n                Object.assign(this.currentTxItems, val.formItems);\n            }\n        });\n    }\n\n    /**\n     * on click save transaction, it should be added to the store\n     */\n    onSaveTransaction(value) {\n        if (value) {\n            this.$store.dispatch('aggregateTransaction/ON_SAVE_TRANSACTION', {\n                title: this.currentSelectedTransaction['title'],\n                formItems: value,\n                component: this.currentSelectedTransaction['component'],\n            });\n            this.currentSelectedTransaction = {};\n        }\n    }\n    /**\n     * create transfer transaction\n     */\n    private createTransferTx(tx: {}): TransferTransaction {\n        const maxFee = UInt64.fromUint(this.formItems.maxFee);\n        this.formItems.recipientRaw = tx['formItems']['recipientRaw'];\n        const signer = PublicAccount.createFromPublicKey(tx['formItems']['signerPublicKey'], this.networkType);\n        let t: TransferTransaction;\n        if (signer.address.plain() !== this.currentAccount.address) {\n            t = TransferTransaction.create(\n                this.createDeadline(),\n                this.instantiatedRecipient,\n                // @ts-ignore\n                !tx['formItems']['mosaics'].length ? [] : tx['formItems']['mosaics'],\n                tx['formItems']['encryptMessage']\n                    ? tx['formItems']['encyptedMessage']\n                    : PlainMessage.create(tx['formItems']['messagePlain'] || ''),\n                this.networkType,\n                maxFee,\n                '',\n                signer,\n            );\n        } else {\n            t = TransferTransaction.create(\n                this.createDeadline(),\n                this.instantiatedRecipient,\n                // @ts-ignore\n                !tx['formItems']['mosaics'].length ? [] : tx['formItems']['mosaics'],\n                tx['formItems']['encryptMessage']\n                    ? tx['formItems']['encyptedMessage']\n                    : PlainMessage.create(tx['formItems']['messagePlain'] || ''),\n                this.networkType,\n                maxFee,\n            );\n        }\n        return t;\n    }\n    /**\n     * create mosaic definition transaction\n     */\n    private createMosaicTx(tx: {}): MosaicDefinitionTransaction {\n        const maxFee = UInt64.fromUint(this.formItems.maxFee);\n        //const publicAccount = PublicAccount.createFromPublicKey(this.selectedSigner.publicKey, this.networkType)\n        const randomNonce = MosaicNonce.createRandom();\n        // - read form for definition\n        const mosaicId = MosaicId.createFromNonce(randomNonce, this.selectedSigner.address);\n        // the duration must be 0 when the permanent value of true\n        if (tx['formItems']['permanent'] == true) {\n            tx['formItems']['duration'] == 0;\n        }\n        return MosaicDefinitionTransaction.create(\n            this.createDeadline(),\n            randomNonce,\n            mosaicId,\n            MosaicFlags.create(tx['formItems']['supplyMutable'], tx['formItems']['transferable'], this['formItems']['restrictable']),\n            tx['formItems']['divisibility'],\n            UInt64.fromUint(tx['formItems']['duration']),\n            this.networkType,\n            maxFee,\n        );\n    }\n    /**\n     * create root namespace transaction\n     */\n    private CreateRootNameSpaceTx(tx: {}): NamespaceRegistrationTransaction {\n        const maxFee = UInt64.fromUint(this.formItems.maxFee);\n\n        return NamespaceRegistrationTransaction.createRootNamespace(\n            this.createDeadline(),\n            tx['formItems']['newNamespaceName'],\n            UInt64.fromUint(tx['formItems']['duration']),\n            this.networkType,\n            maxFee,\n        );\n    }\n\n    // /**\n    //  * Recipient used in the transaction\n    //  * @readonly\n    //  * @protected\n    //  * @type {Address}\n    //  */\n    protected get instantiatedRecipient(): Address | NamespaceId {\n        const { recipientRaw } = this.formItems;\n        if (AddressValidator.validate(recipientRaw)) {\n            return Address.createFromRawAddress(recipientRaw);\n        } else if (AliasValidator.validate(recipientRaw)) {\n            return new NamespaceId(recipientRaw);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n        this.formItems.signerPublicKey = '';\n    }\n\n    /**\n     * Setter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions() {\n        throw new Error('This transaction can not be staged');\n    }\n\n    /**\n     * clear aggregate transactions list after initiating the transaction\n     */\n    public onConfirmationSuccess() {\n        this.$store.dispatch('aggregateTransaction/CLEAR_AGGREGATE_TRANSACTIONS_LIST');\n        this.resetForm();\n    }\n\n    protected getTransactionCommandMode(transactions: Transaction[]): TransactionCommandMode {\n        if (\n            this.isMultisigMode() ||\n            this.simpleAggregateTransaction.some((tx) => tx['formItems']['signerAddress'] !== this.currentAccount.address)\n        ) {\n            return TransactionCommandMode.MULTISIGN;\n        }\n        if (transactions.length > 1) {\n            return TransactionCommandMode.AGGREGATE;\n        } else {\n            return TransactionCommandMode.SIMPLE;\n        }\n    }\n\n    /**\n     * Getter for Aggregate transactions that will be staged\n     * @see {FormTransactionBase}\n     * @return {Transaction[]}\n     */\n    protected getTransactions(): Transaction[] {\n        const aggregateTransactions = [];\n        if (this.simpleAggregateTransaction.length > 0) {\n            this.simpleAggregateTransaction.map((tx) => {\n                let transaction: Transaction;\n                // @ts-ignore\n                if (tx['title'].indexOf(`${this.$t('simple_transaction')}`) !== -1) {\n                    transaction = this.createTransferTx(tx);\n                    // @ts-ignore\n                } else if (tx['title'].indexOf(`${this.$t('mosaic_transaction')}`) !== -1) {\n                    transaction = this.createMosaicTx(tx);\n                    // @ts-ignore\n                } else {\n                    transaction = this.CreateRootNameSpaceTx(tx);\n                }\n                aggregateTransactions.push(transaction);\n            });\n        }\n        return aggregateTransactions;\n    }\n\n    public get hasAccountUnlockModal(): boolean {\n        return this.isUnlockingAccount;\n    }\n\n    public set hasAccountUnlockModal(f: boolean) {\n        this.isUnlockingAccount = f;\n    }\n    /**\n     * When account is unlocked, the sub account can be created\n     */\n    public async onAccountUnlocked() {\n        try {\n            await this.$store.dispatch('aggregateTransaction/ON_DELETE_TRANSACTION', this.txTitle);\n            this.currentSelectedTransaction = {};\n            this.txTitle = '';\n        } catch (e) {\n            this.$store.dispatch('notification/ADD_ERROR', 'An error happened, please try again.');\n            console.error(e);\n        }\n    }\n\n    onSubmit() {\n        this.command = this.createTransactionCommand();\n        this.onShowConfirmationModal();\n        return this.command;\n    }\n}\n"],"sourceRoot":""}]}
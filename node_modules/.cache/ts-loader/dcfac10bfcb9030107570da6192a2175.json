{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Namespace.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Namespace.ts","mtime":1611927204488},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL21udC9jL1VzZXJzL2p1c3RpL0Rlc2t0b3AvU1VQRVJIT1cvU3ltYm9sV2FsbGV0L2xhcmVkLXdhbGxldC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IiOwppbXBvcnQgeyBfX2F3YWl0ZXIgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsgLy8gaW50ZXJuYWwgZGVwZW5kZW5jaWVzCgppbXBvcnQgeyBBd2FpdExvY2sgfSBmcm9tICcuL0F3YWl0TG9jayc7CmltcG9ydCB7IE5hbWVzcGFjZVNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL05hbWVzcGFjZVNlcnZpY2UnOwppbXBvcnQgeyBOYW1lc3BhY2VNb2RlbCB9IGZyb20gJ0AvY29yZS9kYXRhYmFzZS9lbnRpdGllcy9OYW1lc3BhY2VNb2RlbCc7CmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9NZXRhZGF0YVNlcnZpY2UnOwp2YXIgTG9jayA9IEF3YWl0TG9jay5jcmVhdGUoKTsKdmFyIG5hbWVzcGFjZVN0YXRlID0gewogIGluaXRpYWxpemVkOiBmYWxzZSwKICBuYW1lc3BhY2VzOiBbXSwKICBvd25lZE5hbWVzcGFjZXM6IFtdLAogIGlzRmV0Y2hpbmdOYW1lc3BhY2VzOiBmYWxzZSwKICBsaW5rZWRBZGRyZXNzOiBudWxsCn07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBuYW1lc3BhY2VTdGF0ZSwKICBnZXR0ZXJzOiB7CiAgICBnZXRJbml0aWFsaXplZDogZnVuY3Rpb24gZ2V0SW5pdGlhbGl6ZWQoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmluaXRpYWxpemVkOwogICAgfSwKICAgIG5hbWVzcGFjZXM6IGZ1bmN0aW9uIG5hbWVzcGFjZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm5hbWVzcGFjZXM7CiAgICB9LAogICAgb3duZWROYW1lc3BhY2VzOiBmdW5jdGlvbiBvd25lZE5hbWVzcGFjZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm93bmVkTmFtZXNwYWNlczsKICAgIH0sCiAgICBpc0ZldGNoaW5nTmFtZXNwYWNlczogZnVuY3Rpb24gaXNGZXRjaGluZ05hbWVzcGFjZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmlzRmV0Y2hpbmdOYW1lc3BhY2VzOwogICAgfSwKICAgIGxpbmtlZEFkZHJlc3M6IGZ1bmN0aW9uIGxpbmtlZEFkZHJlc3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmxpbmtlZEFkZHJlc3M7CiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHNldEluaXRpYWxpemVkOiBmdW5jdGlvbiBzZXRJbml0aWFsaXplZChzdGF0ZSwgaW5pdGlhbGl6ZWQpIHsKICAgICAgc3RhdGUuaW5pdGlhbGl6ZWQgPSBpbml0aWFsaXplZDsKICAgIH0sCiAgICBuYW1lc3BhY2VzOiBmdW5jdGlvbiBuYW1lc3BhY2VzKHN0YXRlLCBfcmVmKSB7CiAgICAgIHZhciBfbmFtZXNwYWNlcyA9IF9yZWYubmFtZXNwYWNlcywKICAgICAgICAgIGN1cnJlbnRTaWduZXJBZGRyZXNzID0gX3JlZi5jdXJyZW50U2lnbmVyQWRkcmVzcywKICAgICAgICAgIG5hbWVzcGFjZU1ldGFkYXRhTGlzdCA9IF9yZWYubmFtZXNwYWNlTWV0YWRhdGFMaXN0OwoKICAgICAgdmFyIHVuaXF1ZU5hbWVzcGFjZXMgPSBfLnVuaXFCeShfbmFtZXNwYWNlcywgZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gbi5uYW1lc3BhY2VJZEhleDsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsKICAgICAgICBuYW1lc3BhY2UubWV0YWRhdGFMaXN0ID0gTWV0YWRhdGFTZXJ2aWNlLmdldE1vc2FpY01ldGFkYXRhQnlUYXJnZXRJZChuYW1lc3BhY2VNZXRhZGF0YUxpc3QsIG5hbWVzcGFjZS5uYW1lc3BhY2VJZEhleCk7CiAgICAgICAgcmV0dXJuIG5hbWVzcGFjZTsKICAgICAgfSk7CgogICAgICBWdWUuc2V0KHN0YXRlLCAnbmFtZXNwYWNlcycsIHVuaXF1ZU5hbWVzcGFjZXMpOwogICAgICBWdWUuc2V0KHN0YXRlLCAnb3duZWROYW1lc3BhY2VzJywgdW5pcXVlTmFtZXNwYWNlcy5maWx0ZXIoZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gbi5vd25lckFkZHJlc3NSYXdQbGFpbiA9PT0gY3VycmVudFNpZ25lckFkZHJlc3MucGxhaW4oKTsKICAgICAgfSkpOwogICAgfSwKICAgIGlzRmV0Y2hpbmdOYW1lc3BhY2VzOiBmdW5jdGlvbiBpc0ZldGNoaW5nTmFtZXNwYWNlcyhzdGF0ZSwgX2lzRmV0Y2hpbmdOYW1lc3BhY2VzKSB7CiAgICAgIHJldHVybiBWdWUuc2V0KHN0YXRlLCAnaXNGZXRjaGluZ05hbWVzcGFjZXMnLCBfaXNGZXRjaGluZ05hbWVzcGFjZXMpOwogICAgfSwKICAgIGxpbmtlZEFkZHJlc3M6IGZ1bmN0aW9uIGxpbmtlZEFkZHJlc3Moc3RhdGUsIF9saW5rZWRBZGRyZXNzKSB7CiAgICAgIHJldHVybiBWdWUuc2V0KHN0YXRlLCAnbGlua2VkQWRkcmVzcycsIF9saW5rZWRBZGRyZXNzKTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUoX3JlZjIpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdCwKICAgICAgICAgIGdldHRlcnMgPSBfcmVmMi5nZXR0ZXJzOwogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHZhciBjYWxsYmFjazsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBsYWNlaG9sZGVyIGZvciBpbml0aWFsaXphdGlvbiBpZiBuZWNlc3NhcnkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldEluaXRpYWxpemVkJywgdHJ1ZSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9OyAvLyBhcXVpcmUgYXN5bmMgbG9jayB1bnRpbCBpbml0aWFsaXplZAoKCiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gTG9jay5pbml0aWFsaXplKGNhbGxiYWNrLCB7CiAgICAgICAgICAgICAgICAgIGdldHRlcnM6IGdldHRlcnMKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CiAgICB9LAogICAgdW5pbml0aWFsaXplOiBmdW5jdGlvbiB1bmluaXRpYWxpemUoX3JlZjMpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwKICAgICAgICAgIGdldHRlcnMgPSBfcmVmMy5nZXR0ZXJzOwogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICB2YXIgY2FsbGJhY2s7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKF90aGlzMiwgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldEluaXRpYWxpemVkJywgZmFsc2UpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBMb2NrLnVuaW5pdGlhbGl6ZShjYWxsYmFjaywgewogICAgICAgICAgICAgICAgICBnZXR0ZXJzOiBnZXR0ZXJzCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpOwogICAgfSwKICAgIExPQURfTkFNRVNQQUNFUzogZnVuY3Rpb24gTE9BRF9OQU1FU1BBQ0VTKF9yZWY0KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmNC5jb21taXQsCiAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY0LnJvb3RHZXR0ZXJzOwogICAgICB2YXIgcmVwb3NpdG9yeUZhY3RvcnkgPSByb290R2V0dGVyc1snbmV0d29yay9yZXBvc2l0b3J5RmFjdG9yeSddOwogICAgICB2YXIgZ2VuZXJhdGlvbkhhc2ggPSByb290R2V0dGVyc1snbmV0d29yay9nZW5lcmF0aW9uSGFzaCddOwogICAgICB2YXIgbmFtZXNwYWNlU2VydmljZSA9IG5ldyBOYW1lc3BhY2VTZXJ2aWNlKCk7CiAgICAgIHZhciBjdXJyZW50U2lnbmVyQWRkcmVzcyA9IHJvb3RHZXR0ZXJzWydhY2NvdW50L2N1cnJlbnRTaWduZXJBZGRyZXNzJ107CiAgICAgIHZhciBuYW1lc3BhY2VNZXRhZGF0YUxpc3QgPSByb290R2V0dGVyc1snbWV0YWRhdGEvbmFtZXNwYWNlTWV0YWRhdGFMaXN0J107CgogICAgICBpZiAoIWN1cnJlbnRTaWduZXJBZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBjb21taXQoJ2lzRmV0Y2hpbmdOYW1lc3BhY2VzJywgdHJ1ZSk7CiAgICAgIG5hbWVzcGFjZVNlcnZpY2UuZ2V0TmFtZXNwYWNlcyhyZXBvc2l0b3J5RmFjdG9yeSwgZ2VuZXJhdGlvbkhhc2gsIFtjdXJyZW50U2lnbmVyQWRkcmVzc10pLnN1YnNjcmliZShmdW5jdGlvbiAobmFtZXNwYWNlcykgewogICAgICAgIGNvbW1pdCgnbmFtZXNwYWNlcycsIHsKICAgICAgICAgIG5hbWVzcGFjZXM6IG5hbWVzcGFjZXMsCiAgICAgICAgICBjdXJyZW50U2lnbmVyQWRkcmVzczogY3VycmVudFNpZ25lckFkZHJlc3MsCiAgICAgICAgICBuYW1lc3BhY2VNZXRhZGF0YUxpc3Q6IG5hbWVzcGFjZU1ldGFkYXRhTGlzdAogICAgICAgIH0pOwogICAgICB9KS5hZGQoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBjb21taXQoJ2lzRmV0Y2hpbmdOYW1lc3BhY2VzJywgZmFsc2UpOwogICAgICB9KTsKICAgIH0sCiAgICBSRVNFVF9OQU1FU1BBQ0VTOiBmdW5jdGlvbiBSRVNFVF9OQU1FU1BBQ0VTKF9yZWY1KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmNS5jb21taXQ7CiAgICAgIHZhciBuYW1lc3BhY2VzID0gW107CiAgICAgIGNvbW1pdCgnbmFtZXNwYWNlcycsIHsKICAgICAgICBuYW1lc3BhY2VzOiBuYW1lc3BhY2VzLAogICAgICAgIHVuZGVmaW5lZDogdW5kZWZpbmVkCiAgICAgIH0pOwogICAgfSwKICAgIEdFVF9MSU5LRURfQUREUkVTUzogZnVuY3Rpb24gR0VUX0xJTktFRF9BRERSRVNTKF9yZWY2LCBuYW1lc3BhY2VJZCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjYuY29tbWl0LAogICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmNi5yb290R2V0dGVyczsKICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgcmVwb3NpdG9yeUZhY3RvcnksIGdldExpbmtlZEFjY291bnRQcm9taXNlLCBsaW5rZWRBZGRyZXNzOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVwb3NpdG9yeUZhY3RvcnkgPSByb290R2V0dGVyc1snbmV0d29yay9yZXBvc2l0b3J5RmFjdG9yeSddOwogICAgICAgICAgICAgICAgZ2V0TGlua2VkQWNjb3VudFByb21pc2UgPSByZXBvc2l0b3J5RmFjdG9yeS5jcmVhdGVOYW1lc3BhY2VSZXBvc2l0b3J5KCkuZ2V0TGlua2VkQWRkcmVzcyhuYW1lc3BhY2VJZCkudG9Qcm9taXNlKCkuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCdsaW5rZWRBZGRyZXNzJywgbnVsbCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRMaW5rZWRBY2NvdW50UHJvbWlzZTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgbGlua2VkQWRkcmVzcyA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgY29tbWl0KCdsaW5rZWRBZGRyZXNzJywgbGlua2VkQWRkcmVzcyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKTsKICAgIH0sCiAgICBTSUdORVJfQ0hBTkdFRDogZnVuY3Rpb24gU0lHTkVSX0NIQU5HRUQoX3JlZjcpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY3LmNvbW1pdCwKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjcucm9vdEdldHRlcnMsCiAgICAgICAgICBnZXR0ZXJzID0gX3JlZjcuZ2V0dGVyczsKICAgICAgdmFyIG5hbWVzcGFjZXMgPSBnZXR0ZXJzWyduYW1lc3BhY2VzJ107CiAgICAgIHZhciBjdXJyZW50U2lnbmVyQWRkcmVzcyA9IHJvb3RHZXR0ZXJzWydhY2NvdW50L2N1cnJlbnRTaWduZXJBZGRyZXNzJ107CgogICAgICBpZiAoIWN1cnJlbnRTaWduZXJBZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBjb21taXQoJ25hbWVzcGFjZXMnLCB7CiAgICAgICAgbmFtZXNwYWNlczogbmFtZXNwYWNlcywKICAgICAgICBjdXJyZW50U2lnbmVyQWRkcmVzczogY3VycmVudFNpZ25lckFkZHJlc3MKICAgICAgfSk7CiAgICB9LAogICAgUkVTT0xWRV9OQU1FOiBmdW5jdGlvbiBSRVNPTFZFX05BTUUoX3JlZjgsIG5hbWVzcGFjZUlkKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmOC5jb21taXQsCiAgICAgICAgICBnZXR0ZXJzID0gX3JlZjguZ2V0dGVycywKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjgucm9vdEdldHRlcnM7CiAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIG5hbWVzcGFjZXMsIGtub3duTmFtZXNwYWNlLCByZXBvc2l0b3J5RmFjdG9yeSwgY3VycmVudFNpZ25lckFkZHJlc3MsIG5hbWVzcGFjZVJlcG9zaXRvcnksIG5hbWVzcGFjZUluZm8sIG5hbWVzcGFjZU5hbWUsIG1vZGVsOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKG5hbWVzcGFjZUlkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsICcnKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaWYgKCFuYW1lc3BhY2VJZC5mdWxsTmFtZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBuYW1lc3BhY2VJZC5mdWxsTmFtZSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMgPSBnZXR0ZXJzWyduYW1lc3BhY2VzJ107CiAgICAgICAgICAgICAgICBrbm93bk5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuZmluZChmdW5jdGlvbiAobikgewogICAgICAgICAgICAgICAgICByZXR1cm4gbi5uYW1lc3BhY2VJZEhleCA9PT0gbmFtZXNwYWNlSWQudG9IZXgoKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmICgha25vd25OYW1lc3BhY2UpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwga25vd25OYW1lc3BhY2UubmFtZSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJlcG9zaXRvcnlGYWN0b3J5ID0gcm9vdEdldHRlcnNbJ25ldHdvcmsvcmVwb3NpdG9yeUZhY3RvcnknXTsKICAgICAgICAgICAgICAgIGN1cnJlbnRTaWduZXJBZGRyZXNzID0gcm9vdEdldHRlcnNbJ2FjY291bnQvY3VycmVudFNpZ25lckFkZHJlc3MnXTsKICAgICAgICAgICAgICAgIG5hbWVzcGFjZVJlcG9zaXRvcnkgPSByZXBvc2l0b3J5RmFjdG9yeS5jcmVhdGVOYW1lc3BhY2VSZXBvc2l0b3J5KCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVzcGFjZVJlcG9zaXRvcnkuZ2V0TmFtZXNwYWNlKG5hbWVzcGFjZUlkKS50b1Byb21pc2UoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIG5hbWVzcGFjZUluZm8gPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXNwYWNlUmVwb3NpdG9yeS5nZXROYW1lc3BhY2VzTmFtZXMoW25hbWVzcGFjZUlkXSkudG9Qcm9taXNlKCk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBuYW1lc3BhY2VOYW1lID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICAvLyBOb3RlLCBmdWxsTmFtZSBtYXkgbm90IGJlIGZ1bGwuIEhvdyBjYW4gd2UgbG9hZCBpdCB3aXRob3V0IG5lZWRpbmcgdG8gbG9hZCBlYWNoIHBhcmVudCByZWN1cnNpdmVseT8uCiAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBOYW1lc3BhY2VNb2RlbChuYW1lc3BhY2VJbmZvLCBOYW1lc3BhY2VTZXJ2aWNlLmdldEZ1bGxOYW1lRnJvbU5hbWVzcGFjZU5hbWVzKG5hbWVzcGFjZU5hbWVbMF0sIG5hbWVzcGFjZU5hbWUpKTsKICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMucHVzaChtb2RlbCk7CiAgICAgICAgICAgICAgICBjb21taXQoJ25hbWVzcGFjZXMnLCB7CiAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZXM6IG5hbWVzcGFjZXMsCiAgICAgICAgICAgICAgICAgIGN1cnJlbnRTaWduZXJBZGRyZXNzOiBjdXJyZW50U2lnbmVyQWRkcmVzcwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgbW9kZWwubmFtZSk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Namespace.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, NamespaceId, RepositoryFactory } from 'symbol-sdk';\nimport Vue from 'vue';\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { NamespaceService } from '@/services/NamespaceService';\nimport { NamespaceModel } from '@/core/database/entities/NamespaceModel';\n\nimport * as _ from 'lodash';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\nimport { MetadataService } from '@/services/MetadataService';\n\nconst Lock = AwaitLock.create();\n\ninterface NamespaceState {\n    initialized: boolean;\n    namespaces: NamespaceModel[];\n    ownedNamespaces: NamespaceModel[];\n    isFetchingNamespaces: boolean;\n    linkedAddress: Address | null;\n}\n\nconst namespaceState: NamespaceState = {\n    initialized: false,\n    namespaces: [],\n    ownedNamespaces: [],\n    isFetchingNamespaces: false,\n    linkedAddress: null,\n};\n\nexport default {\n    namespaced: true,\n    state: namespaceState,\n    getters: {\n        getInitialized: (state: NamespaceState) => state.initialized,\n        namespaces: (state: NamespaceState) => state.namespaces,\n        ownedNamespaces: (state: NamespaceState) => state.ownedNamespaces,\n        isFetchingNamespaces: (state: NamespaceState) => state.isFetchingNamespaces,\n        linkedAddress: (state: NamespaceState) => state.linkedAddress,\n    },\n    mutations: {\n        setInitialized: (state: NamespaceState, initialized) => {\n            state.initialized = initialized;\n        },\n        namespaces: (\n            state: NamespaceState,\n            {\n                namespaces,\n                currentSignerAddress,\n                namespaceMetadataList,\n            }: { namespaces: NamespaceModel[]; currentSignerAddress: Address; namespaceMetadataList: MetadataModel[] },\n        ) => {\n            const uniqueNamespaces = _.uniqBy(namespaces, (n) => n.namespaceIdHex).map((namespace) => {\n                namespace.metadataList = MetadataService.getMosaicMetadataByTargetId(namespaceMetadataList, namespace.namespaceIdHex);\n                return namespace;\n            });\n            Vue.set(state, 'namespaces', uniqueNamespaces);\n            Vue.set(\n                state,\n                'ownedNamespaces',\n                uniqueNamespaces.filter((n) => n.ownerAddressRawPlain === currentSignerAddress.plain()),\n            );\n        },\n        isFetchingNamespaces: (state: NamespaceState, isFetchingNamespaces: boolean) =>\n            Vue.set(state, 'isFetchingNamespaces', isFetchingNamespaces),\n        linkedAddress: (state: NamespaceState, linkedAddress: Address | null) => Vue.set(state, 'linkedAddress', linkedAddress),\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                // Placeholder for initialization if necessary.\n                commit('setInitialized', true);\n            };\n            // aquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n\n        async uninitialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        LOAD_NAMESPACES({ commit, rootGetters }) {\n            const repositoryFactory = rootGetters['network/repositoryFactory'];\n            const generationHash = rootGetters['network/generationHash'];\n            const namespaceService = new NamespaceService();\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            const namespaceMetadataList: MetadataModel[] = rootGetters['metadata/namespaceMetadataList'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            commit('isFetchingNamespaces', true);\n            namespaceService\n                .getNamespaces(repositoryFactory, generationHash, [currentSignerAddress])\n                .subscribe((namespaces) => {\n                    commit('namespaces', { namespaces, currentSignerAddress, namespaceMetadataList });\n                })\n                .add(() => commit('isFetchingNamespaces', false));\n        },\n\n        RESET_NAMESPACES({ commit }) {\n            const namespaces: NamespaceModel[] = [];\n            commit('namespaces', { namespaces, undefined });\n        },\n\n        async GET_LINKED_ADDRESS({ commit, rootGetters }, namespaceId: NamespaceId) {\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const getLinkedAccountPromise = repositoryFactory\n                .createNamespaceRepository()\n                .getLinkedAddress(namespaceId)\n                .toPromise()\n                .catch(() => commit('linkedAddress', null));\n            const linkedAddress = await getLinkedAccountPromise;\n\n            commit('linkedAddress', linkedAddress);\n        },\n\n        SIGNER_CHANGED({ commit, rootGetters, getters }) {\n            const namespaces: NamespaceModel[] = getters['namespaces'];\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            commit('namespaces', { namespaces, currentSignerAddress });\n        },\n\n        async RESOLVE_NAME({ commit, getters, rootGetters }, namespaceId: NamespaceId): Promise<string> {\n            if (!namespaceId) {\n                return '';\n            }\n\n            if (namespaceId.fullName) {\n                return namespaceId.fullName;\n            }\n            const namespaces: NamespaceModel[] = getters['namespaces'];\n            const knownNamespace = namespaces.find((n) => n.namespaceIdHex === namespaceId.toHex());\n            if (knownNamespace) {\n                return knownNamespace.name;\n            }\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const currentSignerAddress = rootGetters['account/currentSignerAddress'] as Address;\n            const namespaceRepository = repositoryFactory.createNamespaceRepository();\n\n            const namespaceInfo = await namespaceRepository.getNamespace(namespaceId).toPromise();\n\n            // map by hex if names available\n            const namespaceName = await namespaceRepository.getNamespacesNames([namespaceId]).toPromise();\n\n            // Note, fullName may not be full. How can we load it without needing to load each parent recursively?.\n            const model = new NamespaceModel(\n                namespaceInfo,\n                NamespaceService.getFullNameFromNamespaceNames(namespaceName[0], namespaceName),\n            );\n            namespaces.push(model);\n            commit('namespaces', { namespaces, currentSignerAddress });\n            return model.name;\n        },\n    },\n};\n"],"sourceRoot":""}]}
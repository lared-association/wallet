{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/TransactionFilterService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/TransactionFilterService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCi8qKgogKiBUcmFuc2FjdGlvbkZpbHRlciB1c2VkIGZvciBmaWx0ZXJpbmcgdHJhbnNhY3Rpb25zIGJ5IGdyb3VwIGFuZCBzZW50IHN0YXR1cy4KICovCmV4cG9ydCB2YXIgVHJhbnNhY3Rpb25GaWx0ZXJTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBUcmFuc2FjdGlvbkZpbHRlclNlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNhY3Rpb25GaWx0ZXJTZXJ2aWNlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhUcmFuc2FjdGlvbkZpbHRlclNlcnZpY2UsIG51bGwsIFt7CiAgICBrZXk6ICJmaWx0ZXIiLAoKICAgIC8qKgogICAgICogRmlsdGVycyB0cmFuc2FjdGlvbnMgZGVwZW5kcyBvbiBzZWxlY3RlZCBmaWx0ZXIgb3B0aW9ucy4KICAgICAqIEBwYXJhbSBzdGF0ZSBmb3IgZXh0cmFjdGluZyB0cmFuc2FjdGlvbnMgZmlsdGVyIG9wdGlvbnMgYW5kIGxpc3QgZmlsdGVyZWQgYnkgZ3JvdXAuCiAgICAgKiBAcGFyYW0gY3VycmVudFNpZ25lckFkZHJlc3Mgc2VsZWN0ZWQgc2lnbmVyIGFkZHJlc3MKICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlcihzdGF0ZSwgY3VycmVudFNpZ25lckFkZHJlc3MpIHsKICAgICAgdmFyIGZpbHRlck9wdGlvbnMgPSBzdGF0ZS5maWx0ZXJPcHRpb25zLAogICAgICAgICAgdHJhbnNhY3Rpb25zID0gc3RhdGUudHJhbnNhY3Rpb25zLAogICAgICAgICAgY29uZmlybWVkVHJhbnNhY3Rpb25zID0gc3RhdGUuY29uZmlybWVkVHJhbnNhY3Rpb25zLAogICAgICAgICAgdW5jb25maXJtZWRUcmFuc2FjdGlvbnMgPSBzdGF0ZS51bmNvbmZpcm1lZFRyYW5zYWN0aW9ucywKICAgICAgICAgIHBhcnRpYWxUcmFuc2FjdGlvbnMgPSBzdGF0ZS5wYXJ0aWFsVHJhbnNhY3Rpb25zOwoKICAgICAgaWYgKCFmaWx0ZXJPcHRpb25zLmlzRmlsdGVyU2hvdWxkQmVBcHBsaWVkKSB7CiAgICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheSh0cmFuc2FjdGlvbnMpOwogICAgICB9CgogICAgICB2YXIgbWFpbkZpbHRlckdyb3VwID0gW2ZpbHRlck9wdGlvbnMuaXNDb25maXJtZWRTZWxlY3RlZCwgZmlsdGVyT3B0aW9ucy5pc1VuY29uZmlybWVkU2VsZWN0ZWQsIGZpbHRlck9wdGlvbnMuaXNQYXJ0aWFsU2VsZWN0ZWRdOyAvLyBJbmRpY2F0ZXMgaWYgYWxsIGNoZWNrYm94ZXMgaW4gbWFpbiBncm91cCBzZWxlY3RlZCBvciB1bnNlbGVjdGVkCgogICAgICB2YXIgYXJlQWxsR3JvdXBSZXN1bHRzU2hvd24gPSBtYWluRmlsdGVyR3JvdXAuZXZlcnkoZnVuY3Rpb24gKG9wdGlvbikgewogICAgICAgIHJldHVybiBvcHRpb247CiAgICAgIH0pIHx8IG1haW5GaWx0ZXJHcm91cC5ldmVyeShmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgcmV0dXJuICFvcHRpb247CiAgICAgIH0pOwogICAgICB2YXIgcmVzdWx0ID0gYXJlQWxsR3JvdXBSZXN1bHRzU2hvd24gPyBfdG9Db25zdW1hYmxlQXJyYXkodHJhbnNhY3Rpb25zKSA6IFtdOwoKICAgICAgaWYgKCFhcmVBbGxHcm91cFJlc3VsdHNTaG93bikgewogICAgICAgIGlmIChmaWx0ZXJPcHRpb25zLmlzUGFydGlhbFNlbGVjdGVkKSB7CiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHBhcnRpYWxUcmFuc2FjdGlvbnMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGZpbHRlck9wdGlvbnMuaXNVbmNvbmZpcm1lZFNlbGVjdGVkKSB7CiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHVuY29uZmlybWVkVHJhbnNhY3Rpb25zKTsKICAgICAgICB9CgogICAgICAgIGlmIChmaWx0ZXJPcHRpb25zLmlzQ29uZmlybWVkU2VsZWN0ZWQpIHsKICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY29uZmlybWVkVHJhbnNhY3Rpb25zKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmZpbHRlckJ5UmVjZXBpZW50KHJlc3VsdCwgZmlsdGVyT3B0aW9ucywgY3VycmVudFNpZ25lckFkZHJlc3MpOwogICAgfQogICAgLyoqCiAgICAgKiBGaWx0ZXJzIHRyYW5zYWN0aW9ucyBkZXBlbmRzIG9uIHNlbGVjdGVkIHNlbnQgc3RhdHVzIGZpbHRlciBvcHRpb25zLgogICAgICogQHBhcmFtIHRyYW5zYWN0aW9ucwogICAgICogQHBhcmFtIGZpbHRlck9wdGlvbnMKICAgICAqIEBwYXJhbSBjdXJyZW50U2lnbmVyQWRkcmVzcyBzZWxlY3RlZCBzaWduZXIgYWRkcmVzcwogICAgICovCgogIH0sIHsKICAgIGtleTogImZpbHRlckJ5UmVjZXBpZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJCeVJlY2VwaWVudCh0cmFuc2FjdGlvbnMsIGZpbHRlck9wdGlvbnMsIGN1cnJlbnRTaWduZXJBZGRyZXNzKSB7CiAgICAgIHZhciByZWNlcGllbnRGaWx0ZXJPcHRpb25zID0gW2ZpbHRlck9wdGlvbnMuaXNTZW50U2VsZWN0ZWQsIGZpbHRlck9wdGlvbnMuaXNSZWNlaXZlZFNlbGVjdGVkXTsKICAgICAgdmFyIGFyZUFsbFNob3VsZEJlU2hvd24gPSByZWNlcGllbnRGaWx0ZXJPcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvcHRpb24pIHsKICAgICAgICByZXR1cm4gIW9wdGlvbjsKICAgICAgfSk7CgogICAgICBpZiAoYXJlQWxsU2hvdWxkQmVTaG93bikgewogICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnM7CiAgICAgIH0KCiAgICAgIHZhciBhcmVBbGxXaXRoUmVjZXBpZW50U2hvdWxkQmVTaG93biA9IHJlY2VwaWVudEZpbHRlck9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG9wdGlvbikgewogICAgICAgIHJldHVybiBvcHRpb247CiAgICAgIH0pOwoKICAgICAgaWYgKGFyZUFsbFdpdGhSZWNlcGllbnRTaG91bGRCZVNob3duKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7CiAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24ucmVjaXBpZW50QWRkcmVzcyAmJiB0cmFuc2FjdGlvbi5yZWNpcGllbnRBZGRyZXNzLmFkZHJlc3M7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cmFuc2FjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh0cmFuc2FjdGlvbikgewogICAgICAgIGlmICh0cmFuc2FjdGlvbi5yZWNpcGllbnRBZGRyZXNzICYmIHRyYW5zYWN0aW9uLnJlY2lwaWVudEFkZHJlc3MuYWRkcmVzcykgewogICAgICAgICAgaWYgKGZpbHRlck9wdGlvbnMuaXNTZW50U2VsZWN0ZWQpIHsKICAgICAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnNpZ25lcikgewogICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbi5zaWduZXIuYWRkcmVzcy5wbGFpbigpID09PSBjdXJyZW50U2lnbmVyQWRkcmVzczsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChmaWx0ZXJPcHRpb25zLmlzUmVjZWl2ZWRTZWxlY3RlZCkgewogICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24ucmVjaXBpZW50QWRkcmVzcy5hZGRyZXNzID09PSBjdXJyZW50U2lnbmVyQWRkcmVzczsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRyYW5zYWN0aW9uRmlsdGVyU2VydmljZTsKfSgpOw=="},{"version":3,"sources":["/home/hero/lared-wallet/src/services/TransactionFilterService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { Transaction } from 'symbol-sdk';\nimport { TransactionFilterOptionsState, TransactionState } from '@/store/Transaction';\n\n/**\n * TransactionFilter used for filtering transactions by group and sent status.\n */\nexport class TransactionFilterService {\n    /**\n     * Filters transactions depends on selected filter options.\n     * @param state for extracting transactions filter options and list filtered by group.\n     * @param currentSignerAddress selected signer address\n     */\n    public static filter(state: TransactionState, currentSignerAddress: string): Transaction[] {\n        const { filterOptions, transactions, confirmedTransactions, unconfirmedTransactions, partialTransactions } = state;\n        if (!filterOptions.isFilterShouldBeApplied) {\n            return [...transactions];\n        }\n\n        const mainFilterGroup = [filterOptions.isConfirmedSelected, filterOptions.isUnconfirmedSelected, filterOptions.isPartialSelected];\n        // Indicates if all checkboxes in main group selected or unselected\n        const areAllGroupResultsShown = mainFilterGroup.every((option) => option) || mainFilterGroup.every((option) => !option);\n\n        let result: Transaction[] = areAllGroupResultsShown ? [...transactions] : [];\n\n        if (!areAllGroupResultsShown) {\n            if (filterOptions.isPartialSelected) {\n                result = result.concat(partialTransactions);\n            }\n            if (filterOptions.isUnconfirmedSelected) {\n                result = result.concat(unconfirmedTransactions);\n            }\n            if (filterOptions.isConfirmedSelected) {\n                result = result.concat(confirmedTransactions);\n            }\n        }\n\n        return this.filterByRecepient(result, filterOptions, currentSignerAddress);\n    }\n\n    /**\n     * Filters transactions depends on selected sent status filter options.\n     * @param transactions\n     * @param filterOptions\n     * @param currentSignerAddress selected signer address\n     */\n    private static filterByRecepient(\n        transactions: Transaction[],\n        filterOptions: TransactionFilterOptionsState,\n        currentSignerAddress: string,\n    ): Transaction[] {\n        const recepientFilterOptions = [filterOptions.isSentSelected, filterOptions.isReceivedSelected];\n        const areAllShouldBeShown: boolean = recepientFilterOptions.every((option) => !option);\n        if (areAllShouldBeShown) {\n            return transactions;\n        }\n\n        const areAllWithRecepientShouldBeShown: boolean = recepientFilterOptions.every((option) => option);\n        if (areAllWithRecepientShouldBeShown) {\n            return transactions.filter((transaction) => {\n                return (transaction as any).recipientAddress && (transaction as any).recipientAddress.address;\n            });\n        }\n\n        return transactions.filter((transaction) => {\n            if ((transaction as any).recipientAddress && (transaction as any).recipientAddress.address) {\n                if (filterOptions.isSentSelected) {\n                    if ((transaction as any).signer) {\n                        return (transaction as any).signer.address.plain() === currentSignerAddress;\n                    }\n                }\n\n                if (filterOptions.isReceivedSelected) {\n                    return (transaction as any).recipientAddress.address === currentSignerAddress;\n                }\n            }\n        });\n    }\n}\n"],"sourceRoot":""}]}
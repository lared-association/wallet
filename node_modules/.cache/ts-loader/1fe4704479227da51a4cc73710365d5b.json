{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/ApprovalAndRemovalInput/ApprovalAndRemovalInputTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/ApprovalAndRemovalInput/ApprovalAndRemovalInputTs.ts","mtime":1606213958953},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/components/ApprovalAndRemovalInput/ApprovalAndRemovalInputTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { MultisigAccountInfo } from 'symbol-sdk';\n// internal dependencies\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\n// child components\nimport { ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// configuration\nimport { mapGetters } from 'vuex';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\n\n@Component({\n    components: {\n        ValidationProvider,\n        ErrorTooltip,\n        FormRow,\n    },\n    computed: {\n        ...mapGetters({\n            networkConfiguration: 'network/networkConfiguration',\n        }),\n    },\n})\nexport class ApprovalAndRemovalInputTs extends Vue {\n    /**\n     * Value bound to the form v-model\n     * @type {number}\n     */\n    @Prop({\n        default: '',\n    })\n    value: number;\n\n    /**\n     * Type of multisig account modification operation\n     * @type {('conversion' | 'modification')}\n     */\n    @Prop({\n        default: 'conversion',\n    })\n    operation: 'conversion' | 'modification';\n\n    /**\n     * Type of field\n     * @type {('approval' | 'removal')}\n     */\n    @Prop({\n        default: 'approval',\n    })\n    type: 'approval' | 'removal';\n\n    /**\n     * Current min approval or mun removal value of the target account\n     * @type {number}\n     */\n    @Prop({\n        default: null,\n    })\n    multisig: MultisigAccountInfo;\n\n    private networkConfiguration: NetworkConfigurationModel;\n\n    /// region computed properties getter/setter\n    /**\n     * Gets the input value from the value prop\n     * @protected\n     * @type {number}\n     */\n    protected get chosenValue(): number {\n        return this.value;\n    }\n\n    /**\n     * Emits input value change to the parent\n     * @protected\n     */\n    protected set chosenValue(amount: number) {\n        this.$emit('input', amount);\n    }\n\n    /**\n     * Form label\n     * @readonly\n     * @protected\n     * @type {string}\n     */\n    protected get label(): string {\n        return this.type === 'approval' ? 'form_label_new_min_approval' : 'form_label_new_min_removal';\n    }\n\n    protected get description(): string {\n        return this.type === 'approval' ? 'form_label_description_min_approval' : 'form_label_description_min_removal';\n    }\n\n    /**\n     * Current minApproval or minRemoval of the target account\n     * @readonly\n     * @protected\n     * @type {number}\n     */\n    protected get currentValue(): number {\n        if (!this.multisig) {\n            return 0;\n        }\n        if (this.type === 'approval') {\n            return this.multisig.minApproval;\n        }\n        return this.multisig.minRemoval;\n    }\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    protected validationRules = ValidationRuleset;\n\n    /**\n     * Available input choices\n     * @readonly\n     * @protected\n     * @type {{label: string, value: number}}\n     */\n    protected get deltaOptions(): { value: number; newDelta: number }[] {\n        // For an account conversion, the minimum delta is 1\n        const isConversion = this.operation === 'conversion';\n\n        // minimum possible delta\n        const maxCosignatoriesPerAccount = this.networkConfiguration.maxCosignatoriesPerAccount;\n        const minDelta = isConversion ? 1 : 0 - this.currentValue;\n\n        return [...Array(maxCosignatoriesPerAccount).keys()].map((index: number) => {\n            const delta = minDelta + index;\n            const newValue = this.currentValue + delta;\n            return { value: delta, newDelta: newValue };\n        });\n    }\n\n    /// end-region computed properties getter/setter\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormMetadataCreation/FormMetadataCreationTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormMetadataCreation/FormMetadataCreationTs.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormMetadataCreation/FormMetadataCreationTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, MetadataType, PublicAccount, RepositoryFactory, Transaction } from 'symbol-sdk';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport MaxFeeSelector from '@/components/MaxFeeSelector/MaxFeeSelector.vue';\n// @ts-ignore\nimport MosaicSelector from '@/components/MosaicSelector/MosaicSelector.vue';\n// @ts-ignore\nimport NamespaceSelector from '@/components/NamespaceSelector/NamespaceSelector.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n\nimport { TransactionCommandMode } from '@/services/TransactionCommand';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { NamespaceModel } from '@/core/database/entities/NamespaceModel';\nimport { AddressValidator } from '@/core/validation/validators';\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\n\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\nimport { Component, Prop } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        MaxFeeSelector,\n        MosaicSelector,\n        NamespaceSelector,\n        MaxFeeAndSubmit,\n        FormWrapper,\n        FormRow,\n        ModalTransactionConfirmation,\n        SignerSelector,\n    },\n    computed: {\n        ...mapGetters({\n            knownAccounts: 'account/knownAccounts',\n            ownedMosaics: 'mosaic/ownedMosaics',\n            ownedNamespaces: 'namespace/ownedNamespaces',\n            repositoryFactory: 'network/repositoryFactory',\n            metadataTransactions: 'metadata/transactions',\n        }),\n    },\n})\nexport class FormMetadataCreationTs extends FormTransactionBase {\n    /**\n     * Metadata type\n     * @type {MetadataType}\n     */\n    @Prop({\n        default: MetadataType.Account,\n        required: true,\n    })\n    protected type: MetadataType;\n\n    /**\n     * Metadata type\n     */\n    protected MetadataType = MetadataType;\n\n    /**\n     * Repository factory for metadata transaction service\n     */\n    protected repositoryFactory: RepositoryFactory;\n\n    /**\n     * metadata transactions\n     */\n    protected metadataTransactions: Transaction[];\n\n    /**\n     * Form fields\n     * @var {Object}\n     */\n    public formItems = {\n        signerAddress: '',\n        targetAccount: '',\n        targetId: '',\n        metadataValue: '',\n        maxFee: 0,\n    };\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Known accounts\n     * @protected\n     * @var {AccountModel[]}\n     */\n    protected knownAccounts: AccountModel[];\n\n    /**\n     * Current account owned mosaics\n     * @protected\n     * @type {MosaicModel[]}\n     */\n    protected ownedMosaics: MosaicModel[];\n\n    /**\n     * Current account owned namespaces\n     * @protected\n     * @type {NamespaceModel[]}\n     */\n    protected ownedNamespaces: NamespaceModel[];\n\n    /**\n     * Mosaic check\n     * @return {boolean}\n     */\n    protected isMosaic(): boolean {\n        return this.type === MetadataType.Mosaic;\n    }\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        this.formItems.signerAddress = this.selectedSigner ? this.selectedSigner.address.plain() : this.currentAccount.address;\n\n        // - set default form values\n        this.formItems.metadataValue = '';\n        this.formItems.metadataValue = '';\n\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n    }\n\n    /**\n     * get transaction command mode\n     * @override\n     * @see {FormTransactionBase}\n     * @param transactions\n     */\n    protected getTransactionCommandMode(): TransactionCommandMode {\n        const target = this.getTargetAddress().plain();\n        if (this.selectedSigner.multisig) {\n            return TransactionCommandMode.MULTISIGN;\n        } else if (this.formItems.signerAddress === target) {\n            return TransactionCommandMode.AGGREGATE;\n        } else if (this.isMultisigAccount) {\n            // multisig mode\n        } else {\n            return TransactionCommandMode.MULTISIGN;\n        }\n    }\n\n    /**\n     * get transactions\n     * @see {FormTransactionBase}\n     */\n    public getTransactions() {\n        return this.metadataTransactions;\n    }\n\n    /**\n     * @override\n     * @see {FormTransactionBase}\n     */\n    public async onSubmit() {\n        await this.persistFormState();\n\n        // - open signature modal\n        this.command = this.createTransactionCommand();\n        this.onShowConfirmationModal();\n    }\n\n    /**\n     * Modal title from modal type\n     * @type {string}\n     */\n    get modalTitle(): string {\n        let title: string = '';\n        switch (this.type) {\n            case MetadataType.Mosaic:\n                title = 'modal_title_mosaic_metadata';\n                break;\n\n            case MetadataType.Namespace:\n                title = 'modal_title_namespace_metadata';\n                break;\n\n            default:\n                title = 'modal_title_account_metadata';\n                break;\n        }\n        return title;\n    }\n\n    /**\n     * Target account or public key label depends on MetadataType\n     * @param {void}\n     * @returns {string}\n     */\n    get targetLabel(): string {\n        let title: string = '';\n        switch (this.type) {\n            case MetadataType.Mosaic:\n                title = 'form_label_target_mosaic_id';\n                break;\n\n            case MetadataType.Namespace:\n                title = 'form_label_target_namespace_id';\n                break;\n        }\n        return title;\n    }\n\n    /**\n     * Target id validator name\n     * @return {string}\n     */\n    get targetIdValidatorName(): string {\n        return this.isMosaic() ? 'mosaic_id' : 'namespace_id';\n    }\n\n    get ownedTargetHexIds(): string[] {\n        return this.type === MetadataType.Namespace\n            ? this.ownedNamespaces.map(({ namespaceIdHex }) => namespaceIdHex)\n            : this.ownedMosaics\n                  .filter(({ ownerRawPlain }) => ownerRawPlain === this.currentAccount.address)\n                  .map(({ mosaicIdHex }) => mosaicIdHex);\n    }\n\n    private async persistFormState() {\n        const targetAddress: Address = this.getTargetAddress();\n        const metadataForm: {\n            targetAddress: Address;\n            metadataValue: string;\n            targetId: string;\n            maxFee: number;\n        } = {\n            targetAddress,\n            metadataValue: this.formItems.metadataValue,\n            targetId: this.formItems.targetId,\n            maxFee: this.formItems.maxFee,\n        };\n\n        await this.$store.dispatch('metadata/SET_METADATA_FORM_STATE', metadataForm);\n        await this.$store.dispatch('metadata/RESOLVE_METADATA_TRANSACTIONS', this.type);\n    }\n\n    private getTargetAddress(): Address {\n        let targetAddress: Address;\n        if (AddressValidator.validate(this.formItems.targetAccount)) {\n            targetAddress = Address.createFromRawAddress(this.formItems.targetAccount);\n        } else {\n            const targetPublicAccount = PublicAccount.createFromPublicKey(this.formItems.targetAccount, this.networkType);\n            targetAddress = targetPublicAccount.address;\n        }\n\n        return targetAddress;\n    }\n\n    /**\n     * Whether form has any changes\n     * @readonly\n     * @return {boolean}\n     */\n    public get hasFormAnyChanges(): boolean {\n        return (\n            this.formItems.signerAddress.length > 0 || this.formItems.targetAccount.length > 0 || this.formItems.metadataValue.length > 0\n        );\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AmountInput/AmountInputTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AmountInput/AmountInputTs.ts","mtime":1611927201720},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKLyoKICogQ29weXJpZ2h0IDIwMjAgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwoKaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUsIFByb3AgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsgLy8gaW50ZXJuYWwgZGVwZW5kZW5jaWVzCgppbXBvcnQgeyBjcmVhdGVWYWxpZGF0aW9uUnVsZVNldCB9IGZyb20gJ0AvY29yZS92YWxpZGF0aW9uL1ZhbGlkYXRpb25SdWxlc2V0JzsgLy8gY2hpbGQgY29tcG9uZW50cwoKaW1wb3J0IHsgVmFsaWRhdGlvblByb3ZpZGVyIH0gZnJvbSAndmVlLXZhbGlkYXRlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IEVycm9yVG9vbHRpcCBmcm9tICdAL2NvbXBvbmVudHMvRXJyb3JUb29sdGlwL0Vycm9yVG9vbHRpcC52dWUnOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IG5ldHdvcmtDb25maWcgfSBmcm9tICdAL2NvbmZpZyc7Cgp2YXIgQW1vdW50SW5wdXRUcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhBbW91bnRJbnB1dFRzLCBfVnVlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBbW91bnRJbnB1dFRzKTsKCiAgZnVuY3Rpb24gQW1vdW50SW5wdXRUcygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbW91bnRJbnB1dFRzKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQW1vdW50SW5wdXRUcywgW3sKICAgIGtleTogImNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvLyB1cGRhdGUgdmFsaWRhdGlvbiBydWxlIHRvIHJlZmxlY3QgY29ycmVjdCBtb3NhaWMgZGl2aXNpYmlsaXR5CiAgICAgIHZhciBjaG9zZW5Nb3NhaWMgPSB0aGlzLm1vc2FpY3MuZmluZChmdW5jdGlvbiAobW9zYWljKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm1vc2FpY0hleCA9PT0gbW9zYWljLm1vc2FpY0lkSGV4OwogICAgICB9KTsKICAgICAgdmFyIG5ldHdvcmtDb25maWd1cmF0aW9uRGVmYXVsdHMgPSBuZXR3b3JrQ29uZmlnLm5ldHdvcmtDb25maWd1cmF0aW9uRGVmYXVsdHM7CiAgICAgIG5ldHdvcmtDb25maWd1cmF0aW9uRGVmYXVsdHMubWF4TW9zYWljRGl2aXNpYmlsaXR5ID0gY2hvc2VuTW9zYWljID8gY2hvc2VuTW9zYWljLmRpdmlzaWJpbGl0eSA6IDY7IC8vIHNldCB2YWxpZGF0aW9uIHJ1bGVzIGZvciB0aGlzIGZpZWxkCgogICAgICB0aGlzLnZhbGlkYXRpb25SdWxlcyA9IGNyZWF0ZVZhbGlkYXRpb25SdWxlU2V0KG5ldHdvcmtDb25maWd1cmF0aW9uRGVmYXVsdHMpOwogICAgfSAvLy8gcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgoKICB9LCB7CiAgICBrZXk6ICJyZWxhdGl2ZVZhbHVlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy52YWx1ZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChhbW91bnQpIHsKICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBhbW91bnQpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFtb3VudElucHV0VHM7Cn0oVnVlKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogIGRlZmF1bHQ6ICcnCn0pXSwgQW1vdW50SW5wdXRUcy5wcm90b3R5cGUsICJ2YWx1ZSIsIHZvaWQgMCk7CgpfX2RlY29yYXRlKFtQcm9wKHsKICBkZWZhdWx0OiAnJwp9KV0sIEFtb3VudElucHV0VHMucHJvdG90eXBlLCAibW9zYWljSGV4Iiwgdm9pZCAwKTsKCkFtb3VudElucHV0VHMgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHsKICAgIFZhbGlkYXRpb25Qcm92aWRlcjogVmFsaWRhdGlvblByb3ZpZGVyLAogICAgRXJyb3JUb29sdGlwOiBFcnJvclRvb2x0aXAKICB9LAogIGNvbXB1dGVkOiBPYmplY3QuYXNzaWduKHt9LCBtYXBHZXR0ZXJzKHsKICAgIG1vc2FpY3M6ICdtb3NhaWMvbW9zYWljcycKICB9KSkKfSldLCBBbW91bnRJbnB1dFRzKTsKZXhwb3J0IHsgQW1vdW50SW5wdXRUcyB9Ow=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AmountInput/AmountInputTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,SAAT,EAAoB,GAApB,EAAyB,IAAzB,QAAqC,wBAArC,C,CAEA;;AACA,SAAS,uBAAT,QAAwC,qCAAxC,C,CAEA;;AACA,SAAS,kBAAT,QAAmC,cAAnC,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,SAAS,UAAT,QAA2B,MAA3B;AAEA,SAAS,aAAT,QAA8B,UAA9B;;AAaA,IAAa,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,8BAeW;AAAA;;AACH;AACA,UAAM,YAAY,GAAG,KAAK,OAAL,CAAa,IAAb,CAAkB,UAAC,MAAD;AAAA,eAAY,KAAI,CAAC,SAAL,KAAmB,MAAM,CAAC,WAAtC;AAAA,OAAlB,CAArB;AACA,UAAM,4BAA4B,GAAG,aAAa,CAAC,4BAAnD;AACA,MAAA,4BAA4B,CAAC,qBAA7B,GAAqD,YAAY,GAAG,YAAY,CAAC,YAAhB,GAA+B,CAAhG,CAJG,CAMH;;AACA,WAAK,eAAL,GAAuB,uBAAuB,CAAC,4BAAD,CAA9C;AACH,KAvBL,CAyBI;;AAzBJ;AAAA;AAAA,wBA0B4B;AACpB,aAAO,KAAK,KAAZ;AACH,KA5BL;AAAA,sBA8B6B,MA9B7B,EA8B2C;AACnC,WAAK,KAAL,CAAW,OAAX,EAAoB,MAApB;AACH;AAhCL;;AAAA;AAAA,EAAmC,GAAnC,CAAA;;AAC2B,UAAA,CAAA,CAAtB,IAAI,CAAC;AAAE,EAAA,OAAO,EAAE;AAAX,CAAD,CAAkB,CAAA,E,uBAAA,E,OAAA,E,KAAc,CAAd,CAAA;;AACA,UAAA,CAAA,CAAtB,IAAI,CAAC;AAAE,EAAA,OAAO,EAAE;AAAX,CAAD,CAAkB,CAAA,E,uBAAA,E,WAAA,E,KAAkB,CAAlB,CAAA;;AAFd,aAAa,GAAA,UAAA,CAAA,CAXzB,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AACR,IAAA,kBAAkB,EAAlB,kBADQ;AAER,IAAA,YAAY,EAAZ;AAFQ,GADL;AAKP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,OAAO,EAAE;AADC,GAAD,CADT;AALD,CAAD,CAWgB,CAAA,EAAb,aAAa,CAAb;SAAA,a","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue, Prop } from 'vue-property-decorator';\n\n// internal dependencies\nimport { createValidationRuleSet } from '@/core/validation/ValidationRuleset';\n\n// child components\nimport { ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\nimport { mapGetters } from 'vuex';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { networkConfig } from '@/config';\n\n@Component({\n    components: {\n        ValidationProvider,\n        ErrorTooltip,\n    },\n    computed: {\n        ...mapGetters({\n            mosaics: 'mosaic/mosaics',\n        }),\n    },\n})\nexport class AmountInputTs extends Vue {\n    @Prop({ default: '' }) value: string;\n    @Prop({ default: '' }) mosaicHex: string;\n\n    /**\n     * Available mosaics models\n     */\n    public mosaics: MosaicModel[];\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules;\n\n    created() {\n        // update validation rule to reflect correct mosaic divisibility\n        const chosenMosaic = this.mosaics.find((mosaic) => this.mosaicHex === mosaic.mosaicIdHex);\n        const networkConfigurationDefaults = networkConfig.networkConfigurationDefaults;\n        networkConfigurationDefaults.maxMosaicDivisibility = chosenMosaic ? chosenMosaic.divisibility : 6;\n\n        // set validation rules for this field\n        this.validationRules = createValidationRuleSet(networkConfigurationDefaults);\n    }\n\n    /// region computed properties getter/setter\n    public get relativeValue(): string {\n        return this.value;\n    }\n\n    public set relativeValue(amount: string) {\n        this.$emit('input', amount);\n    }\n    /// end-region computed properties getter/setter\n}\n"],"sourceRoot":""}]}
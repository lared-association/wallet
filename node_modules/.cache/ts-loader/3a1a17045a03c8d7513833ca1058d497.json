{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/CommunityService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/CommunityService.ts","mtime":1611927227362},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL21udC9jL1VzZXJzL2p1c3RpL0Rlc2t0b3AvU1VQRVJIT1cvU3ltYm9sV2FsbGV0L2xhcmVkLXdhbGxldC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IiOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmltcG9ydCB7IF9fYXdhaXRlciB9IGZyb20gInRzbGliIjsKLyoKICogQ29weXJpZ2h0IDIwMjAgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwoKaW1wb3J0IFJTU1BhcnNlciBmcm9tICdyc3MtcGFyc2VyJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsgLy8gY29uZmlndXJhdGlvbgoKaW1wb3J0IHsgYXBwQ29uZmlnIH0gZnJvbSAnQC9jb25maWcnOyAvLy8gcmVnaW9uIHByb3RlY3RlZCBoZWxwZXJzCgovKioKICogUmVxdWVzdCBleHRlcm5hbCBmZWVkIGRhdGEKICogQGludGVybmFsCiAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0KICovCgp2YXIgcmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoKSB7CiAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICB2YXIgZmVlZFVybCwgcmVzcG9uc2U7CiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBmZWVkVXJsID0gYXBwQ29uZmlnLmFydGljbGVzRmVlZFVybDsgLy8gZXhlY3V0ZSByZXF1ZXN0CgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChmZWVkVXJsLCB7CiAgICAgICAgICAgICAgcGFyYW1zOiB7fQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKfTsKCmV4cG9ydCB2YXIgQ29tbXVuaXR5U2VydmljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ29tbXVuaXR5U2VydmljZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21tdW5pdHlTZXJ2aWNlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhDb21tdW5pdHlTZXJ2aWNlLCBbewogICAga2V5OiAiZ2V0TGF0ZXN0QXJ0aWNsZXMiLAoKICAgIC8qKgogICAgICogR2V0IGxhdGVzdCBhcnRpY2xlcyBmcm9tIFJTUyBmZWVkCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFydGljbGVFbnRyeVtdfQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGF0ZXN0QXJ0aWNsZXMoKSB7CiAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGRhdGEsIHBhcnNlZFN0cmVhbTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUlNTUGFyc2VyKCkucGFyc2VTdHJpbmcoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHBhcnNlZFN0cmVhbSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMyk7CiAgICAgICAgICAgICAgICBwYXJzZWRTdHJlYW0gPSB7CiAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBwYXJzZWRTdHJlYW0uaXRlbXMubWFwKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgICAgICAgICAgIHZhciBwdWJEYXRlID0gX3JlZi5wdWJEYXRlLAogICAgICAgICAgICAgICAgICAgICAgY3JlYXRvciA9IF9yZWYuY3JlYXRvciwKICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gX3JlZi50aXRsZSwKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRTbmlwcGV0ID0gX3JlZi5jb250ZW50U25pcHBldCwKICAgICAgICAgICAgICAgICAgICAgIGxpbmsgPSBfcmVmLmxpbms7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcHViRGF0ZTogcHViRGF0ZSwKICAgICAgICAgICAgICAgICAgICBjcmVhdG9yOiBjcmVhdG9yLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSwKICAgICAgICAgICAgICAgICAgICBjb250ZW50U25pcHBldDogY29udGVudFNuaXBwZXQsCiAgICAgICAgICAgICAgICAgICAgbGluazogbGluayAmJiBsaW5rLmxlbmd0aCAmJiBsaW5rLm1hdGNoKC9eKD86aHR0cChzKT86XC9cLyk/W1x3Li1dKyg/OlwuW1x3XC4tXSspK1tcd1wtXC5ffjovPyNbXF1AIVwkJidcKFwpXCpcKyw7PS5dKyQvZykgPyBsaW5rIDogJyMnCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMywgOV1dKTsKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbW11bml0eVNlcnZpY2U7Cn0oKTs="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/CommunityService.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAS,SAAT,QAA0B,UAA1B,C,CAEA;;AACA;;;;AAIG;;AACH,IAAM,OAAO,GAAG,SAAV,OAAU;AAAA,SAA4B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpC,YAAA,OADoC,GAC1B,SAAS,CAAC,eADgB,EAExC;;AAFwC;AAGvB,mBAAM,KAAK,CAAC,GAAN,CAAU,OAAV,EAAmB;AAAE,cAAA,MAAM,EAAE;AAAV,aAAnB,CAAN;;AAHuB;AAGlC,YAAA,QAHkC;AAAA,6CAIjC,QAAQ,CAAC,IAJwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA5B;AAAA,CAAhB;;AAgCA,WAAa,gBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACI;;;AAGG;AAJP,wCAKkC;;;;;;;;AACb,uBAAM,OAAO,EAAb;;;AAAP,gBAAA,I;;;AAKa,uBAAM,IAAI,SAAJ,GAAgB,WAAhB,CAA4B,IAA5B,CAAN;;;AAAf,gBAAA,Y;;;;;;;AAEA,gBAAA,YAAY,GAAG;AAAE,kBAAA,KAAK,EAAE;AAAT,iBAAf;;;kDAGG,YAAY,CAAC,KAAb,CAAmB,GAAnB,CAAuB;AAAA,sBAAG,OAAH,QAAG,OAAH;AAAA,sBAAY,OAAZ,QAAY,OAAZ;AAAA,sBAAqB,KAArB,QAAqB,KAArB;AAAA,sBAA4B,cAA5B,QAA4B,cAA5B;AAAA,sBAA4C,IAA5C,QAA4C,IAA5C;AAAA,yBAAwD;AAClF,oBAAA,OAAO,EAAP,OADkF;AAElF,oBAAA,OAAO,EAAP,OAFkF;AAGlF,oBAAA,KAAK,EAAL,KAHkF;AAIlF,oBAAA,cAAc,EAAd,cAJkF;AAKlF,oBAAA,IAAI,EACA,IAAI,IAAI,IAAI,CAAC,MAAb,IAAuB,IAAI,CAAC,KAAL,CAAW,iFAAX,CAAvB,GACM,IADN,GAEM;AARwE,mBAAxD;AAAA,iBAAvB,C;;;;;;;;;AAUV;AA1BL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport RSSParser from 'rss-parser';\nimport axios from 'axios';\n// configuration\nimport { appConfig } from '@/config';\n\n/// region protected helpers\n/**\n * Request external feed data\n * @internal\n * @return {Promise<string>}\n */\nconst request = async (): Promise<string> => {\n    let feedUrl = appConfig.articlesFeedUrl;\n    // execute request\n    const response = await axios.get(feedUrl, { params: {} });\n    return response.data;\n};\n\n/// end-region protected helpers\n\nexport interface ArticleEntry {\n    /**\n     * Publication date\n     */\n    pubDate: string;\n    /**\n     * Article creator\n     */\n    creator: string;\n    /**\n     * Article title\n     */\n    title: string;\n    /**\n     * Article excerpt\n     */\n    contentSnippet: string;\n    /**\n     * Article link\n     */\n    link: string;\n}\n\nexport class CommunityService {\n    /**\n     * Get latest articles from RSS feed\n     * @return {Promise<ArticleEntry[]}\n     */\n    public async getLatestArticles(): Promise<ArticleEntry[]> {\n        const data = await request();\n\n        // *safely* parse stream\n        let parsedStream;\n        try {\n            parsedStream = await new RSSParser().parseString(data);\n        } catch (e) {\n            parsedStream = { items: [] };\n        }\n\n        return parsedStream.items.map(({ pubDate, creator, title, contentSnippet, link }) => ({\n            pubDate,\n            creator,\n            title,\n            contentSnippet,\n            link:\n                link && link.length && link.match(/^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g)\n                    ? link\n                    : '#',\n        }));\n    }\n}\n"],"sourceRoot":""}]}
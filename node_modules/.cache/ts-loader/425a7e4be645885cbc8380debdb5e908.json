{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormNodeEdit/FormNodeEditTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormNodeEdit/FormNodeEditTs.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormNodeEdit/FormNodeEditTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,GAAT,EAAc,SAAd,QAA+B,wBAA/B,C,CACA;;AACA,OAAO,OAAP,MAAoB,kCAApB,C,CACA;;AACA,SAAS,kBAAT,EAA6B,kBAA7B,EAAiD,QAAjD,QAAiE,cAAjE,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,SAAS,iBAAT,QAAkC,qCAAlC;AACA,SAAS,UAAT,QAA2B,yBAA3B;AACA,SAAS,gBAAT,QAAiC,+BAAjC;AACA,SAAS,UAAT,QAA2B,MAA3B;AAEA,SAAS,WAAT,QAA4B,YAA5B;AACA,SAAS,cAAT,QAA+B,2BAA/B;;AAkBA,IAAa,cAAb;AAAA;;AAAA;;AAAA,4BAAA;AAAA;;AAAA;;;AAKW,UAAA,iBAAA,GAA6B,KAA7B;AACA,UAAA,SAAA,GAAY;AACf,MAAA,OAAO,EAAE,EADM;AAEf,MAAA,WAAW,EAAE,EAFE;AAGf,MAAA,WAAW,EAAE;AAHE,KAAZ;AAQA,UAAA,eAAA,GAAkB,iBAAlB;AAEA,UAAA,SAAA,GAAoB,CAApB;AAyDA,UAAA,cAAA,GAAiB,EAAjB;AAzEX;AAqFC;;AArFD;AAAA;AAAA,+BAkBmB;AACX,WAAK,OAAL;AACH;AACD;;;;;AArBJ;AAAA;AAAA,8BAyBkB;AACV;AACA,UAAM,OAAO,GAAG,UAAU,CAAC,UAAX,CAAsB,KAAK,SAAL,CAAe,OAArC,CAAhB,CAFU,CAIV;;AACA,UAAI,KAAK,SAAL,CAAe,IAAf,CAAoB,UAAC,IAAD;AAAA,eAAU,IAAI,CAAC,GAAL,KAAa,OAAvB;AAAA,OAApB,CAAJ,EAAyD;AACrD,aAAK,MAAL,CAAY,QAAZ,CAAqB,wBAArB,EAA+C,gBAAgB,CAAC,iBAAhE;AACA;AACH,OARS,CAUV;;;AACA,UAAI;AACA;AACA,aAAK,MAAL,CAAY,QAAZ,CAAqB,wBAArB,EAA+C,OAA/C;AACA,aAAK,MAAL,CAAY,QAAZ,CAAqB,0BAArB,EAAiD,gBAAgB,CAAC,iBAAlE;AACA,aAAK,MAAL,CAAY,QAAZ,CAAqB,sBAArB,EAA6C,8BAA8B,OAA3E,EAJA,CAMA;;AACA,aAAK,SAAL,CAAe,OAAf,GAAyB,EAAzB;AACA,aAAK,KAAL,CAAW,QAAX,CAAoB,KAApB;AACH,OATD,CASE,OAAO,CAAP,EAAU;AACR;AACA,aAAK,MAAL,CAAY,QAAZ,CAAqB,sBAArB,EAA6C,6CAA6C,OAA1F;AACA,aAAK,MAAL,CAAY,QAAZ,CAAqB,wBAArB,EAA+C,KAAK,EAAL,CAAQ,gBAAgB,CAAC,sBAAzB,CAA/C;AACH;AACJ;AAlDL;AAAA;AAAA,qCAmD+B;;;;;;;;sBACnB,KAAK,KAAL,CAAW,QAAX,CAAoB,MAApB,IAA8B,KAAK,KAAL,CAAW,QAAX,CAAoB,MAApB,CAA2B,OAA3B,CAAmC,O;;;;;AACjE,qBAAK,SAAL,CAAe,WAAf,GAA6B,EAA7B;AACA,qBAAK,SAAL,CAAe,WAAf,GAA6B,EAA7B;;;;AAGE,gBAAA,c,GAAiB,IAAI,cAAJ,E;AACvB,qBAAK,iBAAL,GAAyB,IAAzB;;;AAEsD,uBAAM,cAAc,CAAC,eAAf,CAA+B,KAAK,SAAL,CAAe,OAA9C,EAAuD,SAAvD,EAAN;;;;AAA1C,gBAAA,Y,QAAA,Y;AAAc,gBAAA,uB,QAAA,uB;;oBACjB,uB;;;;;iDACM,KAAK,MAAL,CAAY,QAAZ,CAAqB,0BAArB,EAAiD,KAAK,EAAL,CAAQ,gBAAgB,CAAC,YAAzB,CAAjD,C;;;sBAEP,WAAW,CAAC,KAAK,cAAL,CAAoB,WAArB,CAAX,KAAiD,WAAW,CAAC,YAAY,CAAC,WAAd,C;;;;;iDACrD,KAAK,MAAL,CAAY,QAAZ,CAAqB,0BAArB,EAAiD,KAAK,EAAL,CAAQ,gBAAgB,CAAC,oBAAzB,CAAjD,C;;;AAEX,qBAAK,SAAL,CAAe,WAAf,GAA6B,WAAW,CAAC,YAAY,CAAC,WAAd,CAAxC;AACA,qBAAK,SAAL,CAAe,WAAf,GAA6B,YAAY,CAAC,cAA1C;;;;AAEA,qBAAK,iBAAL,GAAyB,KAAzB;;;;;;;;;;AAEP;AAxEL;AAAA;AAAA,gCA0E6B,KA1E7B,EA0E0C;;;;;;;AAClC,qBAAK,SAAL,CAAe,WAAf,KAA+B,KAAK,SAAL,CAAe,WAAf,GAA6B,EAA5D;AACA,qBAAK,SAAL,CAAe,WAAf,KAA+B,KAAK,SAAL,CAAe,WAAf,GAA6B,EAA5D;;AACmB,uBAAM,QAAQ,CAAC,KAAD,EAAQ,KAAK,eAAL,CAAqB,GAA7B,CAAd;;;AAAb,gBAAA,U;;oBACD,U;;;;;AACD,qBAAK,cAAL,GAAsB,EAAtB;;;;AAGE,gBAAA,iB,GAAmC,iBAAiB,IAAjB,CAAsB,KAAtB,IAA+B,CAAC,KAAD,CAA/B,GAAyC,CAAC,KAAK,GAAG,OAAT,C;AAClF,qBAAK,cAAL,GAAsB,CAAC,KAAD,GAAS,EAAT,GAAc,iBAApC;;;;;;;;;AACH;AApFL;;AAAA;AAAA,EAAoC,GAApC,CAAA;;AAAa,cAAc,GAAA,UAAA,CAAA,CAf1B,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AACR,IAAA,kBAAkB,EAAlB,kBADQ;AAER,IAAA,kBAAkB,EAAlB,kBAFQ;AAGR,IAAA,YAAY,EAAZ,YAHQ;AAIR,IAAA,OAAO,EAAP,OAJQ;AAKR,IAAA,YAAY,EAAZ;AALQ,GADL;AAQP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,SAAS,EAAE,mBADD;AAEV,IAAA,cAAc,EAAE;AAFN,GAAD,CADT;AARD,CAAD,CAeiB,CAAA,EAAd,cAAc,CAAd;SAAA,c","sourcesContent":["import { Vue, Component } from 'vue-property-decorator';\n//@ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n//@ts-ignore\nimport { ValidationObserver, ValidationProvider, validate } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n//@ts-ignore\nimport PeerSelector from '@/components/PeerSelector/PeerSelector.vue';\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\nimport { URLHelpers } from '@/core/utils/URLHelpers';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { mapGetters } from 'vuex';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\nimport { NetworkType } from 'symbol-sdk';\nimport { NetworkService } from '@/services/NetworkService';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        FormRow,\n        PeerSelector,\n    },\n    computed: {\n        ...mapGetters({\n            knowNodes: 'network/knowNodes',\n            currentProfile: 'profile/currentProfile',\n        }),\n    },\n})\nexport class FormNodeEditTs extends Vue {\n    /**\n     * Current profile\n     */\n    public currentProfile: ProfileModel;\n    public isGettingNodeInfo: boolean = false;\n    public formItems = {\n        nodeUrl: '',\n        networkType: '',\n        networkHash: '',\n    };\n    public $refs!: {\n        observer: InstanceType<typeof ValidationObserver>;\n    };\n    public validationRules = ValidationRuleset;\n    public knowNodes: NodeModel[];\n    public nodeDelay: number = 0;\n\n    public onSubmit() {\n        this.addPeer();\n    }\n    /**\n     * Add a new peer to storage\n     * @return {void}\n     */\n    public addPeer() {\n        // validate and parse input\n        const nodeUrl = URLHelpers.getNodeUrl(this.formItems.nodeUrl);\n\n        // return if node already exists in the database\n        if (this.knowNodes.find((node) => node.url === nodeUrl)) {\n            this.$store.dispatch('notification/ADD_ERROR', NotificationType.NODE_EXISTS_ERROR);\n            return;\n        }\n\n        // read network type from node pre-saving\n        try {\n            // hide loading overlay\n            this.$store.dispatch('network/ADD_KNOWN_PEER', nodeUrl);\n            this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.OPERATION_SUCCESS);\n            this.$store.dispatch('diagnostic/ADD_DEBUG', 'PeerSelector added peer: ' + nodeUrl);\n\n            // reset the form input\n            this.formItems.nodeUrl = '';\n            this.$refs.observer.reset();\n        } catch (e) {\n            // hide loading overlay\n            this.$store.dispatch('diagnostic/ADD_ERROR', 'PeerSelector unreachable host with URL: ' + nodeUrl);\n            this.$store.dispatch('notification/ADD_ERROR', this.$t(NotificationType.ERROR_PEER_UNREACHABLE));\n        }\n    }\n    public async getInfoFromUrl() {\n        if (this.$refs.observer.fields && this.$refs.observer.fields.nodeUrl.invalid) {\n            this.formItems.networkHash = '';\n            this.formItems.networkType = '';\n            return;\n        }\n        const networkService = new NetworkService();\n        this.isGettingNodeInfo = true;\n        try {\n            const { networkModel, isCandidateUrlAvailable } = await networkService.getNetworkModel(this.formItems.nodeUrl).toPromise();\n            if (!isCandidateUrlAvailable) {\n                return this.$store.dispatch('notification/ADD_WARNING', this.$t(NotificationType.INVALID_NODE));\n            }\n            if (NetworkType[this.currentProfile.networkType] !== NetworkType[networkModel.networkType]) {\n                return this.$store.dispatch('notification/ADD_WARNING', this.$t(NotificationType.NETWORK_TYPE_INVALID));\n            }\n            this.formItems.networkType = NetworkType[networkModel.networkType];\n            this.formItems.networkHash = networkModel.generationHash;\n        } finally {\n            this.isGettingNodeInfo = false;\n        }\n    }\n    public customNodeData = [];\n    public async handleInput(value: string) {\n        this.formItems.networkType && (this.formItems.networkType = '');\n        this.formItems.networkHash && (this.formItems.networkHash = '');\n        const isValidUrl = await validate(value, this.validationRules.url);\n        if (!isValidUrl) {\n            this.customNodeData = [];\n            return;\n        }\n        const associationValues: Array<string> = /.+\\u003a\\d{2,}/.test(value) ? [value] : [value + ':3000'];\n        this.customNodeData = !value ? [] : associationValues;\n    }\n}\n"],"sourceRoot":""}]}
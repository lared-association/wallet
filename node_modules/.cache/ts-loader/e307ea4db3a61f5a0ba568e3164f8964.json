{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/core/utils/NetworkTypeHelper.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/core/utils/NetworkTypeHelper.ts","mtime":1611927203863},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KLy8vIHJlZ2lvbiBjdXN0b20gdHlwZXMKaW1wb3J0IHsgTmV0d29ya1R5cGUgfSBmcm9tICdzeW1ib2wtc2RrJzsKZXhwb3J0IHZhciBOZXR3b3JrVHlwZUhlbHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTmV0d29ya1R5cGVIZWxwZXIoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV0d29ya1R5cGVIZWxwZXIpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE5ldHdvcmtUeXBlSGVscGVyLCBudWxsLCBbewogICAga2V5OiAiZ2V0TmV0d29ya1R5cGVMYWJlbCIsCgogICAgLyoqCiAgICAgKiBHZXR0ZXIgZm9yIG5ldHdvcmsgdHlwZSBsYWJlbAogICAgICogQHBhcmFtIHtOZXR3b3JrVHlwZX0gbmV0d29ya1R5cGUKICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5ldHdvcmtUeXBlTGFiZWwobmV0d29ya1R5cGUpIHsKICAgICAgdmFyIGZpbmRUeXBlID0gTmV0d29ya1R5cGVIZWxwZXIubmV0d29ya1R5cGVMaXN0LmZpbmQoZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gbi52YWx1ZSA9PT0gbmV0d29ya1R5cGU7CiAgICAgIH0pOwoKICAgICAgaWYgKGZpbmRUeXBlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KCiAgICAgIHJldHVybiBmaW5kVHlwZS5sYWJlbDsKICAgIH0KICB9XSk7CgogIHJldHVybiBOZXR3b3JrVHlwZUhlbHBlcjsKfSgpOwovKioKICogTmV0d29yayB0eXBlcyB3aXRoIHRoZWlyIG5hbWVzCiAqLwoKTmV0d29ya1R5cGVIZWxwZXIubmV0d29ya1R5cGVMaXN0ID0gW3sKICB2YWx1ZTogTmV0d29ya1R5cGUuTUlKSU5fVEVTVCwKICBsYWJlbDogJ01JSklOX1RFU1QnCn0sIHsKICB2YWx1ZTogTmV0d29ya1R5cGUuTUFJTl9ORVQsCiAgbGFiZWw6ICdNQUlOX05FVCcKfSwgewogIHZhbHVlOiBOZXR3b3JrVHlwZS5URVNUX05FVCwKICBsYWJlbDogJ1RFU1RfTkVUJwp9LCB7CiAgdmFsdWU6IE5ldHdvcmtUeXBlLk1JSklOLAogIGxhYmVsOiAnTUlKSU4nCn1dOw=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/core/utils/NetworkTypeHelper.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAcG;AACH;AACA,SAAS,WAAT,QAA4B,YAA5B;AAIA,WAAa,iBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWI;;;;AAIG;AAfP,wCAgBsC,WAhBtC,EAgB8D;AACtD,UAAM,QAAQ,GAAG,iBAAiB,CAAC,eAAlB,CAAkC,IAAlC,CAAuC,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,KAAF,KAAY,WAAnB;AAAA,OAAvC,CAAjB;;AACA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AACxB,eAAO,EAAP;AACH;;AACD,aAAO,QAAQ,CAAC,KAAhB;AACH;AAtBL;;AAAA;AAAA;AACI;;AAEG;;AACW,iBAAA,CAAA,eAAA,GAAsC,CAChD;AAAE,EAAA,KAAK,EAAE,WAAW,CAAC,UAArB;AAAiC,EAAA,KAAK,EAAE;AAAxC,CADgD,EAEhD;AAAE,EAAA,KAAK,EAAE,WAAW,CAAC,QAArB;AAA+B,EAAA,KAAK,EAAE;AAAtC,CAFgD,EAGhD;AAAE,EAAA,KAAK,EAAE,WAAW,CAAC,QAArB;AAA+B,EAAA,KAAK,EAAE;AAAtC,CAHgD,EAIhD;AAAE,EAAA,KAAK,EAAE,WAAW,CAAC,KAArB;AAA4B,EAAA,KAAK,EAAE;AAAnC,CAJgD,CAAtC","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n/// region custom types\nimport { NetworkType } from 'symbol-sdk';\n\ntype NetworkNodeEntry = { value: NetworkType; label: string };\n\nexport class NetworkTypeHelper {\n    /**\n     * Network types with their names\n     */\n    public static networkTypeList: NetworkNodeEntry[] = [\n        { value: NetworkType.MIJIN_TEST, label: 'MIJIN_TEST' },\n        { value: NetworkType.MAIN_NET, label: 'MAIN_NET' },\n        { value: NetworkType.TEST_NET, label: 'TEST_NET' },\n        { value: NetworkType.MIJIN, label: 'MIJIN' },\n    ];\n\n    /**\n     * Getter for network type label\n     * @param {NetworkType} networkType\n     * @return {string}\n     */\n    public static getNetworkTypeLabel(networkType: NetworkType): string {\n        const findType = NetworkTypeHelper.networkTypeList.find((n) => n.value === networkType);\n        if (findType === undefined) {\n            return '';\n        }\n        return findType.label;\n    }\n}\n"],"sourceRoot":""}]}
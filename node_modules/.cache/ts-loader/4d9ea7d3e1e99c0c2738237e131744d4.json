{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormGeneralSettings/FormGeneralSettingsTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormGeneralSettings/FormGeneralSettingsTs.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormGeneralSettings/FormGeneralSettingsTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// internal dependencies\nimport { NotificationType } from '@/core/utils/NotificationType';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ExplorerUrlSetter from '@/components/ExplorerUrlSetter/ExplorerUrlSetter.vue';\n// @ts-ignore\nimport LanguageSelector from '@/components/LanguageSelector/LanguageSelector.vue';\n// @ts-ignore\nimport MaxFeeSelector from '@/components/MaxFeeSelector/MaxFeeSelector.vue';\n// @ts-ignore\nimport AccountSelectorField from '@/components/AccountSelectorField/AccountSelectorField.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\n// @ts-ignore\nimport FormLabel from '@/components/FormLabel/FormLabel.vue';\nimport { SettingsModel } from '@/core/database/entities/SettingsModel';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { networkConfig } from '@/config';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        FormWrapper,\n        FormRow,\n        ExplorerUrlSetter,\n        LanguageSelector,\n        MaxFeeSelector,\n        AccountSelectorField,\n        ModalFormProfileUnlock,\n        FormLabel,\n    },\n    computed: {\n        ...mapGetters({\n            settings: 'app/settings',\n            knownAccounts: 'account/knownAccounts',\n        }),\n    },\n})\nexport class FormGeneralSettingsTs extends Vue {\n    /**\n     * The current stored settings.\n     */\n    public settings: SettingsModel;\n\n    /**\n     * Known accounts identifiers\n     * @var {string[]}\n     */\n    public knownAccounts: AccountModel[];\n\n    /**\n     * Whether account is currently being unlocked\n     * @var {boolean}\n     */\n    public isUnlockingAccount: boolean = false;\n\n    /**\n     * Form fields\n     * @var {Object}\n     */\n    public formItems = {\n        defaultFee: 0,\n        language: '',\n        explorerUrl: '',\n        defaultAccount: '',\n    };\n\n    public created() {\n        this.resetForm();\n    }\n\n    public resetForm() {\n        this.formItems = { ...this.settings };\n        this.formItems.explorerUrl = networkConfig.explorerUrl;\n        if (!this.settings.defaultAccount && this.knownAccounts.length) {\n            this.formItems.defaultAccount = this.knownAccounts[0].id;\n        }\n    }\n\n    /// region computed properties getter/setter\n    public get hasAccountUnlockModal(): boolean {\n        return this.isUnlockingAccount;\n    }\n\n    public set hasAccountUnlockModal(f: boolean) {\n        this.isUnlockingAccount = f;\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Submit action asks for account unlock\n     * @return {void}\n     */\n    public onSubmit() {\n        this.hasAccountUnlockModal = true;\n    }\n\n    /**\n     * When account is unlocked, the sub account can be created\n     */\n    public async onAccountUnlocked() {\n        try {\n            await this.$store.dispatch('app/SET_SETTINGS', this.formItems);\n            // - add notification and emit\n            this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.SUCCESS_SETTINGS_UPDATED);\n            this.$emit('submit', this.formItems);\n        } catch (e) {\n            this.$store.dispatch('notification/ADD_ERROR', 'An error happened, please try again.');\n            console.error(e);\n        }\n    }\n}\n"],"sourceRoot":""}]}
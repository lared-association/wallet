{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormPersistentDelegationRequestTransaction/FormPersistentDelegationRequestTransactionTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormPersistentDelegationRequestTransaction/FormPersistentDelegationRequestTransactionTs.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormPersistentDelegationRequestTransaction/FormPersistentDelegationRequestTransactionTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n    UInt64,\n    AccountKeyLinkTransaction,\n    LinkAction,\n    Transaction,\n    VrfKeyLinkTransaction,\n    Account,\n    NodeKeyLinkTransaction,\n    PersistentDelegationRequestTransaction,\n    AccountInfo,\n    AggregateTransaction,\n    PublicAccount,\n    Deadline,\n    LockFundsTransaction,\n    Mosaic,\n    SignedTransaction,\n} from 'symbol-sdk';\nimport { Component, Prop, Watch } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport Vue from 'vue';\n\n// internal dependencies\nimport { Formatters } from '@/core/utils/Formatters';\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\n\n// child components\nimport { ValidationObserver } from 'vee-validate';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport NetworkNodeSelector from '@/components/NetworkNodeSelector/NetworkNodeSelector.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\nimport { ValidationProvider } from 'vee-validate';\n\nimport { feesConfig } from '@/config';\nimport { HarvestingStatus } from '@/store/Harvesting';\nimport { AccountTransactionSigner, TransactionAnnouncerService, TransactionSigner } from '@/services/TransactionAnnouncerService';\nimport { Observable, of } from 'rxjs';\nimport { concatMap, flatMap, map, mergeAll, switchMap, tap, toArray } from 'rxjs/operators';\nimport { BroadcastResult } from '@/core/transactions/BroadcastResult';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\n\nexport enum HarvestingAction {\n    START = 1,\n    STOP = 2,\n    SWAP = 3,\n    ACTIVATE = 4,\n}\n\n@Component({\n    components: {\n        FormWrapper,\n        ModalTransactionConfirmation,\n        SignerSelector,\n        ValidationObserver,\n        MaxFeeAndSubmit,\n        FormRow,\n        NetworkNodeSelector,\n        ErrorTooltip,\n        ValidationProvider,\n    },\n    computed: {\n        ...mapGetters({\n            currentHeight: 'network/currentHeight',\n            currentSignerAccountInfo: 'account/currentSignerAccountInfo',\n            harvestingStatus: 'harvesting/status',\n            currentSignerAccountModel: 'account/currentSignerAccountModel',\n            networkBalanceMosaics: 'mosaic/networkBalanceMosaics',\n        }),\n    },\n})\nexport class FormPersistentDelegationRequestTransactionTs extends FormTransactionBase {\n    @Prop({ default: null }) signerAddress: string;\n    //@Prop({ default: true }) withLink: boolean;\n\n    /**\n     * Formatters helpers\n     */\n    public formatters = Formatters;\n\n    /**\n     * Form items\n     */\n    public formItems = {\n        nodeModel: { nodePublicKey: '' } as NodeModel,\n        signerAddress: '',\n    };\n\n    private newVrfKeyAccount: Account;\n    private newRemoteAccount: Account;\n\n    /**\n     * Current signer account info\n     */\n    private currentSignerAccountInfo: AccountInfo;\n\n    private currentSignerAccountModel: AccountModel;\n\n    private action = HarvestingAction.START;\n\n    private harvestingStatus: HarvestingStatus;\n\n    private tempTransactionSigner: TransactionSigner;\n\n    private activating = false;\n\n    /**\n     * Current account owned mosaics\n     * @protected\n     * @type {MosaicModel[]}\n     */\n    private networkBalanceMosaics: MosaicModel;\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        // - set default form values\n        this.action = HarvestingAction.START;\n        // - maxFee must be absolute\n        this.newVrfKeyAccount = Account.generateNewAccount(this.networkType);\n        this.newRemoteAccount = Account.generateNewAccount(this.networkType);\n        this.tempTransactionSigner = new AccountTransactionSigner(Account.generateNewAccount(this.networkType));\n    }\n\n    @Watch('currentSignerAccountInfo', { immediate: true })\n    private currentSignerWatch() {\n        this.formItems.signerAddress = this.signerAddress || this.currentSignerAccountInfo?.address.plain();\n\n        if (this.isNodeKeyLinked) {\n            this.formItems.nodeModel.nodePublicKey = this.currentSignerAccountInfo?.supplementalPublicKeys.node.publicKey;\n            if (this.currentSignerAccountModel?.selectedHarvestingNode) {\n                this.formItems.nodeModel = this.currentSignerAccountModel.selectedHarvestingNode;\n            } else {\n                this.formItems.nodeModel = { nodePublicKey: '' } as NodeModel;\n            }\n        } else {\n            this.formItems.nodeModel = { nodePublicKey: '' } as NodeModel;\n        }\n    }\n\n    /**\n     * To get all the key link transactions\n     */\n    protected getKeyLinkTransactions(transactionSigner = this.tempTransactionSigner): Observable<Transaction[]> {\n        const maxFee = UInt64.fromUint(feesConfig.highest); // fixed to the Highest, txs must get confirmed\n        const txs: Transaction[] = [];\n\n        /*\n         LINK\n         START => link all (new keys)\n         STOP =>  unlink all (linked keys)\n         SWAP =>  unlink(linked) + link all (new keys)\n         */\n\n        if (this.isAccountKeyLinked) {\n            const accountKeyUnLinkTx = this.createAccountKeyLinkTx(\n                this.currentSignerAccountInfo.supplementalPublicKeys.linked.publicKey,\n                LinkAction.Unlink,\n                maxFee,\n            );\n            txs.push(accountKeyUnLinkTx);\n        }\n\n        if (this.isVrfKeyLinked) {\n            const vrfKeyUnLinkTx = this.createVrfKeyLinkTx(\n                this.currentSignerAccountInfo.supplementalPublicKeys.vrf.publicKey,\n                LinkAction.Unlink,\n                maxFee,\n            );\n            txs.push(vrfKeyUnLinkTx);\n        }\n\n        if (this.isNodeKeyLinked) {\n            const nodeUnLinkTx = this.createNodeKeyLinkTx(\n                this.currentSignerAccountInfo.supplementalPublicKeys.node.publicKey,\n                LinkAction.Unlink,\n                maxFee,\n            );\n\n            txs.push(nodeUnLinkTx);\n        }\n\n        if (this.action !== HarvestingAction.STOP) {\n            const accountKeyLinkTx = this.createAccountKeyLinkTx(this.newRemoteAccount.publicKey, LinkAction.Link, maxFee);\n            const vrfKeyLinkTx = this.createVrfKeyLinkTx(this.newVrfKeyAccount.publicKey, LinkAction.Link, maxFee);\n            const nodeLinkTx = this.createNodeKeyLinkTx(this.formItems.nodeModel.nodePublicKey, LinkAction.Link, maxFee);\n            txs.push(accountKeyLinkTx, vrfKeyLinkTx, nodeLinkTx);\n        }\n\n        if (txs.length > 0) {\n            if (this.isMultisigMode()) {\n                return this.toMultiSigAggregate(txs, maxFee, transactionSigner);\n            } else {\n                const aggregate = this.calculateSuggestedMaxFee(\n                    AggregateTransaction.createComplete(\n                        Deadline.create(this.epochAdjustment),\n                        txs.map((t) => t.toAggregate(this.currentSignerAccount)),\n                        this.networkType,\n                        [],\n                        maxFee,\n                    ),\n                );\n                return of([aggregate]);\n            }\n        }\n        return of([]);\n    }\n\n    public toMultiSigAggregate(txs: Transaction[], maxFee, transactionSigner: TransactionSigner) {\n        const aggregate = this.calculateSuggestedMaxFee(\n            AggregateTransaction.createBonded(\n                Deadline.create(this.epochAdjustment),\n                txs.map((t) => t.toAggregate(this.currentSignerAccount)),\n                this.networkType,\n                [],\n                maxFee,\n            ),\n        );\n        return transactionSigner.signTransaction(aggregate, this.generationHash).pipe(\n            map((signedAggregateTransaction) => {\n                const hashLock = this.calculateSuggestedMaxFee(\n                    LockFundsTransaction.create(\n                        Deadline.create(this.epochAdjustment),\n                        new Mosaic(this.networkMosaic, UInt64.fromNumericString(this.networkConfiguration.lockedFundsPerAggregate)),\n                        UInt64.fromUint(1000),\n                        signedAggregateTransaction,\n                        this.networkType,\n                        maxFee,\n                    ),\n                );\n                return [hashLock, aggregate];\n            }),\n        );\n    }\n\n    public getPersistentDelegationRequestTransaction(\n        transactionSigner: TransactionSigner = this.tempTransactionSigner,\n    ): Observable<Transaction[]> {\n        const maxFee = UInt64.fromUint(feesConfig.highest);\n        if (this.action !== HarvestingAction.STOP) {\n            const persistentDelegationReqTx = PersistentDelegationRequestTransaction.createPersistentDelegationRequestTransaction(\n                Deadline.create(this.epochAdjustment, this.isMultisigMode() ? 24 : 2),\n                this.newRemoteAccount.privateKey,\n                this.newVrfKeyAccount.privateKey,\n                this.formItems.nodeModel.nodePublicKey,\n                this.networkType,\n                maxFee,\n            );\n\n            return this.isMultisigMode()\n                ? this.toMultiSigAggregate([persistentDelegationReqTx], maxFee, transactionSigner)\n                : of([this.calculateSuggestedMaxFee(persistentDelegationReqTx)]);\n        }\n        return of([]);\n    }\n\n    public resolveTransactions(): Observable<Transaction[]> {\n        return this.getKeyLinkTransactions().pipe(\n            switchMap((txs) => this.getPersistentDelegationRequestTransaction().pipe(map((ptxs) => [...txs, ...ptxs]))),\n        );\n    }\n\n    public announce(service: TransactionAnnouncerService, transactionSigner: TransactionSigner): Observable<Observable<BroadcastResult>[]> {\n        // announce the keyLink txs and save the signed PersistentDelegationReqTx to the store\n        const accountId = this.currentSignerAccountModel.id;\n        const signedPersistentDelReqTx$ = this.getPersistentDelegationRequestTransaction(transactionSigner).pipe(\n            concatMap((txs) => txs.map((t) => transactionSigner.signTransaction(t, this.generationHash))),\n            mergeAll(),\n            toArray(),\n        );\n\n        return this.getKeyLinkTransactions(transactionSigner).pipe(\n            flatMap((transactions) => {\n                const signedTransactions = transactions.map((t) => transactionSigner.signTransaction(t, this.generationHash));\n                if (!signedTransactions.length) {\n                    return of([]) as Observable<Observable<BroadcastResult>[]>;\n                }\n                if (this.isMultisigMode()) {\n                    return of([this.announceHashAndAggregateBonded(service, signedTransactions)]);\n                } else {\n                    return of(this.announceSimple(service, signedTransactions));\n                }\n            }),\n            tap((resArr) =>\n                resArr[0].subscribe((res) => {\n                    if (res.success) {\n                        signedPersistentDelReqTx$.subscribe((signedTx) => this.saveSignedPersistentDelReqTxs(accountId, signedTx));\n                        this.$store.dispatch('account/UPDATE_ACCOUNT_IS_PERSISTENT_DEL_REQ_SENT', {\n                            accountId,\n                            isPersistentDelReqSent: false,\n                        });\n\n                        this.$store.dispatch('account/UPDATE_ACCOUNT_SELECTED_HARVESTING_NODE', {\n                            accountId,\n                            selectedHarvestingNode: this.formItems.nodeModel,\n                        });\n                    }\n                }),\n            ),\n        );\n    }\n\n    private announceHashAndAggregateBonded(\n        service: TransactionAnnouncerService,\n        signedTransactions: Observable<SignedTransaction>[],\n    ): Observable<BroadcastResult> {\n        return signedTransactions[0].pipe(\n            flatMap((signedHashLockTransaction) => {\n                return signedTransactions[1].pipe(\n                    flatMap((signedAggregateTransaction) => {\n                        return service.announceHashAndAggregateBonded(signedHashLockTransaction, signedAggregateTransaction);\n                    }),\n                );\n            }),\n        );\n    }\n\n    private announceSimple(\n        service: TransactionAnnouncerService,\n        signedTransactions: Observable<SignedTransaction>[],\n    ): Observable<BroadcastResult>[] {\n        return signedTransactions.map((o) => o.pipe(flatMap((s) => service.announce(s))));\n    }\n\n    private calculateSuggestedMaxFee(transaction: Transaction): Transaction {\n        const feeMultiplier = this.resolveFeeMultipler(transaction);\n        if (!feeMultiplier) {\n            return transaction;\n        }\n        if (transaction instanceof AggregateTransaction) {\n            return transaction.setMaxFeeForAggregate(feeMultiplier, this.requiredCosignatures);\n        } else {\n            return transaction.setMaxFee(feeMultiplier);\n        }\n    }\n\n    private resolveFeeMultipler(transaction: Transaction): number | undefined {\n        if (transaction.maxFee.compact() == 1) {\n            return this.transactionFees.medianFeeMultiplier || this.networkConfiguration.defaultDynamicFeeMultiplier;\n            // TODO uncomment the following line when https://github.com/nemtech/catapult-rest/issues/326 is resolved\n            // return this.transactionFees.averageFeeMultiplier * 1.2 || this.networkConfiguration.defaultDynamicFeeMultiplier;\n        }\n        if (transaction.maxFee.compact() == 2) {\n            return this.transactionFees.highestFeeMultiplier || this.networkConfiguration.defaultDynamicFeeMultiplier;\n        }\n        return undefined;\n    }\n    private saveSignedPersistentDelReqTxs(accountId: string, signedPersistentDelReqTxs: SignedTransaction[]) {\n        this.$store.dispatch('account/UPDATE_ACCOUNT_SIGNED_PERSISTENT_DEL_REQ_TXS', { accountId, signedPersistentDelReqTxs });\n        if (!signedPersistentDelReqTxs || signedPersistentDelReqTxs.length === 0) {\n            const isPersistentDelReqSent = false;\n            this.$store.dispatch('account/UPDATE_ACCOUNT_IS_PERSISTENT_DEL_REQ_SENT', { accountId, isPersistentDelReqSent });\n        }\n    }\n\n    protected activateHarvesting() {\n        Vue.set(this, 'activating', true);\n        const accountId = this.currentSignerAccountModel.id;\n        const transactionAnnoucer = new TransactionAnnouncerService(this.$store);\n        let announceResult: Observable<BroadcastResult>;\n\n        if (this.isMultisigMode()) {\n            announceResult = transactionAnnoucer.announceHashAndAggregateBonded(\n                this.signedPersistentDelReqTxs[0],\n                this.signedPersistentDelReqTxs[1],\n            );\n        } else {\n            announceResult = transactionAnnoucer.announce(this.signedPersistentDelReqTxs[0]);\n        }\n        announceResult.subscribe((res) => {\n            if (res.success) {\n                this.$store.dispatch('account/UPDATE_ACCOUNT_IS_PERSISTENT_DEL_REQ_SENT', { accountId, isPersistentDelReqSent: true });\n            }\n            Vue.set(this, 'activating', false);\n        });\n    }\n\n    private createAccountKeyLinkTx(publicKey: string, linkAction: LinkAction, maxFee: UInt64): AccountKeyLinkTransaction {\n        return AccountKeyLinkTransaction.create(this.createDeadline(), publicKey, linkAction, this.networkType, maxFee);\n    }\n    private createVrfKeyLinkTx(publicKey: string, linkAction: LinkAction, maxFee: UInt64): VrfKeyLinkTransaction {\n        return VrfKeyLinkTransaction.create(this.createDeadline(), publicKey, linkAction, this.networkType, maxFee);\n    }\n    private createNodeKeyLinkTx(publicKey: string, linkAction: LinkAction, maxFee: UInt64): NodeKeyLinkTransaction {\n        return NodeKeyLinkTransaction.create(this.createDeadline(), publicKey, linkAction, this.networkType, maxFee);\n    }\n\n    /**\n     * Whether all keys are linked\n     */\n    private get allKeysLinked(): boolean {\n        return this.isAccountKeyLinked && this.isVrfKeyLinked && this.isNodeKeyLinked;\n    }\n\n    /**\n     * Whether account key is linked\n     */\n    private get isAccountKeyLinked(): boolean {\n        return !!this.currentSignerAccountInfo?.supplementalPublicKeys.linked;\n    }\n\n    /**\n     * Whether vrf key is linked\n     */\n    private get isVrfKeyLinked(): boolean {\n        return !!this.currentSignerAccountInfo?.supplementalPublicKeys.vrf;\n    }\n\n    /**\n     * Whether node key is linked\n     */\n    private get isNodeKeyLinked(): boolean {\n        return !!this.currentSignerAccountInfo?.supplementalPublicKeys.node;\n    }\n\n    /**\n     * Setter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions() {\n        throw new Error('This transaction can not be staged');\n    }\n\n    public onStart() {\n        this.action = HarvestingAction.START;\n        if (this.networkBalanceMosaics.balance / Math.pow(10, this.networkBalanceMosaics.divisibility) < 10000) {\n            this.$store.dispatch('notification/ADD_ERROR', this.$t('harvesting_account_insufficient_balance'));\n            return;\n        }\n        this.onSubmit();\n    }\n\n    public onStop() {\n        this.action = HarvestingAction.STOP;\n        this.onSubmit();\n    }\n\n    public onSwap() {\n        this.action = HarvestingAction.SWAP;\n        this.onSubmit();\n    }\n\n    public get swapDisabled(): boolean {\n        return (\n            this.formItems.nodeModel.nodePublicKey?.toLowerCase() ===\n            this.currentSignerAccountInfo.supplementalPublicKeys?.node?.publicKey?.toLowerCase()\n        );\n    }\n\n    public onSubmit() {\n        if (!this.allKeysLinked && !this.formItems.nodeModel.nodePublicKey.length) {\n            this.$store.dispatch('notification/ADD_ERROR', this.$t('invalid_node'));\n            return;\n        }\n\n        // - open signature modal\n        this.onShowConfirmationModal();\n    }\n\n    public get currentSignerAccount() {\n        return PublicAccount.createFromPublicKey(this.currentSignerPublicKey, this.networkType);\n    }\n\n    private get requiredCosignatures() {\n        return this.currentSignerMultisigInfo ? this.currentSignerMultisigInfo.minApproval : this.selectedSigner.requiredCosignatures;\n    }\n\n    private get signedPersistentDelReqTxs() {\n        return this.currentSignerAccountModel.signedPersistentDelReqTxs?.map(\n            (st) => new SignedTransaction(st.payload, st.hash, st.signerPublicKey, st.type, st.networkType),\n        );\n    }\n\n    private get isPersistentDelReqSent() {\n        return this.currentSignerAccountModel.isPersistentDelReqSent;\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MosaicService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MosaicService.ts","mtime":1611927204231},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MosaicService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AACH;AACA,OAAO,CAAP,MAAc,QAAd;AACA,SAAyC,QAAzC,QAA0H,YAA1H;AACA,SAAS,aAAT,EAAwB,IAAxB,EAA0C,EAA1C,QAAoD,MAApD;AACA,SAAS,GAAT,EAAc,QAAd,EAAwB,GAAxB,EAA6B,OAA7B,QAA4C,gBAA5C,C,CACA;;AACA,SAAS,wBAAT,QAA0E,mDAA1E;AACA,SAAS,WAAT,QAA4B,sCAA5B;AACA,SAAS,oBAAT,QAAqC,+CAArC;AACA,SAAS,iBAAT,QAAkC,gCAAlC;AACA,SAAS,WAAT,QAA4B,0BAA5B;AACA,SAAS,sBAAT,QAAuC,iDAAvC;AACA,SAAS,kBAAT,QAAmC,4CAAnC;AACA,SAAS,6BAAT,QAA8C,uDAA9C;AACA,SAAS,+BAAT,QAAgD,yDAAhD;AAsBA;;;;;;AAMG;;AACH,WAAa,aAAb;AAAA,2BAAA;AAAA;;AACI;;AAEG;AACc,SAAA,iBAAA,GAAoB,kBAAkB,CAAC,QAAvC;AAEjB;;;AAGG;;AACc,SAAA,2BAAA,GAA8B,+BAA+B,CAAC,QAA9D;AAEjB;;AAEG;;AACc,SAAA,sBAAA,GAAyB,6BAA6B,CAAC,QAAvD;AAuPpB;AArPG;;;;;;;;;;AAUG;;;AA3BP;AAAA;AAAA,+BA6BQ,iBA7BR,EA8BQ,cA9BR,EA+BQ,eA/BR,EAgCQ,YAhCR,EAgCmC;AAAA;;AAE3B,UAAI,CAAC,YAAY,CAAC,MAAlB,EAA0B;AACtB,eAAO,EAAE,CAAC,EAAD,CAAT;AACH;;AACD,UAAM,cAAc,GAAG,KAAK,cAAL,CAAoB,cAApB,KAAuC,EAA9D;AACA,UAAM,0BAA0B,GAAG,KAAK,eAAL,CAAqB,iBAArB,EAAwC,YAAxC,CAAnC;AACA,UAAM,gBAAgB,GAAG,YAAY,CAAC,GAAb,CAAiB,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,OAAT;AAAA,OAAjB,CAAzB;AACA,UAAM,6BAA6B,GAAG,iBAAiB,CAAC,sBAAlB,GAA2C,MAA3C,CAAkD;AAAE,QAAA,YAAY,EAAE,gBAAgB,CAAC,CAAD;AAAhC,OAAlD,CAAtC;AAEA,aAAO,aAAa,CAAC,CAAC,0BAAD,EAA6B,6BAA7B,CAAD,CAAb,CACF,IADE,CAEC,QAAQ,CAAC,gBAA4B;AAAA;AAAA,YAA1B,QAA0B;AAAA,YAAhB,WAAgB;;AACjC,YAAM,SAAS,GAAe,CAAC,CAAC,MAAF,8BACtB,QAAQ,CAAC,GAAT,CAAa,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,QAAT;AAAA,SAAb,CADsB,sBACc,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAqB,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,EAAT;AAAA,SAArB,CADd,IAE1B,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,KAAF,EAAP;AAAA,SAF0B,CAA9B;;AAIA,YAAM,eAAe,GAAG,iBAAiB,CAAC,yBAAlB,GAA8C,eAA9C,CAA8D,SAA9D,CAAxB;;AACA,YAAM,oBAAoB,GAAG,KAAI,CAAC,UAAL,CAAgB,iBAAhB,EAAmC,SAAnC,EAA8C,WAAW,CAAC,IAA1D,CAA7B;;AACA,eAAO,aAAa,CAAC,CAAC,eAAD,EAAkB,oBAAlB,CAAD,CAAb,CAAuD,IAAvD,CACH,GAAG,CAAC,iBAAyB;AAAA;AAAA,cAAvB,KAAuB;AAAA,cAAhB,WAAgB;;AACzB,iBAAO,KAAI,CAAC,YAAL,CAAkB,QAAlB,EAA4B,WAA5B,EAAyC,KAAzC,EAAgD,eAAhD,EAAiE,gBAAjE,CAAP;AACH,SAFE,CADA,CAAP;AAKH,OAZO,CAFT,EAgBF,IAhBE,CAiBC,GAAG,CAAC,UAAC,CAAD;AAAA,eAAO,KAAI,CAAC,cAAL,CAAoB,cAApB,EAAoC,CAApC,CAAP;AAAA,OAAD,CAjBJ,EAkBC,iBAAiB,CAAC,YAAlB,CAA+B,cAA/B,CAlBD,CAAP;AAoBH;AA9DL;AAAA;AAAA,+BAiEQ,iBAjER,EAkEQ,SAlER,EAmEQ,oBAnER,EAmE0C;AAElC,UAAM,eAAe,GAAG,SAAS,CAAC,MAAV,CAAiB,UAAC,QAAD;AAAA,eAAc,CAAC,oBAAoB,CAAC,IAArB,CAA0B,UAAC,IAAD;AAAA,iBAAU,IAAI,CAAC,EAAL,CAAQ,MAAR,CAAe,QAAf,CAAV;AAAA,SAA1B,CAAf;AAAA,OAAjB,CAAxB;;AACA,UAAI,eAAe,CAAC,MAApB,EAA4B;AACxB,eAAO,iBAAiB,CACnB,sBADE,GAEF,UAFE,CAES,eAFT,EAGF,IAHE,CAGG,GAAG,CAAC,UAAC,UAAD;AAAA,iBAAgB,UAAU,CAAC,MAAX,CAAkB,oBAAlB,CAAhB;AAAA,SAAD,CAHN,CAAP;AAIH,OALD,MAKO;AACH,eAAO,EAAE,CAAC,oBAAD,CAAT;AACH;AACJ;AA9EL;AAAA;AAAA,4BAgFoB,WAhFpB,EAgFgD,gBAhFhD,EAgF0E;AAClE,aAAO,CAAC,CAAC,KAAF,CACH,WAAW,CACN,MADL,CACY,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,QAAF,CAAW,MAAX,CAAkB,gBAAlB,CAAP;AAAA,OADZ,EAEK,MAFL,CAEY,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,KAAF,CAAQ,MAAf;AAAA,OAFZ,EAGK,GAHL,CAGS,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,IAAlB;AAAA,OAHT,CADG,CAAP;AAMH;AAvFL;AAAA;AAAA,iCA0FQ,QA1FR,EA2FQ,UA3FR,EA4FQ,WA5FR,EA6FQ,eA7FR,EA8FQ,gBA9FR,EA8FmC;AAAA;;AAE3B,aAAO,CAAC,CAAC,OAAF,CACH,gBAAgB,CAAC,GAAjB,CAAqB,UAAC,OAAD,EAAY;AAC7B,eAAO,UAAU,CAAC,GAAX,CAAe,UAAC,SAAD,EAAc;AAChC,cAAM,IAAI,GAAG,MAAI,CAAC,OAAL,CAAa,WAAb,EAA0B,SAAS,CAAC,EAApC,CAAb;;AACA,cAAM,gBAAgB,GAAG,SAAS,CAAC,EAAV,CAAa,KAAb,OAAyB,eAAe,CAAC,WAAlE;AACA,cAAM,OAAO,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAC,OAAD;AAAA,mBAAa,OAAO,CAAC,QAAR,CAAiB,MAAjB,CAAwB,SAAS,CAAC,EAAlC,KAAyC,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAuB,OAAvB,CAAtD;AAAA,WAAd,CAAhB;AACA,iBAAO,IAAI,WAAJ,CACH,OAAO,CAAC,KAAR,EADG,EAEH,SAAS,CAAC,YAAV,CAAuB,KAAvB,EAFG,EAGH,IAHG,EAIH,gBAJG,EAKF,OAAO,IAAI,OAAO,CAAC,MAAR,CAAe,OAAf,EAAZ,IAAyC,CALtC,EAMH,SANG,CAAP;AAQH,SAZM,CAAP;AAaH,OAdD,CADG,CAAP;AAiBH;AAjHL;AAAA;AAAA,oCAmH4B,iBAnH5B,EAmHkE,YAnHlE,EAmH6F;AACrF,UAAM,iBAAiB,GAAG,CAAC,CAAC,OAAF,CAAU,YAAY,CAAC,GAAb,CAAiB,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,OAAF,CAAU,GAAV,CAAc,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,EAAT;AAAA,SAAd,CAAP;AAAA,OAAjB,CAAV,CAA1B;;AACA,UAAM,uBAAuB,GAAG,CAAC,CAAC,MAAF,CAAS,iBAAT,EAA4B,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,KAAF,EAAP;AAAA,OAA5B,CAAhC;;AACA,aAAO,KAAK,gBAAL,CAAsB,iBAAtB,EAAyC,uBAAzC,EAAkE,IAAlE,CACH,GAAG,CAAC,UAAC,gBAAD,EAAqB;AACrB,eAAO,CAAC,CAAC,OAAF,CACH,YAAY,CAAC,GAAb,CAAiB,UAAC,CAAD,EAAM;AACnB,iBAAO,CAAC,CAAC,OAAF,CAAU,GAAV,CAAc,UAAC,CAAD,EAAM;AACvB,mBAAO;AACH,cAAA,OAAO,EAAE,CAAC,CAAC,OADR;AAEH,cAAA,MAAM,EAAE,CAAC,CAAC,MAFP;AAGH,cAAA,QAAQ,EAAE,gBAAgB,CAAC,IAAjB,CAAsB,UAAC,IAAD;AAAA,uBAAU,IAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,CAAC,CAAC,EAAnB,CAAV;AAAA,eAAtB,EAAwD;AAH/D,aAAP;AAKH,WANM,CAAP;AAOH,SARD,CADG,CAAP;AAWH,OAZE,CADA,CAAP;AAeH;AArIL;AAAA;AAAA,qCAwIQ,iBAxIR,EAyIQ,GAzIR,EAyIuC;AAE/B,UAAM,mBAAmB,GAAG,iBAAiB,CAAC,yBAAlB,EAA5B;AACA,aAAO,IAAI,CAAC,GAAD,CAAJ,CACF,IADE,CAEC,QAAQ,CAAC,UAAC,EAAD,EAAO;AACZ,YAAI,EAAE,YAAY,QAAlB,EAA4B;AACxB,iBAAO,EAAE,CAAC;AAAE,YAAA,IAAI,EAAE,EAAR;AAAY,YAAA,EAAE,EAAE;AAAhB,WAAD,CAAT;AACH,SAFD,MAEO;AACH,cAAM,wBAAwB,GAAG,mBAAmB,CAAC,iBAApB,CAAsC,EAAtC,CAAjC;AACA,iBAAO,wBAAwB,CAAC,IAAzB,CACH,GAAG,CAAC,UAAC,EAAD,EAAO;AACP,mBAAO;AAAE,cAAA,IAAI,EAAE,EAAR;AAAY,cAAA,EAAE,EAAE;AAAhB,aAAP;AACH,WAFE,CADA,CAAP;AAKH;AACJ,OAXO,CAFT,EAeF,IAfE,CAeG,OAAO,EAfV,CAAP;AAgBH;AAED;;;;;;;;;AASG;;AAvKP;AAAA;AAAA,yCAwKgC,iBAxKhC,EAwKsE,cAxKtE,EAwK4F;AAAA;;AACpF,UAAM,uBAAuB,GAAG,KAAK,sBAAL,CAA4B,GAA5B,CAAgC,cAAhC,CAAhC;AACA,aAAO,iBAAiB,CAAC,aAAlB,GAAkC,IAAlC,CACH,GAAG,CAAC,UAAC,cAAD,EAAmB;AACnB,YAAM,QAAQ,GAAG,MAAI,CAAC,kBAAL,CAAwB,cAAc,CAAC,QAAvC,CAAjB;;AACA,YAAM,OAAO,GAAG,MAAI,CAAC,kBAAL,CAAwB,cAAc,CAAC,OAAvC,CAAhB;;AACA,eAAO,IAAI,sBAAJ,CAA2B,QAA3B,EAAqC,OAArC,CAAP;AACH,OAJE,CADA,EAMH,GAAG,CAAC,UAAC,CAAD;AAAA,eAAO,MAAI,CAAC,sBAAL,CAA4B,GAA5B,CAAgC,cAAhC,EAAgD,CAAhD,CAAP;AAAA,OAAD,CANA,EAOH,iBAAiB,CAAC,YAAlB,CAA+B,uBAA/B,CAPG,CAAP;AASH;AAnLL;AAAA;AAAA,mCAqL2B,cArL3B,EAqLiD;AACzC,aAAO,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,cAA3B,CAAP;AACH;AAvLL;AAAA;AAAA,mCAyL2B,cAzL3B,EAyLmD,OAzLnD,EAyLyE;AACjE,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,cAA3B,EAA2C,OAA3C;AACH;AA3LL;AAAA;AAAA,0BA6LiB,cA7LjB,EA6LuC;AAC/B,WAAK,iBAAL,CAAuB,MAAvB,CAA8B,cAA9B;AACA,WAAK,sBAAL,CAA4B,MAA5B,CAAmC,cAAnC;AACH;AAED;;;;;AAKG;;AAvMP;AAAA;AAAA,uCAwM+B,QAxM/B,EAwMiD;AACzC,UAAM,QAAQ,GAAG,QAAQ,CAAC,QAA1B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,MAAM,GAAI,WAAW,IAAI,WAAW,CAAC,QAA3B,IAAuC,WAAW,CAAC,QAAZ,CAAqB,KAArB,CAA2B,GAA3B,EAAgC,GAAhC,GAAsC,WAAtC,EAAxC,IAAgG,SAA/G;AACA,aAAO,IAAI,oBAAJ,CACH,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,KAAV,EADG,EAEH,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,KAAb,EAFG,EAGH,WAAW,CAAC,QAHT,EAIH,QAAQ,CAAC,YAJN,EAKH,QAAQ,CAAC,YALN,EAMH,QAAQ,CAAC,aANN,EAOH,QAAQ,CAAC,YAPN,EAQH,MARG,CAAP;AAUH;AAED;;;;;;AAMG;;AA9NP;AAAA;AAAA,qDAkP4C,OAlP5C,EAkPiE;AACzD,aAAO,KAAK,uBAAL,GAA+B,OAAO,CAAC,EAAvC,KAA8C,EAArD;AACH;AApPL;AAAA;AAAA,2CAsPkC,QAtPlC,EAsPsD,OAtPtD,EAsP2E;AACnE,aAAO,KAAK,gCAAL,CAAsC,OAAtC,EAA+C,QAAQ,CAAC,KAAT,EAA/C,KAAoE,IAAI,wBAAJ,EAA3E;AACH;AAxPL;AAAA;AAAA,8CAyPkC;AAC1B,aAAO,KAAK,2BAAL,CAAiC,GAAjC,MAA0C,EAAjD;AACH;AA3PL;AAAA;AAAA,8CA4PqC,QA5PrC,EA4PyD,OA5PzD,EA4PgF,UA5PhF,EA4P+F;AACvF,UAAM,2BAA2B,GAAG,KAAK,uBAAL,EAApC;AACA,MAAA,2BAA2B,CAAC,OAAO,CAAC,EAAT,CAA3B,GAA0C,2BAA2B,CAAC,OAAO,CAAC,EAAT,CAA3B,GAA0C,2BAA2B,CAAC,OAAO,CAAC,EAAT,CAArE,GAAoF,EAA9H;AACA,MAAA,2BAA2B,CAAC,OAAO,CAAC,EAAT,CAA3B,CAAwC,QAAQ,CAAC,KAAT,EAAxC,IAAyD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClD,KAAK,sBAAL,CAA4B,QAA5B,EAAsC,OAAtC,CADkD,CAAA,EAElD,UAFkD,CAAzD;AAIA,WAAK,2BAAL,CAAiC,GAAjC,CAAqC,2BAArC;AACA,aAAO,2BAA2B,CAAC,OAAO,CAAC,EAAT,CAAlC;AACH;AArQL;AAAA;AAAA,kCA+NgC,UA/NhC,EA+NyD,aA/NzD,EA+NgF,yBA/NhF,EA+NiH;AACzG,UAAM,QAAQ,GAAG,UAAU,CAAC,QAA5B;AACA,UAAM,WAAW,GAAG,UAAU,CAAC,MAA/B,CAFyG,CAIzG;;AACA,UAAI,QAAQ,KAAK,CAAjB,EAAoB;AAChB,eAAO,WAAP;AACH,OAPwG,CASzG;AACA;;;AACA,UAAM,SAAS,GAAG,WAAW,GAAG,QAAd,IAA0B,aAAa,IAAI,CAA3C,CAAlB;;AACA,UAAI,SAAS,IAAI,CAAjB,EAAoB;AAChB,eAAO,SAAP;AACH,OAdwG,CAezG;;;AACA,aAAO,WAAW,CAAC,sBAAZ,CAAmC,SAAnC,EAA8C,yBAA9C,CAAP;AACH;AAhPL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport _ from 'lodash';\nimport { AccountInfo, Address, Currency, MosaicId, MosaicInfo, MosaicNames, NamespaceId, RepositoryFactory, UInt64 } from 'symbol-sdk';\nimport { combineLatest, from, Observable, of } from 'rxjs';\nimport { map, mergeMap, tap, toArray } from 'rxjs/operators';\n// internal dependencies\nimport { MosaicConfigurationModel, AccountMosaicConfigurationModel } from '@/core/database/entities/MosaicConfigurationModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { ObservableHelpers } from '@/core/utils/ObservableHelpers';\nimport { TimeHelpers } from '@/core/utils/TimeHelpers';\nimport { NetworkCurrenciesModel } from '@/core/database/entities/NetworkCurrenciesModel';\nimport { MosaicModelStorage } from '@/core/database/storage/MosaicModelStorage';\nimport { NetworkCurrenciesModelStorage } from '@/core/database/storage/NetworkCurrenciesModelStorage';\nimport { MosaicConfigurationModelStorage } from '@/core/database/storage/MosaicConfigurationModelStorage';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n\n// custom types\nexport type ExpirationStatus = 'unlimited' | 'expired' | string | number;\n\n// TODO. Can this interface be removed?\nexport interface AttachedMosaic {\n    id: MosaicId | NamespaceId;\n    mosaicHex: string;\n    /**\n     * Relative amount\n     */\n    amount: number;\n}\n\ninterface MosaicBalance {\n    mosaicId: MosaicId;\n    amount: UInt64;\n    address: Address;\n}\n\n/**\n * The service in charge of loading and caching anything related to Mosaics from Rest.\n * The cache is done by storing the payloads in SimpleObjectStorage.\n *\n * The service also holds configuration about the current mosaics, for example which mosaic\n * balances are currently hidden.\n */\nexport class MosaicService {\n    /**\n     * Store that caches the mosaic information of the current accounts when returned from rest.\n     */\n    private readonly mosaicDataStorage = MosaicModelStorage.INSTANCE;\n\n    /**\n     * The storage to keep user configuration around mosaics.  For example, the balance hidden\n     * feature.\n     */\n    private readonly mosaicConfigurationsStorage = MosaicConfigurationModelStorage.INSTANCE;\n\n    /**\n     * Store that caches the information around the network currency.\n     */\n    private readonly networkCurrencyStorage = NetworkCurrenciesModelStorage.INSTANCE;\n\n    /**\n     * This method loads and caches the mosaic information for the given accounts.\n     * The returned Observable will announce the cached information first, then the rest returned\n     * information (if possible).\n     *\n     * @param {RepositoryFactory} repositoryFactory\n     * @param {string} generationHash\n     * @param {NetworkCurrencyModel} networkCurrency\n     * @param {AccountInfo[]} accountsInfo\n     * @returns {Observable<MosaicModel[]>}\n     */\n    public getMosaics(\n        repositoryFactory: RepositoryFactory,\n        generationHash: string,\n        networkCurrency: NetworkCurrencyModel,\n        accountsInfo: AccountInfo[],\n    ): Observable<MosaicModel[]> {\n        if (!accountsInfo.length) {\n            return of([]);\n        }\n        const mosaicDataList = this.loadMosaicData(generationHash) || [];\n        const resolvedBalancesObservable = this.resolveBalances(repositoryFactory, accountsInfo);\n        const accountAddresses = accountsInfo.map((a) => a.address);\n        const mosaicsFromAccountsObservable = repositoryFactory.createMosaicRepository().search({ ownerAddress: accountAddresses[0] });\n\n        return combineLatest([resolvedBalancesObservable, mosaicsFromAccountsObservable])\n            .pipe(\n                mergeMap(([balances, owedMosaics]) => {\n                    const mosaicIds: MosaicId[] = _.uniqBy(\n                        [...balances.map((m) => m.mosaicId), ...owedMosaics.data.map((o) => o.id)],\n                        (m) => m.toHex(),\n                    );\n                    const nameObservables = repositoryFactory.createNamespaceRepository().getMosaicsNames(mosaicIds);\n                    const mosaicInfoObservable = this.loadMosaic(repositoryFactory, mosaicIds, owedMosaics.data);\n                    return combineLatest([nameObservables, mosaicInfoObservable]).pipe(\n                        map(([names, mosaicInfos]) => {\n                            return this.toMosaicDtos(balances, mosaicInfos, names, networkCurrency, accountAddresses);\n                        }),\n                    );\n                }),\n            )\n            .pipe(\n                tap((d) => this.saveMosaicData(generationHash, d)),\n                ObservableHelpers.defaultFirst(mosaicDataList),\n            );\n    }\n\n    private loadMosaic(\n        repositoryFactory: RepositoryFactory,\n        mosaicIds: MosaicId[],\n        alreadyLoadedMosaics: MosaicInfo[],\n    ): Observable<MosaicInfo[]> {\n        const toLoadMosaicIds = mosaicIds.filter((mosaicId) => !alreadyLoadedMosaics.some((info) => info.id.equals(mosaicId)));\n        if (toLoadMosaicIds.length) {\n            return repositoryFactory\n                .createMosaicRepository()\n                .getMosaics(toLoadMosaicIds)\n                .pipe(map((newMosaics) => newMosaics.concat(alreadyLoadedMosaics)));\n        } else {\n            return of(alreadyLoadedMosaics);\n        }\n    }\n\n    private getName(mosaicNames: MosaicNames[], accountMosaicDto: MosaicId): string {\n        return _.first(\n            mosaicNames\n                .filter((n) => n.mosaicId.equals(accountMosaicDto))\n                .filter((n) => n.names.length)\n                .map((n) => n.names[0].name),\n        );\n    }\n\n    private toMosaicDtos(\n        balances: MosaicBalance[],\n        mosaicDtos: MosaicInfo[],\n        mosaicNames: MosaicNames[],\n        networkCurrency: NetworkCurrencyModel,\n        accountAddresses: Address[],\n    ): MosaicModel[] {\n        return _.flatten(\n            accountAddresses.map((address) => {\n                return mosaicDtos.map((mosaicDto) => {\n                    const name = this.getName(mosaicNames, mosaicDto.id);\n                    const isCurrencyMosaic = mosaicDto.id.toHex() === networkCurrency.mosaicIdHex;\n                    const balance = balances.find((balance) => balance.mosaicId.equals(mosaicDto.id) && balance.address.equals(address));\n                    return new MosaicModel(\n                        address.plain(),\n                        mosaicDto.ownerAddress.plain(),\n                        name,\n                        isCurrencyMosaic,\n                        (balance && balance.amount.compact()) || 0,\n                        mosaicDto,\n                    );\n                });\n            }),\n        );\n    }\n\n    private resolveBalances(repositoryFactory: RepositoryFactory, accountsInfo: AccountInfo[]): Observable<MosaicBalance[]> {\n        const mosaicIdOrAliases = _.flatten(accountsInfo.map((a) => a.mosaics.map((m) => m.id)));\n        const mosaicIdOrAliasesUnique = _.uniqBy(mosaicIdOrAliases, (m) => m.toHex());\n        return this.resolveMosaicIds(repositoryFactory, mosaicIdOrAliasesUnique).pipe(\n            map((resolveMosaicIds) => {\n                return _.flatten(\n                    accountsInfo.map((a) => {\n                        return a.mosaics.map((m) => {\n                            return {\n                                address: a.address,\n                                amount: m.amount,\n                                mosaicId: resolveMosaicIds.find((pair) => pair.from.equals(m.id)).to,\n                            };\n                        });\n                    }),\n                );\n            }),\n        );\n    }\n\n    private resolveMosaicIds(\n        repositoryFactory: RepositoryFactory,\n        ids: (NamespaceId | MosaicId)[],\n    ): Observable<{ from: NamespaceId | MosaicId; to: MosaicId }[]> {\n        const namespaceRepository = repositoryFactory.createNamespaceRepository();\n        return from(ids)\n            .pipe(\n                mergeMap((id) => {\n                    if (id instanceof MosaicId) {\n                        return of({ from: id, to: id as MosaicId });\n                    } else {\n                        const linkedMosaicIdObservable = namespaceRepository.getLinkedMosaicId(id as NamespaceId);\n                        return linkedMosaicIdObservable.pipe(\n                            map((to) => {\n                                return { from: id, to: to };\n                            }),\n                        );\n                    }\n                }),\n            )\n            .pipe(toArray());\n    }\n\n    /**\n     * This method returns the list of {@link NetworkCurrencyModel} of the network.\n     *\n     * The intent of this method is to resolve the configured main (like cat.currency or symbol.xym)\n     * and harvest currencies (cat.harvest) returned by the network configuration endpoint.\n     *\n     * @param {RepositoryFactory} repositoryFactory\n     * @param {generationHash} the generation hash.\n     * @returns {Observable<NetworkCurrencyModel[]>}\n     */\n    public getNetworkCurrencies(repositoryFactory: RepositoryFactory, generationHash: string): Observable<NetworkCurrenciesModel> {\n        const storedNetworkCurrencies = this.networkCurrencyStorage.get(generationHash);\n        return repositoryFactory.getCurrencies().pipe(\n            map((networkMosaics) => {\n                const currency = this.getNetworkCurrency(networkMosaics.currency);\n                const harvest = this.getNetworkCurrency(networkMosaics.harvest);\n                return new NetworkCurrenciesModel(currency, harvest);\n            }),\n            tap((d) => this.networkCurrencyStorage.set(generationHash, d)),\n            ObservableHelpers.defaultFirst(storedNetworkCurrencies),\n        );\n    }\n\n    private loadMosaicData(generationHash: string): MosaicModel[] {\n        return this.mosaicDataStorage.get(generationHash);\n    }\n\n    private saveMosaicData(generationHash: string, mosaics: MosaicModel[]) {\n        this.mosaicDataStorage.set(generationHash, mosaics);\n    }\n\n    public reset(generationHash: string) {\n        this.mosaicDataStorage.remove(generationHash);\n        this.networkCurrencyStorage.remove(generationHash);\n    }\n\n    /**\n     * Creates a network currency model given mosaic info and mosaic names\n     * @param {MosaicInfo} mosaicInfo\n     * @param {MosaicNames} mosaicName\n     * @returns {(NetworkCurrencyModel | undefined)}\n     */\n    private getNetworkCurrency(currency: Currency): NetworkCurrencyModel {\n        const mosaicId = currency.mosaicId;\n        const namespaceId = currency.namespaceId;\n        const ticker = (namespaceId && namespaceId.fullName && namespaceId.fullName.split('.').pop().toUpperCase()) || undefined;\n        return new NetworkCurrencyModel(\n            mosaicId?.toHex(),\n            namespaceId?.toHex(),\n            namespaceId.fullName,\n            currency.divisibility,\n            currency.transferable,\n            currency.supplyMutable,\n            currency.restrictable,\n            ticker,\n        );\n    }\n\n    /**\n     *\n     * Utility method that returns the mosaic expiration status\n     * @param mosaicInfo the mosaic info\n     * @param currentHeight\n     * @param blockGenerationTargetTime\n     */\n    public static getExpiration(mosaicInfo: MosaicModel, currentHeight: number, blockGenerationTargetTime: number): ExpirationStatus {\n        const duration = mosaicInfo.duration;\n        const startHeight = mosaicInfo.height;\n\n        // unlimited duration mosaics are flagged as duration == 0\n        if (duration === 0) {\n            return 'unlimited';\n        }\n\n        // get current height\n        // calculate expiration\n        const expiresIn = startHeight + duration - (currentHeight || 0);\n        if (expiresIn <= 0) {\n            return 'expired';\n        }\n        // number of blocks remaining\n        return TimeHelpers.durationToRelativeTime(expiresIn, blockGenerationTargetTime);\n    }\n\n    public getMosaicConfigurationsByAccount(account: AccountModel): AccountMosaicConfigurationModel {\n        return this.getMosaicConfigurations()[account.id] || {};\n    }\n\n    public getMosaicConfiguration(mosaicId: MosaicId, account: AccountModel): MosaicConfigurationModel {\n        return this.getMosaicConfigurationsByAccount(account)[mosaicId.toHex()] || new MosaicConfigurationModel();\n    }\n    public getMosaicConfigurations(): Record<string, AccountMosaicConfigurationModel> {\n        return this.mosaicConfigurationsStorage.get() || {};\n    }\n    public changeMosaicConfiguration(mosaicId: MosaicId, account: AccountModel, newConfigs: any): Record<string, MosaicConfigurationModel> {\n        const mosaicConfigurationsStorage = this.getMosaicConfigurations();\n        mosaicConfigurationsStorage[account.id] = mosaicConfigurationsStorage[account.id] ? mosaicConfigurationsStorage[account.id] : {};\n        mosaicConfigurationsStorage[account.id][mosaicId.toHex()] = {\n            ...this.getMosaicConfiguration(mosaicId, account),\n            ...newConfigs,\n        };\n        this.mosaicConfigurationsStorage.set(mosaicConfigurationsStorage);\n        return mosaicConfigurationsStorage[account.id];\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/Metadata.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/Metadata.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/store/Metadata.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { Address, Deadline, MetadataType, Transaction, UInt64 } from 'symbol-sdk';\nimport * as _ from 'lodash';\nimport Vue from 'vue';\n\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { MetadataService } from '@/services/MetadataService';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\n\nconst Lock = AwaitLock.create();\n\ninterface MetadataFormState {\n    targetAddress: Address;\n    metadataValue: string;\n    targetId: string;\n    maxFee: number;\n}\n\ninterface MetadataState {\n    initialized: boolean;\n    accountMetadataList: MetadataModel[];\n    mosaicMetadataList: MetadataModel[];\n    namespaceMetadataList: MetadataModel[];\n    isFetchingMetadata: boolean;\n    transactions: Transaction[];\n    metadataType: MetadataType;\n    metadataForm: MetadataFormState;\n}\n\nconst metadataState: MetadataState = {\n    initialized: false,\n    accountMetadataList: [],\n    mosaicMetadataList: [],\n    namespaceMetadataList: [],\n    isFetchingMetadata: false,\n    transactions: [],\n    metadataType: MetadataType.Account,\n    metadataForm: {\n        targetAddress: null,\n        metadataValue: '',\n        targetId: '',\n        maxFee: 0,\n    },\n};\n\nexport default {\n    namespaced: true,\n    state: metadataState,\n    getters: {\n        getInitialized: (state: MetadataState) => state.initialized,\n        accountMetadataList: (state: MetadataState) => state.accountMetadataList,\n        mosaicMetadataList: (state: MetadataState) => state.mosaicMetadataList,\n        namespaceMetadataList: (state: MetadataState) => state.namespaceMetadataList,\n        isFetchingMetadata: (state: MetadataState) => state.isFetchingMetadata,\n        metadataType: (state: MetadataState) => state.metadataType,\n        metadataForm: (state: MetadataState) => state.metadataForm,\n        transactions: (state: MetadataState) => state.transactions,\n    },\n    mutations: {\n        setInitialized: (state: MetadataState, initialized) => {\n            state.initialized = initialized;\n        },\n        metadataList: (state: MetadataState, metadataList: MetadataModel[]) => {\n            const uniqueMetadataList = _.uniqBy(metadataList, (n) => n.metadataId);\n            Vue.set(\n                state,\n                'accountMetadataList',\n                uniqueMetadataList.filter((metadata) => metadata.metadataType === MetadataType.Account),\n            );\n            Vue.set(\n                state,\n                'mosaicMetadataList',\n                uniqueMetadataList.filter((metadata) => metadata.metadataType === MetadataType.Mosaic),\n            );\n            Vue.set(\n                state,\n                'namespaceMetadataList',\n                uniqueMetadataList.filter((metadata) => metadata.metadataType === MetadataType.Namespace),\n            );\n        },\n        isFetchingMetadata: (state: MetadataState, isFetchingMetadata: boolean) => Vue.set(state, 'isFetchingMetadata', isFetchingMetadata),\n        metadataType: (state: MetadataState, metadataType: MetadataType) => {\n            Vue.set(state, 'metadataType', metadataType);\n        },\n        metadataForm: (state: MetadataState, metadataForm: MetadataFormState) => {\n            Vue.set(state, 'metadataForm', metadataForm);\n        },\n        transactions: (state: MetadataState, transactions: Transaction[]) => {\n            Vue.set(state, 'transactions', transactions);\n        },\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                // Placeholder for initialization if necessary.\n                commit('setInitialized', true);\n            };\n            // aquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n\n        async uninitialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        async SET_METADATA_FORM_STATE({ commit }, metadataForm: MetadataFormState) {\n            commit('metadataForm', metadataForm);\n        },\n\n        async SIGNER_CHANGED({ dispatch }) {\n            await dispatch('LOAD_METADATA_LIST');\n        },\n\n        async LOAD_METADATA_LIST({ commit, rootGetters }) {\n            const repositoryFactory = rootGetters['network/repositoryFactory'];\n            const generationHash = rootGetters['network/generationHash'];\n            const metadataService = new MetadataService();\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            commit('isFetchingMetadata', true);\n            metadataService\n                .getMetadataList(repositoryFactory, generationHash, currentSignerAddress)\n                .subscribe((metadataList) => commit('metadataList', metadataList))\n                .add(() => commit('isFetchingMetadata', false));\n        },\n\n        async RESOLVE_METADATA_TRANSACTIONS({ commit, rootGetters }, metadataType: MetadataType) {\n            const currentSignerAddress = rootGetters['account/currentSignerAddress'];\n            const repositoryFactory = rootGetters['network/repositoryFactory'];\n            const epochAdjustment = rootGetters['network/epochAdjustment'];\n            const networkType = rootGetters['network/networkType'];\n            const metadataForm: MetadataFormState = rootGetters['metadata/metadataForm'];\n\n            if (!currentSignerAddress) {\n                return;\n            }\n\n            const metadataService = new MetadataService();\n            const metadataTransaction = await metadataService\n                .metadataTransactionObserver(\n                    repositoryFactory,\n                    Deadline.create(epochAdjustment),\n                    networkType,\n                    currentSignerAddress,\n                    metadataForm.targetAddress,\n                    metadataForm.metadataValue,\n                    metadataForm.targetId,\n                    metadataType,\n                    UInt64.fromUint(metadataForm.maxFee),\n                )\n                .toPromise();\n            commit('transactions', [metadataTransaction]);\n        },\n    },\n};\n"],"sourceRoot":""}]}
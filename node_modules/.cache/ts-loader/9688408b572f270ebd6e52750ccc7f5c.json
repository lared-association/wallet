{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AccountMultisigGraph/AccountMultisigGraphTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AccountMultisigGraph/AccountMultisigGraphTs.ts","mtime":1611927226760},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AccountMultisigGraph/AccountMultisigGraphTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { mapGetters } from 'vuex';\nimport { MultisigAccountInfo } from 'symbol-sdk';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            multisigAccountGraphInfo: 'account/multisigAccountGraph',\n            knownAccounts: 'account/knownAccounts',\n        }),\n    },\n})\nexport class AccountMultisigGraphTs extends Vue {\n    @Prop({\n        default: null,\n    })\n    account: AccountModel;\n\n    @Prop({\n        default: null,\n    })\n    visible: boolean;\n    public multisigAccountGraphInfo: Map<number, MultisigAccountInfo[]>;\n    public knownAccounts: AccountModel[];\n\n    get multisigGraphTree(): any[] {\n        if (this.multisigAccountGraphInfo) {\n            return this.getMultisigDisplayGraph(this.multisigAccountGraphInfo);\n        }\n        return [];\n    }\n\n    public getMultisigDisplayGraph(multisigEntries: Map<number, MultisigAccountInfo[]>): any[] {\n        const firstLevelNumber = [...multisigEntries.keys()].sort()[0];\n        const firstLevel = multisigEntries.get(firstLevelNumber);\n        const graph = [];\n        for (const entry of firstLevel) {\n            graph.push({\n                info: entry,\n                address: entry.accountAddress.plain(),\n                title: this.getAccountLabel(entry, this.knownAccounts),\n                children: [this.getMultisigDisplayGraphChildren(firstLevelNumber + 1, entry, multisigEntries)],\n                selected: this.account.address === entry.accountAddress.plain(),\n            });\n        }\n        return graph[0].children;\n    }\n\n    private getMultisigDisplayGraphChildren(\n        level: number,\n        info: MultisigAccountInfo,\n        multisigEntries: Map<number, MultisigAccountInfo[]>,\n    ): any {\n        const entries = multisigEntries.get(level);\n        if (!entries) {\n            return {\n                info: info,\n                address: info.accountAddress.plain(),\n                title: this.getAccountLabel(info, this.knownAccounts),\n                children: [],\n                selected: this.account.address === info.accountAddress.plain(),\n            };\n        }\n        const children = [];\n        for (const entry of entries) {\n            const isFromParent = entry.multisigAddresses.find((address) => address.plain() === info.accountAddress.plain());\n            if (isFromParent) {\n                children.push(this.getMultisigDisplayGraphChildren(level + 1, entry, multisigEntries));\n            }\n        }\n        return {\n            info: info,\n            address: info.accountAddress.plain(),\n            title: this.getAccountLabel(info, this.knownAccounts),\n            children: children,\n            selected: this.account.address === info.accountAddress.plain(),\n        };\n    }\n\n    getAccountLabel(info: MultisigAccountInfo, accounts: AccountModel[]): string {\n        const account = accounts.find((wlt) => info.accountAddress.plain() === wlt.address);\n        const addressOrName = (account && account.name) || info.accountAddress.plain();\n        return addressOrName + (info.isMultisig() ? ` - ${info.minApproval} of ${info.minRemoval}` : '');\n    }\n}\n"],"sourceRoot":""}]}
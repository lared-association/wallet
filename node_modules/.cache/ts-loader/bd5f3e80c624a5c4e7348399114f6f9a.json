{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/pages/profiles/import-profile/import-mnemonic/ImportMnemonicTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/pages/profiles/import-profile/import-mnemonic/ImportMnemonicTs.ts","mtime":1606213958977},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/pages/profiles/import-profile/import-mnemonic/ImportMnemonicTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\n// internal dependencies\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\n\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { Password, Crypto } from 'symbol-sdk';\n// @ts-ignore\nimport MnemonicInput from '@/components/MnemonicInput/MnemonicInput.vue';\nimport { ProfileService } from '@/services/ProfileService';\n\n//@ts-ignore\nimport ImportQRButton from '@/components/QRCode/ImportQRButton/ImportQRButton.vue';\n\n@Component({\n    components: { MnemonicInput, ImportQRButton },\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            currentPassword: 'temporary/password',\n            importedMnemonic: 'temporary/mnemonic',\n        }),\n    },\n})\nexport default class ImportMnemonicTs extends Vue {\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {string}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Previous step's password\n     * @see {Store.Temporary}\n     * @var {Password}\n     */\n    public currentPassword: Password;\n\n    /**\n     * Profile service\n     * @var {ProfileService}\n     */\n    public profileService: ProfileService = new ProfileService();\n\n    /**\n     * Form items\n     * @var {any}\n     */\n    public formItems = {\n        seed: '',\n    };\n    /**\n     * @description: Receive the Input words\n     * @type: Array<string>\n     */\n    public wordsArray: Array<string> = [];\n\n    /**\n     * @description: initial mnemonics (imported)\n     * @type: string\n     */\n    public importedMnemonic: string;\n\n    /**\n     * Delete profile and go back\n     * @return {void}\n     */\n    public deleteProfileAndBack() {\n        if (this.currentProfile) {\n            // - delete the temporary profile from storage\n            this.profileService.deleteProfile(this.currentProfile.profileName);\n            this.$store.dispatch('profile/RESET_STATE');\n        }\n        // - back to previous page\n        this.$router.push({ name: 'profiles.importProfile.info' });\n    }\n\n    /**\n     * @description: receive input words and control the ui\n     * @return: void\n     */\n    public setSeed(wordsArray) {\n        this.wordsArray = wordsArray;\n        if (wordsArray.length > 0) {\n            this.formItems.seed = wordsArray.join(' ');\n        }\n    }\n\n    /**\n     * Process to mnemonic pass phrase verification\n     * @return {void}\n     */\n    public processVerification() {\n        if (!this.formItems.seed || !this.formItems.seed.length) {\n            return this.$store.dispatch('notification/ADD_ERROR', NotificationType.INPUT_EMPTY_ERROR);\n        }\n\n        try {\n            // - verify validity of mnemonic\n            const mnemonic = new MnemonicPassPhrase(this.formItems.seed);\n\n            if (!mnemonic.isValid()) {\n                throw new Error('Invalid mnemonic pass phrase');\n            }\n\n            // encrypt seed for storage\n            const encSeed = Crypto.encrypt(mnemonic.plain, this.currentPassword.value);\n\n            this.profileService.updateSeed(this.currentProfile, encSeed);\n\n            // update state\n            this.$store.dispatch('notification/ADD_SUCCESS', this.$t('generate_entropy_increase_success'));\n            this.$store.dispatch('temporary/SET_MNEMONIC', mnemonic.plain);\n\n            // redirect\n            return this.$router.push({\n                name: 'profiles.importProfile.walletSelection',\n            });\n        } catch (e) {\n            console.log('An error happened while importing Mnenomic:', e);\n            return this.$store.dispatch('notification/ADD_ERROR', this.$t('invalid_mnemonic_input'));\n        }\n    }\n}\n"],"sourceRoot":""}]}
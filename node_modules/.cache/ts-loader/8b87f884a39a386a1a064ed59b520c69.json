{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/Block.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/Block.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvaGVyby9sYXJlZC13YWxsZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCi8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KaW1wb3J0IHsgX19hd2FpdGVyIH0gZnJvbSAidHNsaWIiOwppbXBvcnQgeyBCbG9ja1NlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL0Jsb2NrU2VydmljZSc7CmltcG9ydCB7IGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwp2YXIgYmxvY2tzU3RhdGUgPSB7CiAgYmxvY2tzOiBbXQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogYmxvY2tzU3RhdGUsCiAgZ2V0dGVyczogewogICAgYmxvY2tzOiBmdW5jdGlvbiBibG9ja3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmJsb2NrczsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgYmxvY2tzOiBmdW5jdGlvbiBibG9ja3Moc3RhdGUsIF9ibG9ja3MpIHsKICAgICAgc3RhdGUuYmxvY2tzID0gX2Jsb2NrczsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIEdFVF9CTE9DSzogZnVuY3Rpb24gR0VUX0JMT0NLKF9yZWYsIGhlaWdodCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZi5jb21taXQsCiAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYucm9vdEdldHRlcnMsCiAgICAgICAgICBnZXR0ZXJzID0gX3JlZi5nZXR0ZXJzOwogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGdlbmVyYXRpb25IYXNoLCByZXBvc2l0b3J5RmFjdG9yeSwgYWxyZWFkeUxvYWRlZEJsb2NrcywgYmxvY2tJbmZvTW9kZWw7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGdlbmVyYXRpb25IYXNoID0gcm9vdEdldHRlcnNbJ25ldHdvcmsvZ2VuZXJhdGlvbkhhc2gnXTsKICAgICAgICAgICAgICAgIHJlcG9zaXRvcnlGYWN0b3J5ID0gcm9vdEdldHRlcnNbJ25ldHdvcmsvcmVwb3NpdG9yeUZhY3RvcnknXTsKICAgICAgICAgICAgICAgIGFscmVhZHlMb2FkZWRCbG9ja3MgPSBnZXR0ZXJzLmJsb2NrczsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9ja1NlcnZpY2UoKS5nZXRCbG9ja0luZm8ocmVwb3NpdG9yeUZhY3RvcnksIGhlaWdodCwgYWxyZWFkeUxvYWRlZEJsb2NrcykucGlwZShmaXJzdCgpKS50b1Byb21pc2UoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgYmxvY2tJbmZvTW9kZWwgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgY29tbWl0KCdibG9ja3MnLCBuZXcgQmxvY2tTZXJ2aWNlKCkuZ2V0S25vd25CbG9ja0luZm9zKGdlbmVyYXRpb25IYXNoKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBibG9ja0luZm9Nb2RlbCk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/home/hero/lared-wallet/src/store/Block.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAmBA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,KAAT,QAAsB,gBAAtB;AAMA,IAAM,WAAW,GAAe;AAC5B,EAAA,MAAM,EAAE;AADoB,CAAhC;AAIA,eAAe;AACX,EAAA,UAAU,EAAE,IADD;AAEX,EAAA,KAAK,EAAE,WAFI;AAGX,EAAA,OAAO,EAAE;AACL,IAAA,MAAM,EAAE,gBAAC,KAAD;AAAA,aAAuB,KAAK,CAAC,MAA7B;AAAA;AADH,GAHE;AAMX,EAAA,SAAS,EAAE;AACP,IAAA,MAAM,EAAE,gBAAC,KAAD,EAAoB,OAApB,EAAgD;AACpD,MAAA,KAAK,CAAC,MAAN,GAAe,OAAf;AACH;AAHM,GANA;AAWX,EAAA,OAAO,EAAE;AACC,IAAA,SADD,2BAC6C,MAD7C,EAC2D;AAAA,UAA9C,MAA8C,QAA9C,MAA8C;AAAA,UAAtC,WAAsC,QAAtC,WAAsC;AAAA,UAAzB,OAAyB,QAAzB,OAAyB;;;;;;;AACtD,gBAAA,c,GAAyB,WAAW,CAAC,wBAAD,C;AACpC,gBAAA,iB,GAAuC,WAAW,CAAC,2BAAD,C;AAClD,gBAAA,mB,GAAwC,OAAO,CAAC,M;;AAC/B,uBAAM,IAAI,YAAJ,GACxB,YADwB,CACX,iBADW,EACQ,MADR,EACgB,mBADhB,EAExB,IAFwB,CAEnB,KAAK,EAFc,EAGxB,SAHwB,EAAN;;;AAAjB,gBAAA,c;AAIN,gBAAA,MAAM,CAAC,QAAD,EAAW,IAAI,YAAJ,GAAmB,kBAAnB,CAAsC,cAAtC,CAAX,CAAN;iDACO,c;;;;;;;;;AACV;AAXI;AAXE,CAAf","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n// internal dependencies\nimport { BlockInfoModel } from '@/core/database/entities/BlockInfoModel';\nimport { RepositoryFactory, UInt64 } from 'symbol-sdk';\nimport { BlockService } from '@/services/BlockService';\nimport { first } from 'rxjs/operators';\n\ninterface BlockState {\n    blocks: BlockInfoModel[];\n}\n\nconst blocksState: BlockState = {\n    blocks: [],\n};\n\nexport default {\n    namespaced: true,\n    state: blocksState,\n    getters: {\n        blocks: (state: BlockState) => state.blocks,\n    },\n    mutations: {\n        blocks: (state: BlockState, blocks: BlockInfoModel[]) => {\n            state.blocks = blocks;\n        },\n    },\n    actions: {\n        async GET_BLOCK({ commit, rootGetters, getters }, height: UInt64): Promise<BlockInfoModel> {\n            const generationHash: string = rootGetters['network/generationHash'];\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const alreadyLoadedBlocks: BlockInfoModel[] = getters.blocks;\n            const blockInfoModel = await new BlockService()\n                .getBlockInfo(repositoryFactory, height, alreadyLoadedBlocks)\n                .pipe(first())\n                .toPromise();\n            commit('blocks', new BlockService().getKnownBlockInfos(generationHash));\n            return blockInfoModel;\n        },\n    },\n};\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/Mosaic.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/Mosaic.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/store/Mosaic.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport Vue from 'vue';\nimport { AccountInfo, Address, MosaicId, RepositoryFactory } from 'symbol-sdk';\n// internal dependencies\nimport { AwaitLock } from './AwaitLock';\nimport { MosaicService } from '@/services/MosaicService';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { MosaicConfigurationModel } from '@/core/database/entities/MosaicConfigurationModel';\nimport { first, tap } from 'rxjs/operators';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\nimport { MetadataService } from '@/services/MetadataService';\n\nconst Lock = AwaitLock.create();\n\n// mosaic state typing\ninterface MosaicState {\n    initialized: boolean;\n    networkCurrency: NetworkCurrencyModel;\n    mosaics: MosaicModel[];\n    balanceMosaics: MosaicModel[];\n    holdMosaics: MosaicModel[];\n    ownedMosaics: MosaicModel[];\n    networkMosaicId: MosaicId;\n    networkMosaicName: string;\n    networkMosaicTicker: string;\n    accountMosaicConfigurations: Record<string, MosaicConfigurationModel>;\n    isFetchingMosaics: boolean;\n}\n\n// mosaic state initial definition\nconst mosaicState: MosaicState = {\n    initialized: false,\n    networkMosaicId: null,\n    mosaics: [],\n    balanceMosaics: [],\n    holdMosaics: [],\n    ownedMosaics: [],\n    networkCurrency: null,\n    networkMosaicName: '',\n    networkMosaicTicker: '',\n    accountMosaicConfigurations: {},\n    isFetchingMosaics: false,\n};\n\nexport default {\n    namespaced: true,\n    state: mosaicState,\n    getters: {\n        getInitialized: (state: MosaicState) => state.initialized,\n        networkCurrency: (state: MosaicState) => state.networkCurrency,\n        mosaics: (state: MosaicState) => state.mosaics,\n        ownedMosaics: (state: MosaicState) => state.ownedMosaics,\n        holdMosaics: (state: MosaicState) => state.holdMosaics,\n        balanceMosaics: (state: MosaicState) => state.balanceMosaics,\n        networkMosaic: (state: MosaicState) => state.networkMosaicId,\n        networkMosaicTicker: (state: MosaicState) => state.networkMosaicTicker,\n        accountMosaicConfigurations: (state: MosaicState) => state.accountMosaicConfigurations,\n        networkMosaicName: (state: MosaicState) => state.networkMosaicName,\n        isFetchingMosaics: (state: MosaicState) => state.isFetchingMosaics,\n        networkBalanceMosaics: (state: MosaicState) => state.balanceMosaics.find((m) => m.mosaicIdHex === state.networkMosaicId.toHex()),\n    },\n    mutations: {\n        setInitialized: (state: MosaicState, initialized: boolean) => {\n            state.initialized = initialized;\n        },\n        networkCurrency: (state: MosaicState, networkCurrency: NetworkCurrencyModel) => {\n            Vue.set(state, 'networkCurrency', networkCurrency);\n            Vue.set(state, 'networkMosaicId', new MosaicId(networkCurrency.mosaicIdHex));\n            Vue.set(state, 'networkMosaicName', networkCurrency.namespaceIdFullname);\n            Vue.set(state, 'networkMosaicTicker', networkCurrency.ticker);\n        },\n        mosaics: (\n            state: MosaicState,\n            {\n                mosaics,\n                currentSignerAddress,\n                networkCurrency,\n                mosaicMetadataList,\n            }: {\n                mosaics: MosaicModel[];\n                currentSignerAddress: Address;\n                networkCurrency: NetworkCurrencyModel;\n                mosaicMetadataList: MetadataModel[];\n            },\n        ) => {\n            const uniqueMosaics = mosaics.map((mosaic) => {\n                mosaic.metadataList = MetadataService.getMosaicMetadataByTargetId(mosaicMetadataList, mosaic.mosaicIdHex);\n                return mosaic;\n            });\n            const ownedMosaics = uniqueMosaics.filter(\n                (m) => m.ownerRawPlain === currentSignerAddress.plain() && m.addressRawPlain === currentSignerAddress.plain(),\n            );\n\n            const holdMosaics = uniqueMosaics\n                .filter((m) => m.addressRawPlain === currentSignerAddress.plain())\n                .sort((m1, m2) => {\n                    const owner1 = m1.ownerRawPlain === currentSignerAddress.plain();\n                    const owner2 = m2.ownerRawPlain === currentSignerAddress.plain();\n                    return Number(owner1) - Number(owner2);\n                });\n\n            const noMosaic = networkCurrency && !holdMosaics.find((m) => m.isCurrencyMosaic);\n\n            const balanceMosaics = (noMosaic\n                ? [\n                      ...holdMosaics,\n                      {\n                          mosaicIdHex: networkCurrency.mosaicIdHex,\n                          divisibility: networkCurrency.divisibility,\n                          name: networkCurrency.namespaceIdFullname,\n                          isCurrencyMosaic: true,\n                          balance: 0,\n                      } as MosaicModel,\n                  ]\n                : [...holdMosaics]\n            ).filter((m) => m.isCurrencyMosaic || m.balance > 0);\n            Vue.set(state, 'mosaics', uniqueMosaics);\n            Vue.set(state, 'balanceMosaics', balanceMosaics);\n            Vue.set(state, 'ownedMosaics', ownedMosaics);\n            Vue.set(\n                state,\n                'holdMosaics',\n                holdMosaics.filter((m) => m.ownerRawPlain === currentSignerAddress.plain() || m.balance > 0),\n            );\n        },\n        accountMosaicConfigurations: (state: MosaicState, accountMosaicConfigurations: Record<string, MosaicConfigurationModel>) =>\n            Vue.set(state, 'accountMosaicConfigurations', accountMosaicConfigurations),\n\n        isFetchingMosaics: (state: MosaicState, isFetchingMosaics: boolean) => Vue.set(state, 'isFetchingMosaics', isFetchingMosaics),\n    },\n    actions: {\n        async initialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', true);\n            };\n            // acquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n        async uninitialize({ commit, getters }) {\n            const callback = async () => {\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        async LOAD_NETWORK_CURRENCIES({ commit, rootGetters }) {\n            const mosaicService = new MosaicService();\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const generationHash: string = rootGetters['network/generationHash'];\n            await mosaicService\n                .getNetworkCurrencies(repositoryFactory, generationHash)\n                .pipe(\n                    tap((networkCurrencies) => {\n                        commit('networkCurrency', networkCurrencies.networkCurrency);\n                    }),\n                    first(),\n                )\n                .toPromise();\n        },\n\n        LOAD_MOSAICS({ commit, rootGetters }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const networkCurrency: NetworkCurrencyModel = rootGetters['mosaic/networkCurrency'];\n            const accountsInfo: AccountInfo[] = rootGetters['account/accountsInfo'] || [];\n            const generationHash = rootGetters['network/generationHash'];\n            const mosaicMetadataList: MetadataModel[] = rootGetters['metadata/mosaicMetadataList'];\n\n            commit('isFetchingMosaics', true);\n\n            new MosaicService()\n                .getMosaics(repositoryFactory, generationHash, networkCurrency, accountsInfo)\n                .subscribe((mosaics) => {\n                    const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n                    if (!currentSignerAddress) {\n                        return;\n                    }\n                    commit('mosaics', {\n                        mosaics: mosaics,\n                        currentSignerAddress,\n                        networkCurrency,\n                        mosaicMetadataList,\n                    });\n                })\n                .add(() => commit('isFetchingMosaics', false));\n        },\n\n        RESET_MOSAICS({ commit, rootGetters }) {\n            const networkCurrency: NetworkCurrencyModel = rootGetters['mosaic/networkCurrency'];\n            commit('mosaics', { mosaics: [], undefined, networkCurrency });\n        },\n\n        SIGNER_CHANGED({ commit, rootGetters, getters }) {\n            const currentSignerAddress: Address = rootGetters['account/currentSignerAddress'];\n            const networkCurrency: NetworkCurrencyModel = rootGetters['mosaic/networkCurrency'];\n            if (!currentSignerAddress) {\n                return;\n            }\n            const mosaicService = new MosaicService();\n            commit('accountMosaicConfigurations', mosaicService.getMosaicConfigurationsByAccount(rootGetters['account/currentAccount']));\n            commit('mosaics', {\n                mosaics: getters['mosaics'],\n                currentSignerAddress,\n                networkCurrency,\n            });\n        },\n\n        HIDE_MOSAIC({ commit }, { mosaicId, account }) {\n            commit(\n                'accountMosaicConfigurations',\n                new MosaicService().changeMosaicConfiguration(mosaicId, account, {\n                    hidden: true,\n                }),\n            );\n        },\n        SHOW_MOSAIC({ commit }, { mosaicId, account }) {\n            commit(\n                'accountMosaicConfigurations',\n                new MosaicService().changeMosaicConfiguration(mosaicId, account, {\n                    hidden: false,\n                }),\n            );\n        },\n    },\n};\n"],"sourceRoot":""}]}
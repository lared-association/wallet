{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/MultisigCosignatoriesDisplay/MultisigCosignatoriesDisplayTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/MultisigCosignatoriesDisplay/MultisigCosignatoriesDisplayTs.ts","mtime":1611927202408},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/MultisigCosignatoriesDisplay/MultisigCosignatoriesDisplayTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { MultisigAccountInfo, Address } from 'symbol-sdk';\n\n// child components\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport AddCosignatoryInput from '@/components/AddCosignatoryInput/AddCosignatoryInput.vue';\n\n// custom types\ntype AddOrRemove = 'add' | 'remove';\n\ninterface Modification {\n    cosignatory: Address;\n    addOrRemove: AddOrRemove;\n}\n\ntype Cosignatories = { address: Address }[];\n\n@Component({\n    components: {\n        FormRow,\n        AddCosignatoryInput,\n    },\n})\nexport class MultisigCosignatoriesDisplayTs extends Vue {\n    @Prop({ default: null }) multisig: MultisigAccountInfo;\n    @Prop({ default: false }) modifiable: boolean;\n    @Prop({ default: {} }) cosignatoryModifications: Record<string, Modification>;\n    @Prop({\n        default: '',\n    })\n    currentAddress: string;\n    /**\n     * Whether the add cosignatory form input is visible\n     */\n    protected isAddingCosignatory = false;\n\n    /**\n     * Cosignatories to add\n     * @type {Cosignatories}\n     */\n    protected get addModifications(): Cosignatories {\n        return this.getFilteredModifications('add');\n    }\n\n    /**\n     * Cosignatories to remove\n     * @type {Cosignatories}\n     */\n    protected get removeModifications(): Cosignatories {\n        return this.getFilteredModifications('remove');\n    }\n\n    /**\n     * Internal helper to get filtered cosignatory modifications\n     * @param {AddOrRemove} addOrRemoveFilter\n     * @returns {Cosignatories}\n     */\n    private getFilteredModifications(addOrRemoveFilter: AddOrRemove): Cosignatories {\n        return Object.values(this.cosignatoryModifications)\n            .filter(({ addOrRemove }) => addOrRemove === addOrRemoveFilter)\n            .map(({ cosignatory }) => ({\n                address: cosignatory,\n            }));\n    }\n\n    /**\n     * The multisig account cosignatories after modifications\n     * @type {{ publicKey: string; address: string }[]}\n     */\n    protected get cosignatories(): { address: Address }[] {\n        if (!this.multisig) {\n            return [];\n        }\n\n        return this.multisig.cosignatoryAddresses\n            .filter((address) => !this.cosignatoryModifications[address.plain()])\n            .map((address) => ({ address }));\n    }\n\n    /**\n     * Hook called when a cosignatory is added\n     * @param {PublicAccount} publicAccount\n     */\n    protected onAddCosignatory(cosigAddress: Address): void {\n        const isCosignatory = this.cosignatories.find(({ address }) => cosigAddress.plain() === address.plain());\n\n        if (isCosignatory || this.cosignatoryModifications[cosigAddress.plain()]) {\n            this.$store.dispatch('notification/ADD_WARNING', 'warning_already_a_cosignatory');\n            return;\n        } else if (cosigAddress.plain() === this.currentAddress) {\n            this.$store.dispatch('notification/ADD_WARNING', 'current_cosigner_matches_current_account');\n            return;\n        } else {\n            this.$emit('add', cosigAddress);\n        }\n    }\n\n    /**\n     * Hook called when a cosignatory is removed\n     * @param {string} publicKey\n     */\n    protected onRemoveCosignatory(address: Address): void {\n        this.$emit('remove', address);\n    }\n\n    /**\n     * Hook called when a cosignatory modification is undone\n     * @param {string} thePublicKey\n     */\n    protected onUndoModification(theAddress: Address): void {\n        this.$emit('undo', theAddress);\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AccountSelectorPanel/AccountSelectorPanelTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AccountSelectorPanel/AccountSelectorPanelTs.ts","mtime":1611927201598},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/AccountSelectorPanel/AccountSelectorPanelTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { MosaicId, NetworkType } from 'symbol-sdk';\nimport { ValidationProvider } from 'vee-validate';\n// internal dependencies\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { AccountService } from '@/services/AccountService';\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\n// child components\n// @ts-ignore\nimport MosaicAmountDisplay from '@/components/MosaicAmountDisplay/MosaicAmountDisplay.vue';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormLabel from '@/components/FormLabel/FormLabel.vue';\n// @ts-ignore\nimport ModalFormSubAccountCreation from '@/views/modals/ModalFormSubAccountCreation/ModalFormSubAccountCreation.vue';\n// @ts-ignore\nimport AmountDisplay from '@/components/AmountDisplay/AmountDisplay.vue';\n// @ts-ignore\nimport NavigationLinks from '@/components/NavigationLinks/NavigationLinks.vue';\n// @ts-ignore\nimport ModalBackupProfile from '@/views/modals/ModalBackupProfile/ModalBackupProfile.vue';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\n\n@Component({\n    components: {\n        MosaicAmountDisplay,\n        ModalFormSubAccountCreation,\n        ErrorTooltip,\n        FormLabel,\n        ValidationProvider,\n        AmountDisplay,\n        ModalBackupProfile,\n        NavigationLinks,\n    },\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            currentAccount: 'account/currentAccount',\n            knownAccounts: 'account/knownAccounts',\n            networkType: 'network/networkType',\n            mosaics: 'mosaic/mosaics',\n            networkMosaic: 'mosaic/networkMosaic',\n            networkCurrency: 'mosaic/networkCurrency',\n            isPrivateKeyProfile: 'profile/isPrivateKeyProfile',\n        }),\n    },\n})\nexport class AccountSelectorPanelTs extends Vue {\n    /**\n     * The network currency.\n     */\n    public networkCurrency: NetworkCurrencyModel;\n\n    /**\n     * Currently active networkType\n     * @see {Store.Network}\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {ProfileModel}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Known accounts identifiers\n     * @var {string[]}\n     */\n    public knownAccounts: AccountModel[];\n    /**\n     * Networks currency mosaic\n     * @var {MosaicId}\n     */\n    public networkMosaic: MosaicId;\n\n    /**\n     * Current account owned mosaics\n     * @private\n     * @type {MosaicInfo[]}\n     */\n    private mosaics: MosaicModel[];\n\n    /**\n     * Accounts repository\n     * @var {AccountService}\n     */\n    public accountService: AccountService;\n\n    /**\n     * Whether user is currently adding an account (modal)\n     * @var {boolean}\n     */\n    public isAddingAccount: boolean = false;\n    /**\n     * Whether currently viewing export\n     * @var {boolean}\n     */\n    public isViewingExportModal: boolean = false;\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    public isPrivateKeyProfile: boolean;\n\n    /**\n     * Hook called when the component is created\n     * @return {void}\n     */\n    public async created() {\n        this.accountService = new AccountService();\n    }\n\n    /// region computed properties getter/setter\n    public get balances(): Map<string, number> {\n        const networkMosaics = this.mosaics.filter((m) => m.mosaicIdHex === this.networkMosaic.toHex());\n        return Object.assign({}, ...networkMosaics.map((s) => ({ [s.addressRawPlain]: s.balance })));\n        // return this.addressesBalances\n    }\n\n    public get currentAccountIdentifier(): string {\n        return !this.currentAccount ? '' : this.currentAccount.id;\n    }\n\n    public set currentAccountIdentifier(id: string) {\n        if (!id || !id.length) {\n            return;\n        }\n\n        const account = this.accountService.getAccount(id);\n        if (!account) {\n            return;\n        }\n\n        if (!this.currentAccount || id !== this.currentAccount.id) {\n            this.$store.dispatch('account/SET_CURRENT_ACCOUNT', account);\n            this.$emit('input', account.id);\n        }\n    }\n\n    public get currentAccounts(): AccountModel[] {\n        return this.knownAccounts;\n    }\n\n    public get seedAccounts(): AccountModel[] {\n        return this.knownAccounts.filter((_) => _.type === 1);\n    }\n\n    public get pkAccounts(): AccountModel[] {\n        return this.knownAccounts.filter((_) => _.type !== 1);\n    }\n\n    public get hasAddAccountModal(): boolean {\n        return this.isAddingAccount;\n    }\n\n    public set hasAddAccountModal(f: boolean) {\n        this.isAddingAccount = f;\n    }\n\n    public get hasBackupProfileModal(): boolean {\n        return this.isViewingExportModal;\n    }\n\n    public set hasBackupProfileModal(f: boolean) {\n        this.isViewingExportModal = f;\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Whether the account item is the current account\n     * @param item\n     * @return {boolean}\n     */\n    public isActiveAccount(item): boolean {\n        return item.id === this.currentAccount.id;\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/pages/profiles/create-profile/show-mnemonic/ShowMnemonicTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/pages/profiles/create-profile/show-mnemonic/ShowMnemonicTs.ts","mtime":1611927227945},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/pages/profiles/create-profile/show-mnemonic/ShowMnemonicTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { mapGetters } from 'vuex';\nimport { Component, Vue } from 'vue-property-decorator';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\n// @ts-ignore\nimport MnemonicDisplay from '@/components/MnemonicDisplay/MnemonicDisplay.vue';\n// @ts-ignore\nimport ButtonCopyToClipboard from '@/components/ButtonCopyToClipboard/ButtonCopyToClipboard.vue';\nimport { Formatters } from '@/core/utils/Formatters';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { MnemonicQR, QRCodeGenerator } from 'symbol-qr-library';\n// @ts-ignore\nimport failureIcon from '@/views/resources/img/monitor/failure.png';\nimport { Password } from 'symbol-sdk';\nimport { IHDAccountInfo, LaredPaperWallet } from 'lared-paper-wallets';\nimport { UIHelpers } from '@/core/utils/UIHelpers';\nimport { AccountService } from '@/services/AccountService';\n\n@Component({\n    components: { MnemonicDisplay, ButtonCopyToClipboard },\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            currentMnemonic: 'temporary/mnemonic',\n            currentPassword: 'temporary/password',\n        }),\n    },\n})\nexport default class ShowMnemonicTs extends Vue {\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {string}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Temporary Mnemonic pass phrase\n     * @var {MnemonicPassPhrase}\n     */\n    public currentMnemonic: MnemonicPassPhrase;\n\n    /**\n     * Whether mnemonic is shown in plain text\n     * @var {boolean}\n     */\n    public showMnemonic: boolean = false;\n\n    /**\n     * Base64 represatation of QR Code\n     * @var {string}\n     */\n    public qrBase64: string = failureIcon;\n\n    /**\n     * Temporary stored password\n     * @see {Store.Temporary}\n     * @var {Password}\n     */\n    public currentPassword: Password;\n\n    /**\n     * Mnemonic QR Code to be exported\n     * @var {MnemonicQR}\n     */\n    public exportMnemonicQR: MnemonicQR;\n\n    /**\n     * Hook called when the component is mounted\n     */\n    public created() {\n        this.exportMnemonicQR = QRCodeGenerator.createExportMnemonic(\n            this.currentMnemonic.plain,\n            this.currentProfile.networkType,\n            this.currentProfile.generationHash,\n            this.currentPassword.value,\n        );\n        this.exportMnemonicQR.toBase64().subscribe((base64) => (this.qrBase64 = base64));\n    }\n\n    /// region computed properties getter/setter\n    get mnemonicWordsList() {\n        if (this.currentMnemonic) {\n            return this.currentMnemonic.plain.split(' ');\n        }\n        this.$store.dispatch('notification/ADD_ERROR', NotificationType.NO_MNEMONIC_INFO);\n        this.$router.push({ name: 'profiles.createProfile.info' });\n    }\n    public get waitingCopyString(): string {\n        return Formatters.splitArrayByDelimiter(this.mnemonicWordsList);\n    }\n\n    public async downloadPaperWallet() {\n        const accountService = new AccountService();\n        const mnemonicObj = new MnemonicPassPhrase(this.currentMnemonic.plain);\n        const account = accountService.getAccountByPath(mnemonicObj, this.currentProfile.networkType);\n        const rootAccountInfo: IHDAccountInfo = {\n            mnemonic: this.currentMnemonic.plain,\n            rootAccountPublicKey: account.publicKey,\n            rootAccountAddress: account.address.pretty(),\n        };\n\n        const paperWallet = new LaredPaperWallet(rootAccountInfo, [], this.currentProfile.networkType, this.currentProfile.generationHash);\n        const pdfArray: Uint8Array = await paperWallet.toPdf();\n        return UIHelpers.downloadBytesAsFile(pdfArray, `paper-wallet-${this.currentProfile.profileName}`, 'application/pdf');\n    }\n    /// end-region computed properties getter/setter\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormTransferTransaction/MosaicInputsManager.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormTransferTransaction/MosaicInputsManager.ts","mtime":1606213958973},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormTransferTransaction/MosaicInputsManager.ts"],"names":[],"mappings":"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","sourcesContent":["// internal dependencies\nimport Vue from 'vue';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\n\nexport class MosaicInputsManager {\n    /**\n     * Maps mosaic hex ids to slots (input indexes)\n     * @private\n     */\n    private mosaicMap: Record<string, number | null> = {};\n\n    /**\n     * Initialize a new instance of MosaicInputsManager\n     * @static\n     * @param {MosaicModel[]} mosaics\n     * @param {MosaicService} mosaicService\n     * @returns {MosaicInputsManager}\n     */\n    public static initialize(mosaics: MosaicModel[]): MosaicInputsManager {\n        return new MosaicInputsManager(mosaics || []);\n    }\n\n    /**\n     * Creates an instance of MosaicInputsManager.\n     * @param {MosaicModel[]} mosaics\n     */\n    private constructor(mosaics: MosaicModel[]) {\n        // Set mosaicMap with null values\n        mosaics.forEach(({ mosaicIdHex }) => Vue.set(this.mosaicMap, mosaicIdHex, null));\n    }\n\n    /**\n     * Add mosaics to the manager after initialization\n     * @param {MosaicModel[]} mosaics\n     */\n    public addMosaics(mosaics: MosaicModel[]): void {\n        mosaics.forEach(({ mosaicIdHex }) => {\n            // skip if the mosaic is known\n            if (this.mosaicMap[mosaicIdHex]) {\n                return;\n            }\n            // add the mosaic\n            Vue.set(this.mosaicMap, mosaicIdHex, null);\n        });\n    }\n\n    /**\n     * Whether the mosaicMap has a free slot\n     * If yes, a new mosaic input can be created\n     * @returns {boolean}\n     */\n    public hasFreeSlots(): boolean {\n        return Object.values(this.mosaicMap).find((values) => values === null) !== undefined;\n    }\n\n    /**\n     * Allocates a mosaic hex to a slot\n     * @param {string} hexId\n     * @param {number} index\n     */\n    public setSlot(hexId: string, index: number): void {\n        // get the slot\n        const slot = this.mosaicMap[hexId];\n\n        // throw if a slot does not exist for the provided mosaic id\n        if (slot === undefined) {\n            throw new Error(`${hexId} does not exist in ${JSON.stringify(this.mosaicMap)}`);\n        }\n\n        // throw if the slot is already allocated to another input\n        if (slot !== null && slot !== index) {\n            throw new Error(`${hexId} is already allocated to input ${slot}`);\n        }\n\n        // unset the current slot allocation\n        this.unsetSlot(index);\n\n        // allocate the entry\n        Vue.set(this.mosaicMap, hexId, index);\n    }\n\n    /**\n     * Set a slot to null\n     * @param {number} index\n     */\n    public unsetSlot(index: number): void {\n        // get the slot entry\n        const entry = this.getEntryBySlot(index);\n\n        // ignore if the slot had no allocated entry\n        if (entry === undefined) {\n            return;\n        }\n\n        // unset the entry slot allocation\n        const [hexId] = entry;\n        Vue.set(this.mosaicMap, hexId, null);\n    }\n\n    /**\n     * Returns mosaics that can be used by a slot\n     * @param {number} index\n     * @returns {string[]}\n     */\n    public getMosaicsBySlot(index: number): string[] {\n        // get allocated mosaic\n        const allocatedEntry = this.getEntryBySlot(index);\n\n        // get non-allocated entries\n        const nonAllocatedEntries = Object.entries(this.mosaicMap)\n            .filter(([, slot]) => slot === null)\n            .map(([hex]) => hex);\n\n        return allocatedEntry ? [allocatedEntry[0], ...nonAllocatedEntries] : nonAllocatedEntries;\n    }\n\n    /**\n     * Returns an entry given a slot number\n     * @private\n     * @param {number} index\n     * @returns {([string, number] | undefined)}\n     */\n    private getEntryBySlot(index: number): [string, number] | undefined {\n        return Object.entries(this.mosaicMap).find(([, slot]) => slot == index);\n    }\n}\n"],"sourceRoot":""}]}
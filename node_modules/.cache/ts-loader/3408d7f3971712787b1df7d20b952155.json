{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormTransactionBase/FormTransactionBase.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormTransactionBase/FormTransactionBase.ts","mtime":1611927227649},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgppbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICIvbW50L2MvVXNlcnMvanVzdGkvRGVza3RvcC9TVVBFUkhPVy9TeW1ib2xXYWxsZXQvbGFyZWQtd2FsbGV0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgppbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCB7IEFkZHJlc3MsIERlYWRsaW5lIH0gZnJvbSAnc3ltYm9sLXNkayc7CmltcG9ydCB7IENvbXBvbmVudCwgVnVlLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IFRyYW5zYWN0aW9uQ29tbWFuZCwgVHJhbnNhY3Rpb25Db21tYW5kTW9kZSB9IGZyb20gJ0Avc2VydmljZXMvVHJhbnNhY3Rpb25Db21tYW5kJzsKCnZhciBGb3JtVHJhbnNhY3Rpb25CYXNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVnVlKSB7CiAgX2luaGVyaXRzKEZvcm1UcmFuc2FjdGlvbkJhc2UsIF9WdWUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZvcm1UcmFuc2FjdGlvbkJhc2UpOwoKICBmdW5jdGlvbiBGb3JtVHJhbnNhY3Rpb25CYXNlKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtVHJhbnNhY3Rpb25CYXNlKTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLy8gZW5kLXJlZ2lvbiBwcm9wZXJ0eSB3YXRjaGVzCgogICAgLyoqCiAgICAgKiBXaGV0aGVyIHRoZSBmb3JtIGlzIGN1cnJlbnRseSBhd2FpdGluZyBhIHNpZ25hdHVyZQogICAgICogQHZhciB7Ym9vbGVhbn0KICAgICAqLwoKICAgIF90aGlzLmlzQXdhaXRpbmdTaWduYXR1cmUgPSBmYWxzZTsKICAgIHJldHVybiBfdGhpczsKICB9IC8vLyBlbmQtcmVnaW9uIHN0b3JlIGdldHRlcnMKICAvLy8gcmVnaW9uIHByb3BlcnR5IHdhdGNoZXMKCgogIF9jcmVhdGVDbGFzcyhGb3JtVHJhbnNhY3Rpb25CYXNlLCBbewogICAga2V5OiAib25DdXJyZW50QWNjb3VudENoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25DdXJyZW50QWNjb3VudENoYW5nZSgpIHsKICAgICAgdGhpcy5yZXNldEZvcm0oKTsgLy8gQFRPRE86IHByb2JhYmx5IG5vdCB0aGUgYmVzdCB3YXkKCiAgICAgIHRoaXMucmVzZXRGb3JtVmFsaWRhdGlvbigpOwogICAgfQogICAgLyoqCiAgICAgKiBIb29rIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZAogICAgICogQHJldHVybiB7dm9pZH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCduZXR3b3JrL0xPQURfVFJBTlNBQ1RJT05fRkVFUycpOwogICAgICAgICAgICAgICAgdGhpcy5yZXNldEZvcm0oKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKICAgIH0KICAgIC8qKgogICAgICogaXQgY3JlYXRlcyB0aGUgZGVhZGxpbmVzIGZvciB0aGUgdHJhbnNhY3Rpb25zLgogICAgICovCgogIH0sIHsKICAgIGtleTogImNyZWF0ZURlYWRsaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVEZWFkbGluZSgpIHsKICAgICAgcmV0dXJuIERlYWRsaW5lLmNyZWF0ZSh0aGlzLmVwb2NoQWRqdXN0bWVudCk7CiAgICB9CiAgICAvKioKICAgICAqIEhvb2sgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBiZWluZyBkZXN0cm95ZWQgKGJlZm9yZSkKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYmVmb3JlRGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRBY2NvdW50KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFNpZ25lci5hZGRyZXNzLmVxdWFscyhBZGRyZXNzLmNyZWF0ZUZyb21SYXdBZGRyZXNzKHRoaXMuY3VycmVudEFjY291bnQuYWRkcmVzcykpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhY2NvdW50L1NFVF9DVVJSRU5UX1NJR05FUicsIHsKICAgICAgICAgICAgICAgICAgYWRkcmVzczogQWRkcmVzcy5jcmVhdGVGcm9tUmF3QWRkcmVzcyh0aGlzLmN1cnJlbnRBY2NvdW50LmFkZHJlc3MpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwogICAgfQogICAgLyoqCiAgICAgKiBDdXJyZW50IHNpZ25lcidzIG11bHRpc2lnIGFjY291bnRzCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHt7cHVibGljS2V5OiBzdHJpbmcsIGxhYmVsOiBzdHJpbmd9W119CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVzZXRGb3JtIiwKICAgIC8vLyBlbmQtcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgoKICAgIC8qKgogICAgICogUmVzZXQgdGhlIGZvcm0gd2l0aCBwcm9wZXJ0aWVzCiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm90IG92ZXJsb2FkZWQgaW4gZGVyaXZhdGUgY29tcG9uZW50CiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEZvcm0oKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiTWV0aG9kICdyZXNldEZvcm0oKScgbXVzdCBiZSBvdmVybG9hZGVkIGluIGRlcml2YXRlIGNvbXBvbmVudHMuIik7CiAgICB9CiAgICAvKioKICAgICAqIEdldHRlciBmb3Igd2hldGhlciBmb3JtcyBzaG91bGQgYWdncmVnYXRlIHRyYW5zYWN0aW9ucyBpbiBCT05ERUQKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXNNdWx0aXNpZ01vZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzTXVsdGlzaWdNb2RlKCkgewogICAgICByZXR1cm4gdGhpcy5pc0Nvc2lnbmF0b3J5TW9kZSA9PT0gdHJ1ZTsKICAgIH0KICAgIC8qKgogICAgICogR2V0dGVyIGZvciB0cmFuc2FjdGlvbnMgdGhhdCB3aWxsIGJlIHN0YWdlZAogICAgICogQHRocm93cyB7RXJyb3J9IElmIG5vdCBvdmVybG9hZGVkIGluIGRlcml2YXRlIGNvbXBvbmVudAogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFRyYW5zYWN0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25zKCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIkdldHRlciBtZXRob2QgJ2dldFRyYW5zYWN0aW9ucygpJyBtdXN0IGJlIG92ZXJsb2FkZWQgaW4gZGVyaXZhdGUgY29tcG9uZW50cy4iKTsKICAgIH0KICAgIC8qKgogICAgICogU2V0dGVyIGZvciB0cmFuc2FjdGlvbnMgdGhhdCB3aWxsIGJlIHN0YWdlZAogICAgICogQHBhcmFtIHtUcmFuc2FjdGlvbltdfSB0cmFuc2FjdGlvbnMKICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBub3Qgb3ZlcmxvYWRlZCBpbiBkZXJpdmF0ZSBjb21wb25lbnQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzZXRUcmFuc2FjdGlvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbnMpIHsKICAgICAgLy9UT0RPIGRvIHdlIG5lZWQgdGhlc2UgbWV0aG9kcz8KICAgICAgdmFyIGVycm9yID0gInNldFRyYW5zYWN0aW9ucygpIG11c3QgYmUgb3ZlcmxvYWRlZC4gQ2FsbCBnb3QgIi5jb25jYXQodHJhbnNhY3Rpb25zLmxlbmd0aCwgIiB0cmFuc2FjdGlvbnMuIik7CiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7CiAgICB9CiAgICAvKioKICAgICAqIEhvb2sgY2FsbGVkIHdoZW4gdGhlIGNvbmZpcm1hdGlvbiBtb2RhbCBtdXN0IG9wZW4KICAgICAqIEBzZWUge0Zvcm1UcmFuc2FjdGlvbkJhc2V9CiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm90IG92ZXJsb2FkZWQgaW4gZGVyaXZhdGUgY29tcG9uZW50CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25TaG93Q29uZmlybWF0aW9uTW9kYWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU2hvd0NvbmZpcm1hdGlvbk1vZGFsKCkgewogICAgICB0aGlzLmhhc0NvbmZpcm1hdGlvbk1vZGFsID0gdHJ1ZTsKICAgIH0KICAgIC8qKgogICAgICogSG9vayBjYWxsZWQgd2hlbiBhIHNpZ25lciBpcyBzZWxlY3RlZC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdWJsaWNLZXkKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkNoYW5nZVNpZ25lciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VTaWduZXIoYWRkcmVzcykgewogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhY2NvdW50L1NFVF9DVVJSRU5UX1NJR05FUicsIHsKICAgICAgICAgICAgICAgICAgYWRkcmVzczogQWRkcmVzcy5jcmVhdGVGcm9tUmF3QWRkcmVzcyhhZGRyZXNzKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgdGhpcyk7CiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRUcmFuc2FjdGlvbkNvbW1hbmRNb2RlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkNvbW1hbmRNb2RlKHRyYW5zYWN0aW9ucykgewogICAgICBpZiAodGhpcy5pc011bHRpc2lnTW9kZSgpKSB7CiAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uQ29tbWFuZE1vZGUuTVVMVElTSUdOOwogICAgICB9CgogICAgICBpZiAodHJhbnNhY3Rpb25zLmxlbmd0aCA+IDEpIHsKICAgICAgICByZXR1cm4gVHJhbnNhY3Rpb25Db21tYW5kTW9kZS5BR0dSRUdBVEU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uQ29tbWFuZE1vZGUuU0lNUExFOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlVHJhbnNhY3Rpb25Db21tYW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbkNvbW1hbmQoKSB7CiAgICAgIHZhciB0cmFuc2FjdGlvbnMgPSB0aGlzLmdldFRyYW5zYWN0aW9ucygpOwogICAgICB2YXIgbW9kZSA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25Db21tYW5kTW9kZSh0cmFuc2FjdGlvbnMpOwogICAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uQ29tbWFuZChtb2RlLCB0aGlzLnNlbGVjdGVkU2lnbmVyLCB0aGlzLmN1cnJlbnRTaWduZXJQdWJsaWNLZXksIHRyYW5zYWN0aW9ucywgdGhpcy5uZXR3b3JrTW9zYWljLCB0aGlzLmdlbmVyYXRpb25IYXNoLCB0aGlzLm5ldHdvcmtUeXBlLCB0aGlzLmVwb2NoQWRqdXN0bWVudCwgdGhpcy5uZXR3b3JrQ29uZmlndXJhdGlvbiwgdGhpcy50cmFuc2FjdGlvbkZlZXMsIHRoaXMucmVxdWlyZWRDb3NpZ25hdHVyZXMpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uU3VibWl0IiwKCiAgICAvKioKICAgICAqIFByb2Nlc3MgZm9ybSBpbnB1dAogICAgICogQHJldHVybiB7dm9pZH0KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3VibWl0KCkgewogICAgICAvLyAtIG9wZW4gc2lnbmF0dXJlIG1vZGFsCiAgICAgIHRoaXMuY29tbWFuZCA9IHRoaXMuY3JlYXRlVHJhbnNhY3Rpb25Db21tYW5kKCk7CiAgICAgIHRoaXMub25TaG93Q29uZmlybWF0aW9uTW9kYWwoKTsKICAgIH0KICAgIC8qKgogICAgICogSG9vayBjYWxsZWQgd2hlbiB0aGUgY2hpbGQgY29tcG9uZW50IE1vZGFsVHJhbnNhY3Rpb25Db25maXJtYXRpb24gdHJpZ2dlcnMKICAgICAqIHRoZSBldmVudCAnc3VjY2VzcycKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkNvbmZpcm1hdGlvblN1Y2Nlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ29uZmlybWF0aW9uU3VjY2VzcygpIHsKICAgICAgLy8gaWYgdGhlIGZvcm0gd2FzIGluIG11bHRpc2lnLCBzZXQgdGhlIHNpZ25lciB0byBiZSB0aGUgbWFpbiBhY2NvdW50CiAgICAgIC8vIHRoaXMgdHJpZ2dlcnMgcmVzZXRGb3JtIGluIHRoZSBAV2F0Y2goJ2N1cnJlbnRBY2NvdW50JykgaG9vawogICAgICBpZiAodGhpcy5pc011bHRpc2lnTW9kZSgpKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FjY291bnQvU0VUX0NVUlJFTlRfQUNDT1VOVCcsIHRoaXMuY3VycmVudEFjY291bnQpOwogICAgICB9CgogICAgICB0aGlzLnJlc2V0Rm9ybSgpOwogICAgICB0aGlzLmhhc0NvbmZpcm1hdGlvbk1vZGFsID0gZmFsc2U7CiAgICAgIHRoaXMuJGVtaXQoJ29uLWNvbmZpcm1hdGlvbi1zdWNjZXNzJyk7IC8vIFJlc2V0IGZvcm0gdmFsaWRhdGlvbgoKICAgICAgdGhpcy5yZXNldEZvcm1WYWxpZGF0aW9uKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJlc2V0IGZvcm0gdmFsaWRhdGlvbgogICAgICogQHByaXZhdGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZXNldEZvcm1WYWxpZGF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEZvcm1WYWxpZGF0aW9uKCkgewogICAgICB0aGlzLiRyZWZzICYmIHRoaXMuJHJlZnMub2JzZXJ2ZXIgJiYgdGhpcy4kcmVmcy5vYnNlcnZlci5yZXNldCgpOwogICAgfQogICAgLyoqCiAgICAgKiBIb29rIGNhbGxlZCB3aGVuIHRoZSBjaGlsZCBjb21wb25lbnQgTW9kYWxUcmFuc2FjdGlvbkNvbmZpcm1hdGlvbiB0cmlnZ2VycwogICAgICogdGhlIGV2ZW50ICdlcnJvcicKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25Db25maXJtYXRpb25FcnJvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Db25maXJtYXRpb25FcnJvcihlcnJvcikgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbm90aWZpY2F0aW9uL0FERF9FUlJPUicsIGVycm9yKTsKICAgIH0KICAgIC8qKgogICAgICogSG9vayBjYWxsZWQgd2hlbiB0aGUgY2hpbGQgY29tcG9uZW50IE1vZGFsVHJhbnNhY3Rpb25Db25maXJtYXRpb24gdHJpZ2dlcnMKICAgICAqIHRoZSBldmVudCAnY2xvc2UnCiAgICAgKiBAcmV0dXJuIHt2b2lkfQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uQ29uZmlybWF0aW9uQ2FuY2VsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNvbmZpcm1hdGlvbkNhbmNlbCgpIHsKICAgICAgdGhpcy5oYXNDb25maXJtYXRpb25Nb2RhbCA9IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogIm11bHRpc2lnQWNjb3VudHMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBzaWduZXJzID0gdGhpcy5zaWduZXJzOyAvLyBpZiAic2VsZiIgaXMgbXVsdGlzaWcsIGFsc28gcmV0dXJuIHNlbGYKCiAgICAgIGlmICh0aGlzLmlzTXVsdGlzaWdBY2NvdW50KSB7CiAgICAgICAgcmV0dXJuIHNpZ25lcnM7CiAgICAgIH0gLy8gYWxsIHNpZ25lcnMgZXhjZXB0IGN1cnJlbnQgYWNjb3VudAoKCiAgICAgIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkoc2lnbmVycykuc3BsaWNlKDEpOwogICAgfQogIH0sIHsKICAgIGtleTogImhhc0NvbmZpcm1hdGlvbk1vZGFsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5pc0F3YWl0aW5nU2lnbmF0dXJlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGYpIHsKICAgICAgdGhpcy5pc0F3YWl0aW5nU2lnbmF0dXJlID0gZjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc011bHRpc2lnQWNjb3VudCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8gJiYgdGhpcy5jdXJyZW50QWNjb3VudE11bHRpc2lnSW5mby5pc011bHRpc2lnKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVxdWlyZWRDb3NpZ25hdHVyZXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRTaWduZXJNdWx0aXNpZ0luZm8gPyB0aGlzLmN1cnJlbnRTaWduZXJNdWx0aXNpZ0luZm8ubWluQXBwcm92YWwgOiB0aGlzLnNlbGVjdGVkU2lnbmVyLnJlcXVpcmVkQ29zaWduYXR1cmVzOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEZvcm1UcmFuc2FjdGlvbkJhc2U7Cn0oVnVlKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdjdXJyZW50QWNjb3VudCcpXSwgRm9ybVRyYW5zYWN0aW9uQmFzZS5wcm90b3R5cGUsICJvbkN1cnJlbnRBY2NvdW50Q2hhbmdlIiwgbnVsbCk7CgpGb3JtVHJhbnNhY3Rpb25CYXNlID0gX19kZWNvcmF0ZShbQ29tcG9uZW50KHsKICBjb21wdXRlZDogT2JqZWN0LmFzc2lnbih7fSwgbWFwR2V0dGVycyh7CiAgICBnZW5lcmF0aW9uSGFzaDogJ25ldHdvcmsvZ2VuZXJhdGlvbkhhc2gnLAogICAgbmV0d29ya1R5cGU6ICduZXR3b3JrL25ldHdvcmtUeXBlJywKICAgIGVwb2NoQWRqdXN0bWVudDogJ25ldHdvcmsvZXBvY2hBZGp1c3RtZW50JywKICAgIGRlZmF1bHRGZWU6ICdhcHAvZGVmYXVsdEZlZScsCiAgICBjdXJyZW50QWNjb3VudDogJ2FjY291bnQvY3VycmVudEFjY291bnQnLAogICAgc2VsZWN0ZWRTaWduZXI6ICdhY2NvdW50L2N1cnJlbnRTaWduZXInLAogICAgY3VycmVudFNpZ25lclB1YmxpY0tleTogJ2FjY291bnQvY3VycmVudFNpZ25lclB1YmxpY0tleScsCiAgICBjdXJyZW50U2lnbmVyQWRkcmVzczogJ2FjY291bnQvY3VycmVudFNpZ25lckFkZHJlc3MnLAogICAgY3VycmVudFNpZ25lck11bHRpc2lnSW5mbzogJ2FjY291bnQvY3VycmVudFNpZ25lck11bHRpc2lnSW5mbycsCiAgICBjdXJyZW50QWNjb3VudE11bHRpc2lnSW5mbzogJ2FjY291bnQvY3VycmVudEFjY291bnRNdWx0aXNpZ0luZm8nLAogICAgaXNDb3NpZ25hdG9yeU1vZGU6ICdhY2NvdW50L2lzQ29zaWduYXRvcnlNb2RlJywKICAgIG5ldHdvcmtNb3NhaWM6ICdtb3NhaWMvbmV0d29ya01vc2FpYycsCiAgICBuZXR3b3JrQ3VycmVuY3k6ICdtb3NhaWMvbmV0d29ya0N1cnJlbmN5JywKICAgIHNpZ25lcnM6ICdhY2NvdW50L3NpZ25lcnMnLAogICAgbmV0d29ya0NvbmZpZ3VyYXRpb246ICduZXR3b3JrL25ldHdvcmtDb25maWd1cmF0aW9uJywKICAgIHRyYW5zYWN0aW9uRmVlczogJ25ldHdvcmsvdHJhbnNhY3Rpb25GZWVzJwogIH0pKQp9KV0sIEZvcm1UcmFuc2FjdGlvbkJhc2UpOwpleHBvcnQgeyBGb3JtVHJhbnNhY3Rpb25CYXNlIH07"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormTransactionBase/FormTransactionBase.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { MosaicId, MultisigAccountInfo, NetworkType, PublicAccount, Transaction, TransactionFees, Address, Deadline } from 'symbol-sdk';\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { ValidationObserver } from 'vee-validate';\nimport { Signer } from '@/store/Account';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { TransactionCommand, TransactionCommandMode } from '@/services/TransactionCommand';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            generationHash: 'network/generationHash',\n            networkType: 'network/networkType',\n            epochAdjustment: 'network/epochAdjustment',\n            defaultFee: 'app/defaultFee',\n            currentAccount: 'account/currentAccount',\n            selectedSigner: 'account/currentSigner',\n            currentSignerPublicKey: 'account/currentSignerPublicKey',\n            currentSignerAddress: 'account/currentSignerAddress',\n            currentSignerMultisigInfo: 'account/currentSignerMultisigInfo',\n            currentAccountMultisigInfo: 'account/currentAccountMultisigInfo',\n            isCosignatoryMode: 'account/isCosignatoryMode',\n            networkMosaic: 'mosaic/networkMosaic',\n            networkCurrency: 'mosaic/networkCurrency',\n            signers: 'account/signers',\n            networkConfiguration: 'network/networkConfiguration',\n            transactionFees: 'network/transactionFees',\n        }),\n    },\n})\nexport class FormTransactionBase extends Vue {\n    /// region store getters\n    /**\n     * Network generation hash\n     */\n    public generationHash: string;\n\n    /**\n     * Network type\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * The network configuration epochAdjustment.\n     */\n    public epochAdjustment: number;\n\n    /**\n     * Default fee setting\n     */\n    public defaultFee: number;\n\n    /**\n     * Currently active account\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Currently active signer\n     */\n    public selectedSigner: Signer;\n\n    /**\n     * Currently active signer's public key\n     */\n    public currentSignerPublicKey: string;\n\n    /**\n     * Currently active signer's address\n     */\n    public currentSignerAddress: Address;\n\n    /**\n     * Current account multisig info\n     * @type {MultisigAccountInfo}\n     */\n    public currentAccountMultisigInfo: MultisigAccountInfo;\n\n    /**\n     * Current signer multisig info\n     * @var {MultisigAccountInfo}\n     */\n    public currentSignerMultisigInfo: MultisigAccountInfo;\n\n    /**\n     * Whether the form is in cosignatory mode (cosigner selected)\n     * @var {boolean}\n     */\n    public isCosignatoryMode: boolean;\n\n    /**\n     * Networks currency mosaic\n     * @var {MosaicId}\n     */\n    public networkMosaic: MosaicId;\n\n    /**\n     * Currently staged transactions\n     * @var {Transaction[]}\n     */\n    public stagedTransactions: Transaction[];\n\n    /**\n     * Public key of the current signer\n     * @var {any}\n     */\n    public currentSigner: PublicAccount;\n\n    public signers: Signer[];\n\n    public networkCurrency: NetworkCurrencyModel;\n\n    public networkConfiguration: NetworkConfigurationModel;\n\n    public command: TransactionCommand;\n\n    protected transactionFees: TransactionFees;\n\n    /**\n     * Type the ValidationObserver refs\n     * @type {{\n     *     observer: InstanceType<typeof ValidationObserver>\n     *   }}\n     */\n    public $refs!: {\n        observer: InstanceType<typeof ValidationObserver>;\n    };\n\n    /// end-region store getters\n\n    /// region property watches\n    @Watch('currentAccount')\n    onCurrentAccountChange() {\n        this.resetForm(); // @TODO: probably not the best way\n        this.resetFormValidation();\n    }\n\n    /// end-region property watches\n\n    /**\n     * Whether the form is currently awaiting a signature\n     * @var {boolean}\n     */\n    public isAwaitingSignature: boolean = false;\n\n    /**\n     * Hook called when the component is mounted\n     * @return {void}\n     */\n    public async created() {\n        this.$store.dispatch('network/LOAD_TRANSACTION_FEES');\n        this.resetForm();\n    }\n\n    /**\n     * it creates the deadlines for the transactions.\n     */\n    protected createDeadline(): Deadline {\n        return Deadline.create(this.epochAdjustment);\n    }\n\n    /**\n     * Hook called when the component is being destroyed (before)\n     * @return {void}\n     */\n    public async beforeDestroy() {\n        // reset the selected signer if it is not the current account\n        if (!this.currentAccount) {\n            return;\n        }\n\n        if (!this.selectedSigner.address.equals(Address.createFromRawAddress(this.currentAccount.address))) {\n            await this.$store.dispatch('account/SET_CURRENT_SIGNER', {\n                address: Address.createFromRawAddress(this.currentAccount.address),\n            });\n        }\n    }\n\n    /**\n     * Current signer's multisig accounts\n     * @readonly\n     * @type {{publicKey: string, label: string}[]}\n     */\n    get multisigAccounts(): Signer[] {\n        const signers = this.signers;\n        // if \"self\" is multisig, also return self\n        if (this.isMultisigAccount) {\n            return signers;\n        }\n\n        // all signers except current account\n        return [...signers].splice(1);\n    }\n\n    get hasConfirmationModal(): boolean {\n        return this.isAwaitingSignature;\n    }\n\n    set hasConfirmationModal(f: boolean) {\n        this.isAwaitingSignature = f;\n    }\n\n    get isMultisigAccount(): boolean {\n        return this.currentAccountMultisigInfo && this.currentAccountMultisigInfo.isMultisig();\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Reset the form with properties\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected resetForm() {\n        throw new Error(\"Method 'resetForm()' must be overloaded in derivate components.\");\n    }\n    /**\n     * Getter for whether forms should aggregate transactions in BONDED\n     * @return {boolean}\n     */\n    protected isMultisigMode(): boolean {\n        return this.isCosignatoryMode === true;\n    }\n\n    /**\n     * Getter for transactions that will be staged\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected getTransactions(): Transaction[] {\n        throw new Error(\"Getter method 'getTransactions()' must be overloaded in derivate components.\");\n    }\n\n    /**\n     * Setter for transactions that will be staged\n     * @param {Transaction[]} transactions\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions(transactions: Transaction[]) {\n        //TODO do we need these methods?\n        const error = `setTransactions() must be overloaded. Call got ${transactions.length} transactions.`;\n        throw new Error(error);\n    }\n\n    /**\n     * Hook called when the confirmation modal must open\n     * @see {FormTransactionBase}\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected onShowConfirmationModal() {\n        this.hasConfirmationModal = true;\n    }\n\n    /**\n     * Hook called when a signer is selected.\n     * @param {string} publicKey\n     */\n    public async onChangeSigner(address: string) {\n        // this.currentSigner = PublicAccount.createFromPublicKey(publicKey, this.networkType)\n        await this.$store.dispatch('account/SET_CURRENT_SIGNER', { address: Address.createFromRawAddress(address) });\n    }\n\n    protected getTransactionCommandMode(transactions: Transaction[]): TransactionCommandMode {\n        if (this.isMultisigMode()) {\n            return TransactionCommandMode.MULTISIGN;\n        }\n        if (transactions.length > 1) {\n            return TransactionCommandMode.AGGREGATE;\n        } else {\n            return TransactionCommandMode.SIMPLE;\n        }\n    }\n\n    public createTransactionCommand(): TransactionCommand {\n        const transactions = this.getTransactions();\n        const mode = this.getTransactionCommandMode(transactions);\n        return new TransactionCommand(\n            mode,\n            this.selectedSigner,\n            this.currentSignerPublicKey,\n            transactions,\n            this.networkMosaic,\n            this.generationHash,\n            this.networkType,\n            this.epochAdjustment,\n            this.networkConfiguration,\n            this.transactionFees,\n            this.requiredCosignatures,\n        );\n    }\n\n    protected get requiredCosignatures() {\n        return this.currentSignerMultisigInfo ? this.currentSignerMultisigInfo.minApproval : this.selectedSigner.requiredCosignatures;\n    }\n\n    /**\n     * Process form input\n     * @return {void}\n     */\n    public onSubmit() {\n        // - open signature modal\n        this.command = this.createTransactionCommand();\n        this.onShowConfirmationModal();\n    }\n\n    /**\n     * Hook called when the child component ModalTransactionConfirmation triggers\n     * the event 'success'\n     */\n    public onConfirmationSuccess() {\n        // if the form was in multisig, set the signer to be the main account\n        // this triggers resetForm in the @Watch('currentAccount') hook\n        if (this.isMultisigMode()) {\n            this.$store.dispatch('account/SET_CURRENT_ACCOUNT', this.currentAccount);\n        }\n        this.resetForm();\n        this.hasConfirmationModal = false;\n        this.$emit('on-confirmation-success');\n        // Reset form validation\n        this.resetFormValidation();\n    }\n\n    /**\n     * Reset form validation\n     * @private\n     */\n    private resetFormValidation(): void {\n        this.$refs && this.$refs.observer && this.$refs.observer.reset();\n    }\n\n    /**\n     * Hook called when the child component ModalTransactionConfirmation triggers\n     * the event 'error'\n     * @return {void}\n     */\n    public onConfirmationError(error: string) {\n        this.$store.dispatch('notification/ADD_ERROR', error);\n    }\n\n    /**\n     * Hook called when the child component ModalTransactionConfirmation triggers\n     * the event 'close'\n     * @return {void}\n     */\n    public onConfirmationCancel() {\n        this.hasConfirmationModal = false;\n    }\n}\n"],"sourceRoot":""}]}
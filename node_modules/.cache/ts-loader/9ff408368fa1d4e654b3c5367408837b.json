{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/core/utils/CSVHelpers.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/core/utils/CSVHelpers.ts","mtime":1611927203820},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/core/utils/CSVHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Parser } from 'json2csv';\nimport FileSaver from 'file-saver';\nimport store from '@/store/index.ts';\nimport { TransactionViewFactory } from '@/core/transactions/TransactionViewFactory';\nimport { TransactionView } from '@/core/transactions/TransactionView';\nimport { AggregateTransaction, Transaction, TransactionType } from 'symbol-sdk';\nimport * as _ from 'lodash';\n\nexport class CSVHelpers {\n    protected static views: TransactionView<Transaction>[] = [];\n    private static transactionsArray = [];\n\n    /**\n     * returns object of a parsed aggregate transaction\n     * @param transaction aggregate transaction\n     * returns new array with parsed aggregate transaction objects\n     */\n    private static constructAggregateTransactionsObject(transaction: AggregateTransaction) {\n        let merged = {};\n        const result = {};\n        this.views = [\n            TransactionViewFactory.getView(store, transaction),\n            ...transaction.innerTransactions.map((tx) => TransactionViewFactory.getView(store, tx)),\n        ];\n        this.views.forEach((value) => {\n            let mergedRow = {};\n            mergedRow = value.headerItems.concat(value.detailItems);\n            merged = _.defaults(merged, mergedRow);\n        });\n\n        const mergedArray = Object.entries(merged);\n        for (let i = 0; i < mergedArray.length; i++) {\n            if (mergedArray[i][1]['key'] == 'paid_fee') {\n                result[mergedArray[i][1]['key']] = mergedArray[i][1]['value'].maxFee.compact().toString();\n            } else if (mergedArray[i][1]['key'] == 'transfer_target') {\n                result[mergedArray[i]['key']] = mergedArray[i][1]['value'].address;\n            } else if (mergedArray[i][1]['key'] == 'block_height') {\n                result[mergedArray[i]['key']] = mergedArray[i][1]['value'].replace('#', '');\n            } else {\n                result[mergedArray[i][1]['key']] = mergedArray[i][1]['value'];\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Constructs transaction object\n     * @param transaction a transaction\n     * returns object of a parsed transaction\n     */\n    private static constructTransactionsObject(transaction: Transaction) {\n        this.views = [TransactionViewFactory.getView(store, transaction)];\n        const result = {};\n        const value = this.views[0].headerItems.concat(this.views[0].detailItems);\n        for (let i = 0; i < value.length; i++) {\n            if (value[i].key == 'paid_fee') {\n                result[value[i].key] = value[i].value.maxFee.compact().toString();\n            } else if (value[i].key == 'transfer_target') {\n                result[value[i].key] = value[i].value.address;\n            } else if (value[i].key.startsWith('Mosaic')) {\n                result[value[i].key] = value[i].value.amount + ' (' + value[i].value.mosaicHex + ')';\n            } else {\n                result[value[i].key] = value[i].value;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Export to csv file\n     * @param data array of parssed transactions\n     * returns new array with parsed transaction objects\n     */\n\n    private static prepareTransactions(data: []): any[] {\n        this.transactionsArray = [];\n        data.forEach((transaction) => {\n            let result = {};\n            if (transaction['type'] == TransactionType.AGGREGATE_BONDED || transaction['type'] == TransactionType.AGGREGATE_COMPLETE) {\n                result = this.constructAggregateTransactionsObject(transaction);\n            } else {\n                result = this.constructTransactionsObject(transaction);\n            }\n            this.transactionsArray.push(result);\n        });\n        return this.transactionsArray;\n    }\n\n    /**\n     * Export to csv file\n     * @param data The json data\n     * @param filename Prefix the name of the CSV file\n     */\n    public static exportCSV(data: any, filename: string) {\n        const json2csvParser = new Parser();\n        const parsedTransactions = this.prepareTransactions(data);\n        const csvData = json2csvParser.parse(parsedTransactions);\n        const blob = new Blob(['\\uFEFF' + csvData], { type: 'text/plain;charset=utf-8;' });\n        const exportFilename = `${filename}-${Date.now()}.csv`;\n        return FileSaver.saveAs(blob, exportFilename);\n    }\n}\n"],"sourceRoot":""}]}
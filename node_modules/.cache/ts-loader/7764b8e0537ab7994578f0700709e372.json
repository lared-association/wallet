{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormMultisigAccountModificationTransaction/FormMultisigAccountModificationTransactionTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormMultisigAccountModificationTransaction/FormMultisigAccountModificationTransactionTs.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormMultisigAccountModificationTransaction/FormMultisigAccountModificationTransactionTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport { MultisigAccountInfo, MultisigAccountModificationTransaction, UInt64, Address } from 'symbol-sdk';\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n// internal dependencies\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport AddCosignatoryInput from '@/components/AddCosignatoryInput/AddCosignatoryInput.vue';\n// @ts-ignore\nimport RemoveCosignatoryInput from '@/components/RemoveCosignatoryInput/RemoveCosignatoryInput.vue';\n// @ts-ignore\nimport CosignatoryModificationsDisplay from '@/components/CosignatoryModificationsDisplay/CosignatoryModificationsDisplay.vue';\n// @ts-ignore\nimport ApprovalAndRemovalInput from '@/components/ApprovalAndRemovalInput/ApprovalAndRemovalInput.vue';\n// @ts-ignore\nimport MultisigCosignatoriesDisplay from '@/components/MultisigCosignatoriesDisplay/MultisigCosignatoriesDisplay.vue';\nimport { TransactionCommand } from '@/services/TransactionCommand';\n\n/// region custom types\nexport interface CosignatoryModification {\n    addOrRemove: 'add' | 'remove';\n    cosignatory: Address;\n}\n\nexport type CosignatoryModifications = {\n    [address: string]: CosignatoryModification;\n};\n\n@Component({\n    components: {\n        FormWrapper,\n        ValidationObserver,\n        ValidationProvider,\n        FormRow,\n        SignerSelector,\n        AddCosignatoryInput,\n        RemoveCosignatoryInput,\n        CosignatoryModificationsDisplay,\n        MaxFeeAndSubmit,\n        ModalTransactionConfirmation,\n        ApprovalAndRemovalInput,\n        MultisigCosignatoriesDisplay,\n    },\n})\nexport class FormMultisigAccountModificationTransactionTs extends FormTransactionBase {\n    /// region component properties\n    @Prop({\n        default: '',\n    })\n    signer: string;\n\n    @Prop({\n        default: null,\n    })\n    minApprovalDelta: number;\n\n    @Prop({\n        default: null,\n    })\n    minRemovalDelta: number;\n\n    @Prop({\n        default: false,\n    })\n    hideSubmit: boolean;\n    /// end-region component properties\n\n    /**\n     * Form items\n     * @var {any}\n     */\n    public formItems = {\n        signerAddress: '',\n        minApprovalDelta: 0,\n        minRemovalDelta: 0,\n        cosignatoryModifications: {},\n        maxFee: 0,\n    };\n\n    public get multisigOperationType(): 'conversion' | 'modification' {\n        if (this.isCosignatoryMode || this.currentAccount.isMultisig) {\n            return 'modification';\n        }\n        return 'conversion';\n    }\n\n    public get currentMultisigInfo(): MultisigAccountInfo {\n        return this.currentSignerMultisigInfo;\n    }\n\n    /**\n     * Reset the form with properties\n     * @see {FormTransactionBase}\n     * @return {void}\n     */\n    protected resetForm() {\n        // - set default deltas values\n        const defaultMinApprovalDelta = this.multisigOperationType === 'conversion' ? 1 : 0;\n        const defaultMinRemovalDelta = this.multisigOperationType === 'conversion' ? 1 : 0;\n\n        // - set default form values\n        this.formItems.minApprovalDelta = !!this.minApprovalDelta ? this.minApprovalDelta : defaultMinApprovalDelta;\n        this.formItems.minRemovalDelta = !!this.minRemovalDelta ? this.minRemovalDelta : defaultMinRemovalDelta;\n        this.formItems.cosignatoryModifications = {};\n        if (!!this.currentAccount) {\n            this.formItems.signerAddress = this.currentAccount.address; // always select current account on form reset\n        }\n\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n    }\n\n    /**\n     * Getter for whether forms should aggregate transactions in BONDED\n     * @see {FormTransactionBase}\n     * @return {boolean} Always true\n     */\n    protected isMultisigMode(): boolean {\n        return true;\n    }\n\n    /**\n     * Getter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @return {MultisigAccountModificationTransaction[]}\n     */\n    protected getTransactions(): MultisigAccountModificationTransaction[] {\n        return [\n            MultisigAccountModificationTransaction.create(\n                this.createDeadline(),\n                this.formItems.minApprovalDelta,\n                this.formItems.minRemovalDelta,\n                this.addressAdditions,\n                this.addressDeletions,\n                this.networkType,\n                UInt64.fromUint(this.formItems.maxFee),\n            ),\n        ];\n    }\n\n    protected get addressAdditions() {\n        return Object.values(this.formItems.cosignatoryModifications)\n            .filter(({ addOrRemove }) => addOrRemove === 'add')\n            .map(({ cosignatory }) => cosignatory);\n    }\n\n    protected get addressDeletions() {\n        return Object.values(this.formItems.cosignatoryModifications)\n            .filter(({ addOrRemove }) => addOrRemove === 'remove')\n            .map(({ cosignatory }) => cosignatory);\n    }\n\n    /**\n     * Setter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @param {TransferTransaction[]} transactions\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions(transactions: MultisigAccountModificationTransaction[]) {\n        // this form creates only 1 transaction\n        const transaction = transactions.shift();\n        this.formItems.minApprovalDelta = transaction.minApprovalDelta;\n        this.formItems.minRemovalDelta = transaction.minRemovalDelta;\n        this.formItems.cosignatoryModifications = this.getCosignatoryModificationsFromTransaction(transaction);\n        this.formItems.maxFee = transaction.maxFee ? transaction.maxFee.compact() : this.defaultFee;\n    }\n\n    private getCosignatoryModificationsFromTransaction(transaction: MultisigAccountModificationTransaction): CosignatoryModifications {\n        const additions: CosignatoryModification[] = transaction.addressAdditions.map((address: Address) => ({\n            addOrRemove: 'add',\n            cosignatory: address,\n        }));\n\n        const deletions: CosignatoryModification[] = transaction.addressDeletions.map((address: Address) => ({\n            addOrRemove: 'remove',\n            cosignatory: address,\n        }));\n\n        return [...additions, ...deletions].reduce(\n            (acc, modification) => ({\n                ...acc,\n                [modification.cosignatory.plain()]: modification,\n            }),\n            {},\n        );\n    }\n\n    /// region super.onChangeSigner\n    /**\n     * Hook called when a signer is selected.\n     *\n     * This override is needed in order to fetch the multi-signature\n     * information for the currently selected signer. This fixes a\n     * reactivity problem with SignerSelector selected value in case\n     * of long-loading (e.g. fetch of multisig data).\n     *\n     * @override\n     * @param {string} address\n     */\n    public async onChangeSigner(address: string) {\n        // whether the new signer is a multisig account\n        const signerIsMultisigAccount = this.currentAccount.address !== address;\n\n        // force update form fields\n        this.formItems.signerAddress = address;\n        this.formItems.minApprovalDelta = signerIsMultisigAccount ? 0 : 1;\n        this.formItems.minRemovalDelta = signerIsMultisigAccount ? 0 : 1;\n        this.formItems.cosignatoryModifications = {};\n\n        await this.$store.dispatch('account/SET_CURRENT_SIGNER', { address: Address.createFromRawAddress(address) });\n    }\n    /// end-region super.onChangeSigner\n\n    /**\n     * Hook called when the subcomponent MultisigCosignatoriesDisplay\n     * emits the event `remove`.\n     *\n     * @param {Address} address\n     */\n    public onClickRemove(address: Address) {\n        const modifications = this.formItems.cosignatoryModifications;\n\n        // - in case address is part of \"modifications\"\n        if (modifications && modifications[address.plain()]) {\n            Vue.delete(this.formItems.cosignatoryModifications, address.plain());\n            return;\n        }\n        // - in case address is part of \"cosignatories\", register modification\n        else {\n            Vue.set(this.formItems.cosignatoryModifications, address.plain(), {\n                cosignatory: address,\n                addOrRemove: 'remove',\n            });\n        }\n    }\n\n    /**\n     * Hook called when the subcomponent MultisigCosignatoriesDisplay\n     * emits the event `add`.\n     *\n     * @param {PublicAccount} publicAccount\n     */\n    public onClickAdd(address: Address) {\n        Vue.set(this.formItems.cosignatoryModifications, address.plain(), {\n            cosignatory: address,\n            addOrRemove: 'add',\n        });\n    }\n\n    public onClickUndo(address: Address) {\n        Vue.delete(this.formItems.cosignatoryModifications, address.plain());\n    }\n\n    /// region validation handling\n    /**\n     * Calculation of the new multisig properties\n     * For input validation purposes\n     * @readonly\n     * @private\n     * @type {{\n     *     minApproval: number,\n     *     minRemoval: number,\n     *     cosignatoryNumber: number,\n     *   }}\n     */\n    private get newMultisigProperties(): {\n        minApproval: number;\n        minRemoval: number;\n        cosignatoryNumber: number;\n    } {\n        // calculate new min approval\n        const newMinApproval = this.currentMultisigInfo\n            ? this.currentMultisigInfo.minApproval + this.formItems.minApprovalDelta\n            : this.formItems.minApprovalDelta;\n\n        // calculate new min approval\n        const newMinRemoval = this.currentMultisigInfo\n            ? this.currentMultisigInfo.minRemoval + this.formItems.minRemovalDelta\n            : this.formItems.minRemovalDelta;\n\n        // calculate the delta of added cosigners\n        const numberOfAddedCosigners = this.addressAdditions.length - this.addressDeletions.length;\n\n        const newCosignatoryNumber = this.currentMultisigInfo\n            ? this.currentMultisigInfo.cosignatoryAddresses.length + numberOfAddedCosigners\n            : numberOfAddedCosigners;\n\n        return {\n            minApproval: newMinApproval,\n            minRemoval: newMinRemoval,\n            cosignatoryNumber: newCosignatoryNumber,\n        };\n    }\n\n    /**\n     * Whether the new multisig configuration is correct\n     * @readonly\n     * @protected\n     * @return {'OK' | false}\n     */\n    protected get areInputsValid(): 'OK' | false {\n        const { minApproval, minRemoval, cosignatoryNumber } = this.newMultisigProperties;\n        const maxCosignatoriesPerAccount = this.networkConfiguration.maxCosignatoriesPerAccount;\n        return cosignatoryNumber >= minApproval &&\n            cosignatoryNumber >= minRemoval &&\n            cosignatoryNumber <= maxCosignatoriesPerAccount &&\n            !(cosignatoryNumber > 0 && (minApproval == 0 || minRemoval == 0))\n            ? 'OK'\n            : false;\n    }\n\n    protected showErrorNotification(): void {\n        // no message if inputs are OK\n        if (this.areInputsValid === 'OK') {\n            return;\n        }\n\n        this.$store.dispatch('notification/ADD_ERROR', this.errorMessage);\n    }\n\n    /**\n     * Error message shown in the notice\n     * @readonly\n     * @protected\n     * @return {string}\n     */\n    protected get errorMessage(): string {\n        const { minApproval, minRemoval, cosignatoryNumber } = this.newMultisigProperties;\n        const maxCosignatoriesPerAccount = this.networkConfiguration.maxCosignatoriesPerAccount;\n\n        // no message if inputs are OK\n        if (this.areInputsValid === 'OK') {\n            return;\n        }\n\n        if (cosignatoryNumber < minApproval) {\n            return `${this.$t('approval_greater_than_cosignatories', {\n                delta: minApproval - cosignatoryNumber,\n            })}`;\n        }\n\n        if (cosignatoryNumber < minRemoval) {\n            return `${this.$t('removal_greater_than_cosignatories', {\n                delta: minRemoval - cosignatoryNumber,\n            })}`;\n        }\n\n        if (cosignatoryNumber > maxCosignatoriesPerAccount) {\n            return `${this.$t('too_many_cosignatories', {\n                maxCosignatoriesPerAccount,\n                delta: cosignatoryNumber - maxCosignatoriesPerAccount,\n            })}`;\n        }\n        if (cosignatoryNumber > 0 && (minApproval == 0 || minRemoval == 0)) {\n            return `${this.$t('removal_or_approval_is_zero', {\n                delta: cosignatoryNumber,\n            })}`;\n        }\n    }\n\n    /// end-region validation handling\n\n    /**\n     * This method is overriden in order to provide custom requiredCosignatures calculation\n     * @see {requiredCosignatures}\n     * @override\n     * @return { TransactionCommand }\n     */\n    public createTransactionCommand(): TransactionCommand {\n        const transactions = this.getTransactions();\n        const mode = this.getTransactionCommandMode(transactions);\n        return new TransactionCommand(\n            mode,\n            this.selectedSigner,\n            this.currentSignerPublicKey,\n            transactions,\n            this.networkMosaic,\n            this.generationHash,\n            this.networkType,\n            this.epochAdjustment,\n            this.networkConfiguration,\n            this.transactionFees,\n            this.requiredCosignatures,\n        );\n    }\n\n    /**\n     * Calculating number of requiredCosignatures to use in maxFee calculation\n     * @readonly\n     * @private\n     * @type number\n     */\n    private get requiredCosignatures(): number {\n        if (this.multisigOperationType === 'conversion') {\n            return this.addressAdditions.length;\n        }\n        // proceed if modification\n\n        // if nothing is changed in the form or minApprovalDelta != 0 then the default value will be existing minApproval\n        let requiredCosignatures = this.currentMultisigInfo.minApproval;\n\n        if (this.addressAdditions.length > 0) {\n            /* \n      this is an edge case, since the new additions signatures are mandatory, there might be a case \n      where all the existing cosignatories sign their parts before new additions do. \n      So in order to stay safe we are adding all the cosignatories including the new additions.\n      */\n            requiredCosignatures = this.currentMultisigInfo.cosignatoryAddresses.length + this.addressAdditions.length;\n        } else {\n            if (\n                (this.formItems.minRemovalDelta != 0 || this.addressDeletions.length > 0) &&\n                this.currentMultisigInfo.minRemoval > requiredCosignatures\n            ) {\n                requiredCosignatures = this.currentMultisigInfo.minRemoval;\n            }\n        }\n\n        return requiredCosignatures;\n    }\n\n    /**\n     * Whether form has any changes\n     * @readonly\n     * @return {boolean}\n     */\n    public get hasFormAnyChanges(): boolean {\n        return (\n            this.addressAdditions.length > 0 ||\n            this.addressDeletions.length > 0 ||\n            this.formItems.minApprovalDelta !== 0 ||\n            this.formItems.minRemovalDelta !== 0\n        );\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/NetworkNodeSelector/NetworkNodeSelectorTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/NetworkNodeSelector/NetworkNodeSelectorTs.ts","mtime":1606213958957},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/components/NetworkNodeSelector/NetworkNodeSelectorTs.ts"],"names":[],"mappings":"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","sourcesContent":["// external dependencies\nimport { Component, Vue, Prop, Watch } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n\n// internal dependencies\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\nimport { URLHelpers } from '@/core/utils/URLHelpers';\n\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\nimport { NodeInfo, RepositoryFactoryHttp } from 'symbol-sdk';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\n\n@Component({\n    components: {\n        FormWrapper,\n        FormRow,\n    },\n    computed: {\n        ...mapGetters({\n            peerNodes: 'network/peerNodes',\n            repositoryFactory: 'network/repositoryFactory',\n        }),\n    },\n})\nexport class NetworkNodeSelectorTs extends Vue {\n    @Prop({ default: () => [] }) excludeRoles: number[];\n\n    @Prop()\n    value: NodeModel;\n\n    /**\n     * Validation rules\n     */\n    public validationRules = ValidationRuleset;\n\n    public peerNodes: NodeInfo[];\n\n    /**\n     * Form items\n     */\n    protected formNodeUrl = '';\n\n    protected formNodePublicKey = '';\n\n    public customNodeData = [];\n\n    public isFetchingNodeInfo = false;\n\n    public showInputPublicKey = false;\n\n    /**\n     * Checks if the given node is eligible for harvesting\n     * @protected\n     * @returns {Promise<void>}\n     */\n    protected async fetchNodePublicKey(value) {\n        if (!value) {\n            return '';\n        }\n\n        // first check it in peer nodes\n        const peerNode = this.peerNodes.find((p) => p.host === value);\n        if (peerNode && peerNode?.nodePublicKey) {\n            const nodeModel = new NodeModel(value, peerNode.friendlyName, false, peerNode.publicKey, peerNode.nodePublicKey);\n            Vue.set(this, 'showInputPublicKey', false);\n            this.$emit('input', nodeModel);\n            return;\n        }\n\n        this.isFetchingNodeInfo = true;\n        try {\n            const nodeUrl = URLHelpers.getNodeUrl(value);\n            const repositoryFactory = new RepositoryFactoryHttp(nodeUrl);\n            const nodeRepository = repositoryFactory.createNodeRepository();\n            const nodeInfo = await nodeRepository.getNodeInfo().toPromise();\n            this.formNodeUrl = value;\n            if (nodeInfo.nodePublicKey) {\n                const nodeModel = new NodeModel(value, nodeInfo.friendlyName, false, nodeInfo.publicKey, nodeInfo.nodePublicKey);\n                Vue.set(this, 'showInputPublicKey', false);\n                this.$emit('input', nodeModel);\n            } else {\n                Vue.set(this, 'showInputPublicKey', true);\n            }\n        } catch (error) {\n            console.log(error);\n            Vue.set(this, 'showInputPublicKey', true);\n            throw new Error('Node_connection_failed');\n        } finally {\n            this.isFetchingNodeInfo = false;\n        }\n    }\n\n    public async created() {\n        await this.$store.dispatch('network/LOAD_PEER_NODES');\n        this.customNodeData = this.peerNodes.map((n) => n.host);\n    }\n\n    @Watch('value', { immediate: true })\n    protected valueWatcher(newVal: NodeModel) {\n        if (newVal) {\n            this.formNodeUrl = newVal.url;\n            if (!this.formNodeUrl) {\n                this.formNodePublicKey = newVal.nodePublicKey;\n            }\n            if (this.formNodePublicKey) {\n                this.showInputPublicKey = !this.formNodeUrl;\n            }\n        } else {\n            this.formNodeUrl = '';\n        }\n    }\n\n    public filterUrls(value, option) {\n        return option.toUpperCase().indexOf(value.toUpperCase()) !== -1;\n    }\n\n    public onChangeFormNodePublicKey(event) {\n        const nodeModel = { nodePublicKey: event.target.value };\n        this.$emit('input', nodeModel);\n    }\n\n    public onClear() {\n        // @ts-ignore\n        this.$refs.nodeUrlInput.$el.focus();\n        this.$emit('input', { nodePublicKey: '' });\n    }\n}\n"],"sourceRoot":""}]}
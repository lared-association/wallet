{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/HardwareConfirmationButton/HardwareConfirmationButtonTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/HardwareConfirmationButton/HardwareConfirmationButtonTs.ts","mtime":1606213958953},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvaGVyby9sYXJlZC13YWxsZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgewogIGZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsKICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7CiAgICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOwogICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7CgogICAgdHJ5IHsKICAgICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksCiAgICAgICAgcmVzdWx0OwoKICAgIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgewogICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOwoKICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7CiAgfTsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgppbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgU2lnbmVkVHJhbnNhY3Rpb24gfSBmcm9tICdzeW1ib2wtc2RrJzsKaW1wb3J0IFRyZXpvckNvbm5lY3QgZnJvbSAnQC9jb3JlL3V0aWxzL1RyZXpvckNvbm5lY3QnOwppbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsKCnZhciBIYXJkd2FyZUNvbmZpcm1hdGlvbkJ1dHRvblRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVnVlKSB7CiAgX2luaGVyaXRzKEhhcmR3YXJlQ29uZmlybWF0aW9uQnV0dG9uVHMsIF9WdWUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEhhcmR3YXJlQ29uZmlybWF0aW9uQnV0dG9uVHMpOwoKICBmdW5jdGlvbiBIYXJkd2FyZUNvbmZpcm1hdGlvbkJ1dHRvblRzKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhcmR3YXJlQ29uZmlybWF0aW9uQnV0dG9uVHMpOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhIYXJkd2FyZUNvbmZpcm1hdGlvbkJ1dHRvblRzLCBbewogICAga2V5OiAicHJvY2Vzc0hhcmR3YXJlIiwKCiAgICAvKioKICAgICAqIFByb2Nlc3Mgd2l0aCBoYXJkd2FyZSBjb25maXJtYXRpb24gKGN1cnJlbnRseSB0cmV6b3Igb25seSkKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzSGFyZHdhcmUoKSB7CiAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgdGhpcy4kZW1pdCgnc3VjY2VzcycsIHRoaXMpKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycwoKICB9LCB7CiAgICBrZXk6ICJzaWduQ29zaWduYXR1cmVUcmFuc2FjdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2lnbkNvc2lnbmF0dXJlVHJhbnNhY3Rpb24odCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBJbXBsZW1lbnRlZCEhIScpOwogICAgfQogIH0sIHsKICAgIGtleTogInNpZ25UcmFuc2FjdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2lnblRyYW5zYWN0aW9uKHN0YWdlZFR4KSB7CiAgICAgIC8vIC0gc2lnbiBlYWNoIHRyYW5zYWN0aW9uIHdpdGggVHJlem9yQ29ubmVjdAogICAgICB2YXIgcHJvbWlzZSA9IFRyZXpvckNvbm5lY3QubmVtU2lnblRyYW5zYWN0aW9uKHsKICAgICAgICBwYXRoOiB0aGlzLmN1cnJlbnRBY2NvdW50LnBhdGgsCiAgICAgICAgdHJhbnNhY3Rpb246IHN0YWdlZFR4CiAgICAgIH0pOwogICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKG1hcChmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgaWYgKCFyZXN1bHQuc3VjY2VzcykgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5wYXlsb2FkLmVycm9yKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBuZXcgU2lnbmVkVHJhbnNhY3Rpb24ocmVzdWx0LnBheWxvYWQuZGF0YSwgc3RhZ2VkVHgudHJhbnNhY3Rpb25JbmZvLmhhc2gsIHN0YWdlZFR4LnNpZ25lci5wdWJsaWNLZXksIHN0YWdlZFR4LnR5cGUsIHN0YWdlZFR4Lm5ldHdvcmtUeXBlKTsKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEhhcmR3YXJlQ29uZmlybWF0aW9uQnV0dG9uVHM7Cn0oVnVlKTsKCkhhcmR3YXJlQ29uZmlybWF0aW9uQnV0dG9uVHMgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXB1dGVkOiBPYmplY3QuYXNzaWduKHt9LCBtYXBHZXR0ZXJzKHsKICAgIGN1cnJlbnRBY2NvdW50OiAnYWNjb3VudC9jdXJyZW50QWNjb3VudCcKICB9KSkKfSldLCBIYXJkd2FyZUNvbmZpcm1hdGlvbkJ1dHRvblRzKTsKZXhwb3J0IHsgSGFyZHdhcmVDb25maXJtYXRpb25CdXR0b25UcyB9Ow=="},{"version":3,"sources":["/home/hero/lared-wallet/src/components/HardwareConfirmationButton/HardwareConfirmationButtonTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAeA,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,UAAT,QAA2B,MAA3B;AACA,SAAsB,iBAAtB,QAAqG,YAArG;AAIA,OAAO,aAAP,MAA0B,4BAA1B;AAEA,SAAS,IAAT,QAAiC,MAAjC;AACA,SAAS,GAAT,QAAoB,gBAApB;;AASA,IAAa,4BAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAQI;;;;AARJ,sCAYgC;;;;;;iDACjB,KAAK,KAAL,CAAW,SAAX,EAAsB,IAAtB,C;;;;;;;;;AACV,KAdL,CAeI;;AAfJ;AAAA;AAAA,+CAgB+B,CAhB/B,EAgBwD;AAChD,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH;AAlBL;AAAA;AAAA,oCAoBoB,QApBpB,EAoByC;AACjC;AACA,UAAM,OAAO,GAAiB,aAAa,CAAC,kBAAd,CAAiC;AAC3D,QAAA,IAAI,EAAE,KAAK,cAAL,CAAoB,IADiC;AAE3D,QAAA,WAAW,EAAE;AAF8C,OAAjC,CAA9B;AAIA,aAAO,IAAI,CAAC,OAAD,CAAJ,CAAc,IAAd,CACH,GAAG,CAAC,UAAC,MAAD,EAAW;AACX,YAAI,CAAC,MAAM,CAAC,OAAZ,EAAqB;AACjB,gBAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAP,CAAe,KAAzB,CAAN;AACH;;AACD,eAAO,IAAI,iBAAJ,CACH,MAAM,CAAC,OAAP,CAAe,IADZ,EAEH,QAAQ,CAAC,eAAT,CAAyB,IAFtB,EAGH,QAAQ,CAAC,MAAT,CAAgB,SAHb,EAIH,QAAQ,CAAC,IAJN,EAKH,QAAQ,CAAC,WALN,CAAP;AAOH,OAXE,CADA,CAAP;AAcH;AAxCL;;AAAA;AAAA,EAAkD,GAAlD,CAAA;;AAAa,4BAA4B,GAAA,UAAA,CAAA,CAPxC,SAAS,CAAC;AACP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,cAAc,EAAE;AADN,GAAD,CADT;AADD,CAAD,CAO+B,CAAA,EAA5B,4BAA4B,CAA5B;SAAA,4B","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Transaction, SignedTransaction, CosignatureTransaction, CosignatureSignedTransaction } from 'symbol-sdk';\n\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport TrezorConnect from '@/core/utils/TrezorConnect';\nimport { TransactionSigner } from '@/services/TransactionAnnouncerService';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n        }),\n    },\n})\nexport class HardwareConfirmationButtonTs extends Vue implements TransactionSigner {\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Process with hardware confirmation (currently trezor only)\n     * @return {void}\n     */\n    public async processHardware() {\n        return this.$emit('success', this);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    signCosignatureTransaction(t: CosignatureTransaction): Observable<CosignatureSignedTransaction> {\n        throw new Error('Not Implemented!!!');\n    }\n\n    signTransaction(stagedTx: Transaction): Observable<SignedTransaction> {\n        // - sign each transaction with TrezorConnect\n        const promise: Promise<any> = TrezorConnect.nemSignTransaction({\n            path: this.currentAccount.path,\n            transaction: stagedTx,\n        });\n        return from(promise).pipe(\n            map((result) => {\n                if (!result.success) {\n                    throw new Error(result.payload.error);\n                }\n                return new SignedTransaction(\n                    result.payload.data,\n                    stagedTx.transactionInfo.hash,\n                    stagedTx.signer.publicKey,\n                    stagedTx.type,\n                    stagedTx.networkType,\n                );\n            }),\n        );\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormMetadataCreation/FormMetadataCreationTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormMetadataCreation/FormMetadataCreationTs.ts","mtime":1611927227561},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormMetadataCreation/FormMetadataCreationTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, MetadataType, PublicAccount, RepositoryFactory, Transaction } from 'symbol-sdk';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport MaxFeeSelector from '@/components/MaxFeeSelector/MaxFeeSelector.vue';\n// @ts-ignore\nimport MosaicSelector from '@/components/MosaicSelector/MosaicSelector.vue';\n// @ts-ignore\nimport NamespaceSelector from '@/components/NamespaceSelector/NamespaceSelector.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n\nimport { TransactionCommandMode } from '@/services/TransactionCommand';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { NamespaceModel } from '@/core/database/entities/NamespaceModel';\nimport { AddressValidator } from '@/core/validation/validators';\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\n\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\nimport { Component, Prop } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        MaxFeeSelector,\n        MosaicSelector,\n        NamespaceSelector,\n        MaxFeeAndSubmit,\n        FormWrapper,\n        FormRow,\n        ModalTransactionConfirmation,\n        SignerSelector,\n    },\n    computed: {\n        ...mapGetters({\n            knownAccounts: 'account/knownAccounts',\n            ownedMosaics: 'mosaic/ownedMosaics',\n            ownedNamespaces: 'namespace/ownedNamespaces',\n            repositoryFactory: 'network/repositoryFactory',\n            metadataTransactions: 'metadata/transactions',\n        }),\n    },\n})\nexport class FormMetadataCreationTs extends FormTransactionBase {\n    /**\n     * Metadata type\n     * @type {MetadataType}\n     */\n    @Prop({\n        default: MetadataType.Account,\n        required: true,\n    })\n    protected type: MetadataType;\n    /**\n     * update/edit check\n     * @type {boolean}\n     */\n    @Prop({\n        default: false,\n    })\n    public editMode: boolean;\n    /**\n     * Value for saved metadata\n     * @type {MetadataModel}\n     */\n    @Prop({\n        default: null,\n    })\n    public value: MetadataModel;\n    /**\n     * Value for mosaic and namespace selectboxes\n     * @type {MetadataModel}\n     */\n    @Prop({\n        default: null,\n    })\n    public metadataList: MetadataModel[];\n\n    /**\n     * chosen metaKeyValue\n     * @type {MetadataModel}\n     */\n    protected chosenKeyValue: string = '';\n    /**\n     * Metadata type\n     */\n    protected MetadataType = MetadataType;\n\n    /**\n     * Repository factory for metadata transaction service\n     */\n    protected repositoryFactory: RepositoryFactory;\n\n    /**\n     * metadata transactions\n     */\n    protected metadataTransactions: Transaction[];\n\n    /**\n     * Form fields\n     * @var {Object}\n     */\n    public formItems = {\n        signerAddress: '',\n        targetAccount: '',\n        targetId: '',\n        metadataValue: '',\n        scopedKey: '',\n        maxFee: 0,\n    };\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Known accounts\n     * @protected\n     * @var {AccountModel[]}\n     */\n    protected knownAccounts: AccountModel[];\n\n    /**\n     * Current account owned mosaics\n     * @protected\n     * @type {MosaicModel[]}\n     */\n    protected ownedMosaics: MosaicModel[];\n\n    /**\n     * Current account owned namespaces\n     * @protected\n     * @type {NamespaceModel[]}\n     */\n    protected ownedNamespaces: NamespaceModel[];\n\n    /**\n     * Wheter target account is visible and editable\n     */\n    protected showTargetAccount = true;\n\n    /**\n     * Mosaic check\n     * @return {boolean}\n     */\n    protected isMosaic(): boolean {\n        return this.type === MetadataType.Mosaic;\n    }\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        this.formItems.signerAddress = this.selectedSigner ? this.selectedSigner.address.plain() : this.currentAccount.address;\n\n        // - set default form values\n        this.formItems.metadataValue = '';\n        this.formItems.scopedKey = '';\n\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n        // for mosaics and namespaces, target account will be the signer account's itself (as hidden)\n        if (this.type !== MetadataType.Account) {\n            this.formItems.targetAccount = this.formItems.signerAddress;\n            this.showTargetAccount = false;\n        }\n    }\n\n    /**\n     * get transaction command mode\n     * @override\n     * @see {FormTransactionBase}\n     * @param transactions\n     */\n    protected getTransactionCommandMode(): TransactionCommandMode {\n        const target = this.getTargetAddress().plain();\n        if (this.selectedSigner.multisig) {\n            return TransactionCommandMode.MULTISIGN;\n        } else if (this.formItems.signerAddress === target) {\n            return TransactionCommandMode.AGGREGATE;\n        } else if (this.isMultisigAccount) {\n            // multisig mode\n        } else {\n            return TransactionCommandMode.MULTISIGN;\n        }\n    }\n    /**\n     * number of required cosignatures for the tx\n     * @override\n     * @see {FormTransactionBase}\n     */\n    protected get requiredCosignatures(): number {\n        if (!this.selectedSigner.multisig && this.formItems.signerAddress !== this.getTargetAddress().plain()) {\n            return 1;\n        }\n        return this.currentSignerMultisigInfo ? this.currentSignerMultisigInfo.minApproval : this.selectedSigner.requiredCosignatures;\n    }\n\n    /**\n     * get transactions\n     * @see {FormTransactionBase}\n     */\n    public getTransactions() {\n        return this.metadataTransactions;\n    }\n\n    /**\n     * @override\n     * @see {FormTransactionBase}\n     */\n    public async onSubmit() {\n        await this.persistFormState();\n\n        // - open signature modal\n        this.command = this.createTransactionCommand();\n        this.onShowConfirmationModal();\n    }\n\n    /**\n     * Modal title from modal type\n     * @type {string}\n     */\n    get modalTitle(): string {\n        let title: string = '';\n        switch (this.type) {\n            case MetadataType.Mosaic:\n                title = 'modal_title_mosaic_metadata';\n                break;\n\n            case MetadataType.Namespace:\n                title = 'modal_title_namespace_metadata';\n                break;\n\n            default:\n                title = 'modal_title_account_metadata';\n                break;\n        }\n        return title;\n    }\n\n    /**\n     * Target account or public key label depends on MetadataType\n     * @param {void}\n     * @returns {string}\n     */\n    get targetLabel(): string {\n        let title: string = '';\n        switch (this.type) {\n            case MetadataType.Mosaic:\n                title = 'form_label_target_mosaic_id';\n                break;\n\n            case MetadataType.Namespace:\n                title = 'form_label_target_namespace_id';\n                break;\n        }\n        return title;\n    }\n\n    /**\n     * Target id validator name\n     * @return {string}\n     */\n    get targetIdValidatorName(): string {\n        return this.isMosaic() ? 'mosaic_id' : 'namespace_id';\n    }\n\n    get ownedTargetHexIds(): string[] {\n        return this.type === MetadataType.Namespace\n            ? this.ownedNamespaces.map(({ namespaceIdHex }) => namespaceIdHex)\n            : this.ownedMosaics\n                  .filter(({ ownerRawPlain }) => ownerRawPlain === this.currentAccount.address)\n                  .map(({ mosaicIdHex }) => mosaicIdHex);\n    }\n\n    private async persistFormState() {\n        const targetAddress: Address = this.getTargetAddress();\n        const metadataForm: {\n            targetAddress: Address;\n            scopedKey: string;\n            metadataValue: string;\n            targetId: string;\n            maxFee: number;\n        } = {\n            targetAddress,\n            scopedKey: this.formItems.scopedKey,\n            metadataValue: this.formItems.metadataValue,\n            targetId: this.formItems.targetId,\n            maxFee: this.formItems.maxFee,\n        };\n\n        await this.$store.dispatch('metadata/SET_METADATA_FORM_STATE', metadataForm);\n        await this.$store.dispatch('metadata/RESOLVE_METADATA_TRANSACTIONS', this.type);\n    }\n\n    private getTargetAddress(): Address {\n        let targetAddress: Address;\n        if (AddressValidator.validate(this.formItems.targetAccount)) {\n            targetAddress = Address.createFromRawAddress(this.formItems.targetAccount);\n        } else {\n            const targetPublicAccount = PublicAccount.createFromPublicKey(this.formItems.targetAccount, this.networkType);\n            targetAddress = targetPublicAccount.address;\n        }\n\n        return targetAddress;\n    }\n\n    /**\n     * Whether form has any changes\n     * @readonly\n     * @return {boolean}\n     */\n    public get hasFormAnyChanges(): boolean {\n        return (\n            this.formItems.signerAddress.length > 0 ||\n            this.formItems.targetAccount.length > 0 ||\n            this.formItems.metadataValue.length > 0 ||\n            this.formItems.scopedKey.length > 0\n        );\n    }\n\n    set chosenValue(newValue: string) {\n        this.chosenKeyValue = newValue;\n        const currentItem = this.metadataList.find((item) => item.metadataId === this.chosenKeyValue);\n        this.formItems.signerAddress = currentItem.sourceAddress;\n        this.formItems.targetAccount = currentItem.targetAddress;\n        this.formItems.targetId = currentItem.targetId;\n        this.formItems.metadataValue = currentItem.value;\n        this.formItems.scopedKey = currentItem.scopedMetadataKey;\n    }\n\n    get chosenValue(): string {\n        return this.chosenKeyValue;\n    }\n\n    mounted() {\n        if (this.editMode && this.value && this.type == MetadataType.Account) {\n            this.formItems.signerAddress = this.value.sourceAddress;\n            this.formItems.targetAccount = this.value.targetAddress;\n            this.formItems.targetId = this.value.targetId;\n            this.formItems.metadataValue = this.value.value;\n            this.formItems.scopedKey = this.value.scopedMetadataKey;\n        }\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Network.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Network.ts","mtime":1611927227426},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Network.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport Vue from 'vue';\nimport {\n    BlockInfo,\n    IListener,\n    Listener,\n    NetworkType,\n    RepositoryFactory,\n    TransactionFees,\n    RentalFees,\n    RepositoryFactoryHttp,\n    NodeInfo,\n    RoleType,\n} from 'symbol-sdk';\nimport { Subscription } from 'rxjs';\nimport _ from 'lodash';\n// internal dependencies\nimport { $eventBus } from '../events';\nimport { URLHelpers } from '@/core/utils/URLHelpers';\nimport app from '@/main';\nimport { AwaitLock } from './AwaitLock';\n// configuration\nimport { UrlValidator } from '@/core/validation/validators';\nimport { NetworkModel } from '@/core/database/entities/NetworkModel';\nimport { NetworkService } from '@/services/NetworkService';\nimport { NodeService } from '@/services/NodeService';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\nimport { URLInfo } from '@/core/utils/URLInfo';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { networkConfig } from '@/config';\nconst Lock = AwaitLock.create();\n\n/// region custom types\n/**\n * Type SubscriptionType for Wallet Store\n * @type {SubscriptionType}\n */\ntype SubscriptionType = {\n    listener: IListener | undefined;\n    subscriptions: Subscription[];\n};\n\n/**\n * Type BlockRangeType for Wallet Store\n * @type {BlockRangeType}\n */\ntype BlockRangeType = { start: number };\n\n/// end-region custom types\n\nconst staticPeerNodes: NodeInfo[] = [\n    {\n        nodePublicKey: 'D78CB884297CABEFDAC66DB9599C31CB7C719DC09F40E9A95984EFC1234E0324',\n        host: 'api-01.ap-northeast-1.testnet.symboldev.network',\n        roles: [RoleType.PeerNode],\n    },\n    {\n        nodePublicKey: '9F03C0953AD1065E1E78C804FBAF3D4D9E29CE89C9687CA2D7F39886FE5952EA',\n        host: 'api-01.ap-southeast-1.testnet.symboldev.network',\n        roles: [RoleType.PeerNode],\n    },\n    {\n        nodePublicKey: '135214B2892687293096D909CF040C3EFDD60E5AE4C40B5257E6BFE2B8467AA8',\n        host: 'api-01.eu-central-1.testnet.symboldev.network',\n        roles: [RoleType.PeerNode],\n    },\n    {\n        nodePublicKey: '7064CA58E2A24A4426BAE33051C6EC39BCBCC58C4900AB32406C3279FC4C93D4',\n        host: 'api-01.eu-west-1.testnet.symboldev.network',\n        roles: [RoleType.PeerNode],\n    },\n    {\n        nodePublicKey: 'F57FB70C3F51663D0DDF47303C93ADC8FDD266DC61BBA67B983052D075FD900E',\n        host: 'api-01.us-east-1.testnet.symboldev.network',\n        roles: [RoleType.PeerNode],\n    },\n] as NodeInfo[];\n\ninterface NetworkState {\n    initialized: boolean;\n    currentPeer: URLInfo;\n    currentPeerInfo: NodeModel;\n    networkModel: NetworkModel;\n    networkConfiguration: NetworkConfigurationModel;\n    repositoryFactory: RepositoryFactory;\n    listener: Listener;\n    generationHash: string;\n    networkType: NetworkType;\n    epochAdjustment: number;\n    isConnected: boolean;\n    knowNodes: NodeModel[];\n    currentHeight: number;\n    subscriptions: Subscription[];\n    transactionFees: TransactionFees;\n    rentalFeeEstimation: RentalFees;\n    networkIsNotMatchingProfile: boolean;\n    peerNodes: NodeInfo[];\n    selectedPeerNode: NodeInfo;\n}\n\nconst defaultPeer = URLHelpers.formatUrl(networkConfig.defaultNodeUrl);\n\nconst networkState: NetworkState = {\n    initialized: false,\n    currentPeer: defaultPeer,\n    currentPeerInfo: new NodeModel(defaultPeer.url, defaultPeer.url, true),\n    networkType: networkConfig.defaultNetworkType,\n    generationHash: undefined,\n    networkModel: undefined,\n    networkConfiguration: networkConfig.networkConfigurationDefaults,\n    repositoryFactory: NetworkService.createRepositoryFactory(networkConfig.defaultNodeUrl),\n    listener: undefined,\n    transactionFees: undefined,\n    isConnected: false,\n    knowNodes: [],\n    currentHeight: 0,\n    subscriptions: [],\n    rentalFeeEstimation: undefined,\n    epochAdjustment: networkConfig.networkConfigurationDefaults.epochAdjustment,\n    networkIsNotMatchingProfile: false,\n    peerNodes: [],\n    selectedPeerNode: null,\n};\n\nexport default {\n    namespaced: true,\n    state: networkState,\n    getters: {\n        getInitialized: (state: NetworkState) => state.initialized,\n        subscriptions: (state: NetworkState) => state.subscriptions,\n        networkType: (state: NetworkState) => state.networkType,\n        epochAdjustment: (state: NetworkState) => state.epochAdjustment,\n        generationHash: (state: NetworkState) => state.generationHash,\n        repositoryFactory: (state: NetworkState) => state.repositoryFactory,\n        listener: (state: NetworkState) => state.listener,\n        networkModel: (state: NetworkState) => state.networkModel,\n        networkConfiguration: (state: NetworkState) => state.networkConfiguration,\n        currentPeer: (state: NetworkState) => state.currentPeer,\n        currentPeerInfo: (state: NetworkState) => state.currentPeerInfo,\n        isConnected: (state: NetworkState) => state.isConnected,\n        knowNodes: (state: NetworkState) => state.knowNodes,\n        currentHeight: (state: NetworkState) => state.currentHeight,\n        transactionFees: (state: NetworkState) => state.transactionFees,\n        rentalFeeEstimation: (state: NetworkState) => state.rentalFeeEstimation,\n        networkIsNotMatchingProfile: (state: NetworkState) => state.networkIsNotMatchingProfile,\n        peerNodes: (state: NetworkState) => state.peerNodes,\n    },\n    mutations: {\n        setInitialized: (state: NetworkState, initialized: boolean) => {\n            state.initialized = initialized;\n        },\n        setConnected: (state: NetworkState, connected: boolean) => {\n            state.isConnected = connected;\n        },\n        currentHeight: (state: NetworkState, currentHeight: number) => Vue.set(state, 'currentHeight', currentHeight),\n        currentPeerInfo: (state: NetworkState, currentPeerInfo: NodeModel) => Vue.set(state, 'currentPeerInfo', currentPeerInfo),\n        repositoryFactory: (state: NetworkState, repositoryFactory: RepositoryFactory) =>\n            Vue.set(state, 'repositoryFactory', repositoryFactory),\n        networkConfiguration: (state: NetworkState, networkConfiguration: NetworkConfigurationModel) =>\n            Vue.set(state, 'networkConfiguration', networkConfiguration),\n        listener: (state: NetworkState, listener: Listener) => Vue.set(state, 'listener', listener),\n        networkModel: (state: NetworkState, networkModel: NetworkModel) => Vue.set(state, 'networkModel', networkModel),\n        knowNodes: (state: NetworkState, knowNodes: NodeModel[]) => Vue.set(state, 'knowNodes', knowNodes),\n        generationHash: (state: NetworkState, generationHash: string) => Vue.set(state, 'generationHash', generationHash),\n        networkType: (state: NetworkState, networkType: NetworkType) => Vue.set(state, 'networkType', networkType),\n        epochAdjustment: (state: NetworkState, epochAdjustment: number) => Vue.set(state, 'epochAdjustment', epochAdjustment),\n        currentPeer: (state: NetworkState, currentPeer: URLInfo) => Vue.set(state, 'currentPeer', currentPeer),\n        transactionFees: (state: NetworkState, transactionFees: TransactionFees) => {\n            state.transactionFees = transactionFees;\n        },\n        rentalFeeEstimation: (state: NetworkState, amount: RentalFees) => {\n            state.rentalFeeEstimation = amount;\n        },\n        networkIsNotMatchingProfile: (state: NetworkState, networkIsNotMatchingProfile: boolean) => {\n            Vue.set(state, 'networkIsNotMatchingProfile', networkIsNotMatchingProfile);\n        },\n\n        addPeer: (state: NetworkState, peerUrl: string) => {\n            const knowNodes: NodeModel[] = state.knowNodes;\n            const existNode = knowNodes.find((p: NodeModel) => p.url === peerUrl);\n            if (existNode) {\n                return;\n            }\n            const newNodes = [...knowNodes, new NodeModel(peerUrl, '', false)];\n            new NodeService().saveNodes(newNodes);\n            Vue.set(state, 'knowNodes', newNodes);\n        },\n        removePeer: (state: NetworkState, peerUrl: string) => {\n            const knowNodes: NodeModel[] = state.knowNodes;\n            const toBeDeleted = knowNodes.find((p: NodeModel) => p.url === peerUrl);\n            if (!toBeDeleted) {\n                return;\n            }\n            const newNodes = knowNodes.filter((n) => n !== toBeDeleted);\n            new NodeService().saveNodes(newNodes);\n            Vue.set(state, 'knowNodes', newNodes);\n        },\n        updateNode: (state: NetworkState, node: NodeModel) => {\n            const knowNodes: NodeModel[] = state.knowNodes;\n            const toBeUpdated = knowNodes.find((p: NodeModel) => p.url === node.url);\n            if (!toBeUpdated) {\n                return;\n            }\n            const newNodes = knowNodes.map((n) => (n.url === node.url ? node : n));\n            new NodeService().saveNodes(newNodes);\n            Vue.set(state, 'knowNodes', newNodes);\n        },\n        subscriptions: (state: NetworkState, data) => Vue.set(state, 'subscriptions', data),\n        addSubscriptions: (state: NetworkState, payload) => {\n            const subscriptions = state.subscriptions;\n            Vue.set(state, 'subscriptions', [...subscriptions, payload]);\n        },\n        peerNodes: (state: NetworkState, peerNodes: NodeInfo[]) => Vue.set(state, 'peerNodes', peerNodes),\n    },\n    actions: {\n        async initialize({ commit, dispatch, getters }) {\n            const callback = async () => {\n                // commit('knowNodes', new NodeService().getKnowNodesOnly())\n                await dispatch('CONNECT');\n                dispatch('REST_NETWORK_RENTAL_FEES');\n                // update store\n                commit('setInitialized', true);\n            };\n            // acquire async lock until initialized\n            await Lock.initialize(callback, { getters });\n        },\n        async uninitialize({ commit, dispatch, getters }) {\n            const callback = async () => {\n                dispatch('UNSUBSCRIBE');\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        async CONNECT({ commit, dispatch, getters, rootGetters }, newCandidate: string | undefined) {\n            const currentProfile: ProfileModel = rootGetters['profile/currentProfile'];\n            const networkService = new NetworkService();\n            const nodeService = new NodeService();\n            const networkModelResult = await networkService\n                .getNetworkModel(newCandidate, (currentProfile && currentProfile.generationHash) || undefined)\n                .toPromise();\n            if (!networkModelResult) {\n                throw new Error('Connect error, active peer cannot be found');\n            }\n            const { networkModel, repositoryFactory, fallback } = networkModelResult;\n            if (fallback) {\n                throw new Error('Connection Error.');\n            }\n            const oldGenerationHash = getters['generationHash'];\n            const getNodesPromise = nodeService.getNodes(repositoryFactory, networkModel.url).toPromise();\n            const getBlockchainHeightPromise = repositoryFactory.createChainRepository().getChainInfo().toPromise();\n            const nodes = await getNodesPromise;\n            const currentHeight = (await getBlockchainHeightPromise).height.compact();\n            const listener = repositoryFactory.createListener();\n\n            const currentPeer = URLHelpers.getNodeUrl(networkModel.url);\n            commit('currentPeer', currentPeer);\n            commit('networkModel', networkModel);\n            commit('networkConfiguration', networkModel.networkConfiguration);\n            commit('transactionFees', networkModel.transactionFees);\n            commit('networkType', networkModel.networkType);\n            commit('epochAdjustment', networkModel.networkConfiguration.epochAdjustment);\n            commit('generationHash', networkModel.generationHash);\n            commit('repositoryFactory', repositoryFactory);\n            commit('knowNodes', nodes);\n            commit('listener', listener);\n            commit('currentHeight', currentHeight);\n            commit(\n                'currentPeerInfo',\n                nodes.find((n) => n.url === networkModel.url),\n            );\n            commit('setConnected', true);\n            $eventBus.$emit('newConnection', currentPeer);\n            // subscribe to updates\n\n            if (oldGenerationHash != networkModel.generationHash) {\n                await dispatch('account/NETWORK_CHANGED', {}, { root: true });\n                await dispatch('statistics/LOAD', {}, { root: true });\n\n                // check if current profile network type and generation hash matches current network\n                if (\n                    currentProfile &&\n                    (currentProfile.networkType !== networkModel.networkType ||\n                        currentProfile.generationHash !== networkModel.generationHash)\n                ) {\n                    dispatch('SET_NETWORK_IS_NOT_MATCHING_PROFILE', true);\n                } else {\n                    dispatch('SET_NETWORK_IS_NOT_MATCHING_PROFILE', false);\n                }\n            }\n            await dispatch('UNSUBSCRIBE');\n            await listener.open();\n            await dispatch('SUBSCRIBE');\n            await dispatch('account/SUBSCRIBE', rootGetters['account/currentSignerAddress'], { root: true });\n        },\n\n        async SET_CURRENT_PEER({ dispatch }, currentPeerUrl) {\n            if (!UrlValidator.validate(currentPeerUrl)) {\n                throw Error('Cannot change node. URL is not valid: ' + currentPeerUrl);\n            }\n\n            // - show loading overlay\n            dispatch(\n                'app/SET_LOADING_OVERLAY',\n                {\n                    show: true,\n                    message: `${app.$t('info_connecting_peer', {\n                        peerUrl: currentPeerUrl,\n                    })}`,\n                    disableCloseButton: true,\n                },\n                { root: true },\n            );\n\n            dispatch('diagnostic/ADD_DEBUG', 'Store action network/SET_CURRENT_PEER dispatched with: ' + currentPeerUrl, {\n                root: true,\n            });\n\n            try {\n                // - disconnect from previous node\n\n                await dispatch('CONNECT', currentPeerUrl);\n            } catch (e) {\n                console.log(e);\n                await dispatch(\n                    'notification/ADD_ERROR',\n                    `${app.$t('error_peer_connection_went_wrong', {\n                        peerUrl: currentPeerUrl,\n                    })}`,\n                    { root: true },\n                );\n                dispatch('diagnostic/ADD_ERROR', 'Error with store action network/SET_CURRENT_PEER: ' + JSON.stringify(e), {\n                    root: true,\n                });\n            } finally {\n                // - hide loading overlay\n                dispatch('app/SET_LOADING_OVERLAY', { show: false }, { root: true });\n            }\n        },\n\n        REST_NETWORK_RENTAL_FEES({ rootGetters, dispatch }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            repositoryFactory\n                .createNetworkRepository()\n                .getRentalFees()\n                .subscribe((rentalFee: RentalFees) => {\n                    dispatch('SET_RENTAL_FEE_ESTIMATE', rentalFee);\n                });\n        },\n\n        SET_RENTAL_FEE_ESTIMATE({ commit }, rentalFee) {\n            commit('rentalFeeEstimation', rentalFee);\n        },\n        SET_NETWORK_IS_NOT_MATCHING_PROFILE({ commit }, networkIsNotMatchingProfile) {\n            commit('networkIsNotMatchingProfile', networkIsNotMatchingProfile);\n        },\n        ADD_KNOWN_PEER({ commit }, peerUrl) {\n            if (!UrlValidator.validate(peerUrl)) {\n                throw Error('Cannot add node. URL is not valid: ' + peerUrl);\n            }\n            commit('addPeer', peerUrl);\n        },\n        REMOVE_KNOWN_PEER({ commit }, peerUrl) {\n            commit('removePeer', peerUrl);\n        },\n\n        async UPDATE_PEER({ commit }, peerUrl) {\n            const repositoryFactory = new RepositoryFactoryHttp(peerUrl);\n            const nodeService = new NodeService();\n\n            const knownNodes = await nodeService.getNodes(repositoryFactory, peerUrl).toPromise();\n            commit('knowNodes', knownNodes);\n        },\n\n        async RESET_PEERS({ dispatch, getters }) {\n            const nodeService = new NodeService();\n            nodeService.reset();\n\n            const networkService = new NetworkService();\n            networkService.reset(getters['generationHash']);\n\n            dispatch('SET_CURRENT_PEER', networkService.getDefaultUrl());\n        },\n        async LOAD_PEER_NODES({ commit, rootGetters }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const nodeRepository = repositoryFactory.createNodeRepository();\n\n            const peerNodes: NodeInfo[] = await nodeRepository.getNodePeers().toPromise();\n            const allNodes = [...staticPeerNodes, ...peerNodes.sort((a, b) => a.host.localeCompare(b.host))];\n            commit('peerNodes', _.uniqBy(allNodes, 'host'));\n        },\n        /**\n         * Websocket API\n         */\n        // Subscribe to latest account transactions.\n        async SUBSCRIBE({ commit, dispatch, getters }) {\n            // use RESTService to open websocket channel subscriptions\n            const listener = getters['listener'] as Listener;\n            listener.open().then(() => {\n                const subscription = listener.newBlock().subscribe((block: BlockInfo) => {\n                    dispatch('SET_CURRENT_HEIGHT', block.height.compact());\n                    dispatch('diagnostic/ADD_INFO', 'New block height: ' + block.height.compact(), { root: true });\n                });\n                // update state of listeners & subscriptions\n                commit('addSubscriptions', subscription);\n            });\n        },\n\n        // Unsubscribe from all open websocket connections\n        async UNSUBSCRIBE({ commit, getters }) {\n            const subscriptions: Subscription[] = getters.subscriptions;\n            subscriptions.forEach((s) => s.unsubscribe());\n            const listener: Listener = getters.listener;\n            if (listener) {\n                await listener.close();\n            }\n            // update state\n            commit('subscriptions', []);\n        },\n\n        SET_CURRENT_HEIGHT({ commit }, height) {\n            commit('currentHeight', height);\n        },\n\n        LOAD_TRANSACTION_FEES({ commit, rootGetters }) {\n            const repositoryFactory: RepositoryFactory = rootGetters['network/repositoryFactory'];\n            const networkRepository = repositoryFactory.createNetworkRepository();\n            networkRepository.getTransactionFees().subscribe((fees: TransactionFees) => commit('transactionFees', fees));\n        },\n    },\n};\n"],"sourceRoot":""}]}
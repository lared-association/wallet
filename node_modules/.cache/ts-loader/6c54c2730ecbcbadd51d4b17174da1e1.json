{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MultisigService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MultisigService.ts","mtime":1611927227383},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/MultisigService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AACH,SAAS,OAAT,QAAoF,YAApF;AAKA,WAAa,eAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAoBQ,WApBR,EAqBQ,aArBR,EAsBQ,cAtBR,EAuBQ,0BAvBR,EAwBQ;AACA,IAAA,oBAzBR,EAyB+D;AAAA;;AAEvD,UAAI,CAAC,cAAL,EAAqB;AACjB,eAAO,EAAP;AACH;;AACD,UAAM,IAAI,GAAa,CACnB;AACI,QAAA,OAAO,EAAE,OAAO,CAAC,oBAAR,CAA6B,cAAc,CAAC,OAA5C,CADb;AAEI,QAAA,KAAK,EAAE,cAAc,CAAC,IAF1B;AAGI,QAAA,QAAQ,EAAE,0BAA0B,IAAI,0BAA0B,CAAC,UAA3B,EAH5C;AAII,QAAA,oBAAoB,EAAG,0BAA0B,IAAI,0BAA0B,CAAC,WAA1D,IAA0E;AAJpG,OADmB,CAAvB;;AASA,UAAI,CAAC,0BAAL,EAAiC;AAC7B,eAAO,IAAP;AACH,OAhBsD,CAkBvD;;;AACA,UAAI,+BAA+B,GAAa,GAAG,MAAH,CAAU,IAAV,CAAhD;AACA,MAAA,oBAAoB,CAAC,GAArB,CAAyB,UAAC,KAAD,EAAU;AAC/B,YACI,CAAC,KAAK,CAAC,WAAN,GAAoB,CAApB,IAAyB,KAAK,CAAC,UAAN,GAAmB,CAA7C,KACA,KAAK,CAAC,iBAAN,CAAwB,MAAxB,GAAiC,CADjC,IAEA,KAAK,CAAC,oBAAN,CAA2B,IAA3B,CAAgC,UAAC,KAAD;AAAA,iBAAW,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,oBAAR,CAA6B,cAAc,CAAC,OAA5C,CAAb,CAAX;AAAA,SAAhC,CAHJ,EAIE;AACE,UAAA,KAAK,CAAC,iBAAN,CAAwB,GAAxB,CAA4B,UAAC,OAAD,EAAY;AACpC,gBAAI,CAAC,+BAA+B,CAAC,IAAhC,CAAqC,UAAC,GAAD;AAAA,qBAAS,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAmB,OAAnB,CAAT;AAAA,aAArC,CAAL,EAAiF;AAC7E,qBAAQ,+BAA+B,GAAG,+BAA+B,CAAC,MAAhC,CAAuC,CAC7E;AACI,gBAAA,OAAO,EAAE,OADb;AAEI,gBAAA,QAAQ,EAAE,IAFd;AAGI,gBAAA,KAAK,EAAE,KAAI,CAAC,eAAL,CAAqB,OAArB,EAA8B,aAA9B,CAHX;AAII,gBAAA,oBAAoB,EAAG,0BAA0B,IAAI,0BAA0B,CAAC,WAA1D,IAA0E;AAJpG,eAD6E,CAAvC,CAA1C;AAQH;AACJ,WAXD;AAYH;AACJ,OAnBD,EApBuD,CAyCvD;;AACA,UAAI,sBAAsB,GAAa,GAAG,MAAH,CAAU,+BAAV,CAAvC;AACA,MAAA,oBAAoB,CAAC,GAArB,CAAyB,UAAC,IAAD,EAAS;AAC9B,YACI,CAAC,IAAI,CAAC,cAAL,CAAoB,MAApB,CAA2B,OAAO,CAAC,oBAAR,CAA6B,cAAc,CAAC,OAA5C,CAA3B,CAAD,IACA,CAAC,sBAAsB,CAAC,IAAvB,CAA4B,UAAC,GAAD;AAAA,iBAAS,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAmB,IAAI,CAAC,cAAxB,CAAT;AAAA,SAA5B,CAFL,EAGE;AACE,iBAAQ,sBAAsB,GAAG,sBAAsB,CAAC,MAAvB,CAA8B,CAC3D;AACI,YAAA,OAAO,EAAE,IAAI,CAAC,cADlB;AAEI,YAAA,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAL,CAA0B,MAF1C;AAGI,YAAA,KAAK,EAAE,KAAI,CAAC,eAAL,CAAqB,IAAI,CAAC,cAA1B,EAA0C,aAA1C,CAHX;AAII,YAAA,oBAAoB,EAAG,0BAA0B,IAAI,IAAI,CAAC,WAApC,IAAoD;AAJ9E,WAD2D,CAA9B,CAAjC;AAQH;AACJ,OAdD;AAeA,aAAO,sBAAP;AACH;AApFL;AAAA;AAAA,oCAsF4B,OAtF5B,EAsF8C,QAtF9C,EAsFsE;AAC9D,UAAM,OAAO,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAC,GAAD;AAAA,eAAS,OAAO,CAAC,KAAR,OAAoB,GAAG,CAAC,OAAjC;AAAA,OAAd,CAAhB;AACA,aAAQ,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,OAAO,CAAC,KAAR,EAApC;AACH;AAzFL;AAAA;;AACI;;;;;AAKG;AANP,yDAOuD,SAPvD,EAO0F;AAAA;;AAAA,UAC1E,eAD0E,GACtD,SADsD,CAC1E,eAD0E;AAElF,aAAO,YAAG,MAAH,gCAAa,KAAK,2BAAL,CAAiC,eAAjC,CAAb,GAAgE,GAAhE,CAAoE,UAAC,IAAD;AAAA,eAAU,IAAV;AAAA,OAApE,CAAP,CAFkF,CAEU;AAC/F;AAVL;AAAA;AAAA,gDAY8C,eAZ9C,EAYiG;AACzF,aAAO,mBAAI,eAAe,CAAC,IAAhB,EAAJ,EACF,IADE,CACG,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,CAAC,GAAG,CAAd;AAAA,OADH,EACoB;AADpB,OAEF,GAFE,CAEE,UAAC,GAAD;AAAA,eAAS,eAAe,CAAC,GAAhB,CAAoB,GAApB,KAA4B,EAArC;AAAA,OAFF,EAGF,MAHE,CAGK,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,MAAF,GAAW,CAAlB;AAAA,OAHL,CAAP;AAIH;AAjBL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, MultisigAccountGraphInfo, MultisigAccountInfo, NetworkType } from 'symbol-sdk';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { Signer } from '@/store/Account';\n\nexport class MultisigService {\n    /**\n     * Returns all available multisig info from a multisig graph\n     * @static\n     * @param {MultisigAccountGraphInfo} multisig graph info\n     * @returns {MultisigAccountInfo[]} multisig info\n     */\n    public static getMultisigInfoFromMultisigGraphInfo(graphInfo: MultisigAccountGraphInfo): MultisigAccountInfo[] {\n        const { multisigEntries } = graphInfo;\n        return [].concat(...this.getMultisigGraphArraySorted(multisigEntries)).map((item) => item); // flatten\n    }\n\n    public static getMultisigGraphArraySorted(multisigEntries: Map<number, MultisigAccountInfo[]>): MultisigAccountInfo[][] {\n        return [...multisigEntries.keys()]\n            .sort((a, b) => b - a) // Get addresses from top to bottom\n            .map((key) => multisigEntries.get(key) || [])\n            .filter((x) => x.length > 0);\n    }\n\n    public getSigners(\n        networkType: NetworkType,\n        knownAccounts: AccountModel[],\n        currentAccount: AccountModel,\n        currentAccountMultisigInfo: MultisigAccountInfo | undefined,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        multisigAccountsInfo: MultisigAccountInfo[] | undefined,\n    ): Signer[] {\n        if (!currentAccount) {\n            return [];\n        }\n        const self: Signer[] = [\n            {\n                address: Address.createFromRawAddress(currentAccount.address),\n                label: currentAccount.name,\n                multisig: currentAccountMultisigInfo && currentAccountMultisigInfo.isMultisig(),\n                requiredCosignatures: (currentAccountMultisigInfo && currentAccountMultisigInfo.minApproval) || 0,\n            },\n        ];\n\n        if (!currentAccountMultisigInfo) {\n            return self;\n        }\n\n        // check if other child multisig accounts are already cosigners of other accounts and add their children multisig as signers if any to the main cosignatory account\n        let addedSignerFromMutlisigAccounts: Signer[] = [].concat(self);\n        multisigAccountsInfo.map((entry) => {\n            if (\n                (entry.minApproval > 0 || entry.minRemoval > 0) &&\n                entry.multisigAddresses.length > 0 &&\n                entry.cosignatoryAddresses.some((value) => value.equals(Address.createFromRawAddress(currentAccount.address)))\n            ) {\n                entry.multisigAddresses.map((address) => {\n                    if (!addedSignerFromMutlisigAccounts.some((val) => val.address.equals(address))) {\n                        return (addedSignerFromMutlisigAccounts = addedSignerFromMutlisigAccounts.concat([\n                            {\n                                address: address,\n                                multisig: true,\n                                label: this.getAccountLabel(address, knownAccounts),\n                                requiredCosignatures: (currentAccountMultisigInfo && currentAccountMultisigInfo.minApproval) || 0,\n                            },\n                        ]));\n                    }\n                });\n            }\n        });\n\n        // check for next level signers and add them to the main cosignatory as signers if any\n        let addressesFromNextLevel: Signer[] = [].concat(addedSignerFromMutlisigAccounts);\n        multisigAccountsInfo.map((term) => {\n            if (\n                !term.accountAddress.equals(Address.createFromRawAddress(currentAccount.address)) &&\n                !addressesFromNextLevel.find((val) => val.address.equals(term.accountAddress))\n            ) {\n                return (addressesFromNextLevel = addressesFromNextLevel.concat([\n                    {\n                        address: term.accountAddress,\n                        multisig: !!term.cosignatoryAddresses.length,\n                        label: this.getAccountLabel(term.accountAddress, knownAccounts),\n                        requiredCosignatures: (currentAccountMultisigInfo && term.minApproval) || 0,\n                    },\n                ]));\n            }\n        });\n        return addressesFromNextLevel;\n    }\n\n    private getAccountLabel(address: Address, accounts: AccountModel[]): string {\n        const account = accounts.find((wlt) => address.plain() === wlt.address);\n        return (account && account.name) || address.plain();\n    }\n}\n"],"sourceRoot":""}]}
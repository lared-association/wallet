{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/pages/profiles/import-profile/account-selection/AccountSelectionTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/pages/profiles/import-profile/account-selection/AccountSelectionTs.ts","mtime":1606213958977},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/pages/profiles/import-profile/account-selection/AccountSelectionTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { AccountInfo, Address, MosaicId, Password, RepositoryFactory, SimpleWallet } from 'symbol-sdk';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\n// internal dependencies\nimport { AccountModel, AccountType } from '@/core/database/entities/AccountModel';\nimport { DerivationPathLevels, DerivationService } from '@/services/DerivationService';\nimport { AccountService } from '@/services/AccountService';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { Formatters } from '@/core/utils/Formatters';\n// child components\n// @ts-ignore\nimport MosaicAmountDisplay from '@/components/MosaicAmountDisplay/MosaicAmountDisplay.vue';\nimport { NetworkCurrencyModel } from '@/core/database/entities/NetworkCurrencyModel';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { ProfileService } from '@/services/ProfileService';\nimport { SimpleObjectStorage } from '@/core/database/backends/SimpleObjectStorage';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            networkType: 'network/networkType',\n            networkMosaic: 'mosaic/networkMosaic',\n            networkCurrency: 'mosaic/networkCurrency',\n            currentProfile: 'profile/currentProfile',\n            currentPassword: 'temporary/password',\n            currentMnemonic: 'temporary/mnemonic',\n            selectedAccounts: 'account/selectedAddressesToInteract',\n        }),\n    },\n    components: { MosaicAmountDisplay },\n})\nexport default class AccountSelectionTs extends Vue {\n    /**\n     * Formatting helpers\n     * @protected\n     */\n    protected formatters = Formatters;\n\n    /**\n     * Network's currency mosaic id\n     * @see {Store.Mosaic}\n     * @var {MosaicId}\n     */\n    public networkMosaic: MosaicId;\n\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {string}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Temporary stored password\n     * @see {Store.Temporary}\n     * @var {Password}\n     */\n    public currentPassword: Password;\n\n    /**\n     * Temporary stored mnemonic pass phrase\n     * @see {Store.Temporary}\n     * @var {MnemonicPassPhrase}\n     */\n    public currentMnemonic: string;\n\n    /**\n     * Derivation Service\n     * @var {DerivationService}\n     */\n    public derivation: DerivationService;\n\n    /**\n     * Account Service\n     * @var {AccountService}\n     */\n    public accountService: AccountService;\n\n    /**\n     * Profile service\n     * @var {ProfileService}\n     */\n    public profileService: ProfileService = new ProfileService();\n\n    /**\n     * Balances map\n     * @var {any}\n     */\n    public addressMosaicMap = {};\n\n    /**\n     * Map of selected accounts\n     * @var {number[]}\n     */\n    public selectedAccounts: number[];\n\n    /**\n     * List of addresses\n     * @var {Address[]}\n     */\n    public addressesList: Address[] = [];\n\n    public networkCurrency: NetworkCurrencyModel;\n\n    /**\n     * Hook called when the page is mounted\n     * @return {void}\n     */\n    async mounted() {\n        this.derivation = new DerivationService();\n        this.accountService = new AccountService();\n\n        Vue.nextTick().then(() => {\n            setTimeout(() => this.initAccounts(), 200);\n        });\n    }\n\n    public previous() {\n        this.$router.push({ name: 'profiles.importProfile.importMnemonic' });\n    }\n\n    /**\n     * Finalize the account selection process by adding\n     * the selected accounts to storage.\n     * @return {void}\n     */\n    public submit() {\n        // cannot submit without selecting at least one account\n        if (!this.selectedAccounts.length) {\n            return this.$store.dispatch('notification/ADD_ERROR', NotificationType.INPUT_EMPTY_ERROR);\n        }\n\n        try {\n            // create account models\n            const accounts = this.createAccountsFromPathIndexes(this.selectedAccounts);\n\n            // save newly created accounts\n            accounts.forEach((account, index) => {\n                // Store accounts using repository\n                this.accountService.saveAccount(account);\n                // set current account\n                if (index === 0) {\n                    this.$store.dispatch('account/SET_CURRENT_ACCOUNT', account);\n                }\n                // add accounts to profile\n                this.$store.dispatch('profile/ADD_ACCOUNT', account);\n            });\n\n            // get accounts identifiers\n            const accountIdentifiers = accounts.map((account) => account.id);\n\n            // set known accounts\n            this.$store.dispatch('account/SET_KNOWN_ACCOUNTS', accountIdentifiers);\n\n            this.profileService.updateAccounts(this.currentProfile, accountIdentifiers);\n\n            // execute store actions\n            this.$store.dispatch('temporary/RESET_STATE');\n            this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.OPERATION_SUCCESS);\n            return this.$router.push({ name: 'profiles.importProfile.finalize' });\n        } catch (error) {\n            return this.$store.dispatch('notification/ADD_ERROR', error);\n        }\n    }\n\n    /**\n     * Fetch account balances and map to address\n     * @return {void}\n     */\n    private async initAccounts() {\n        // - generate addresses\n        this.addressesList = this.accountService.getAddressesFromMnemonic(\n            new MnemonicPassPhrase(this.currentMnemonic),\n            this.currentProfile.networkType,\n            10,\n        );\n        const repositoryFactory = this.$store.getters['network/repositoryFactory'] as RepositoryFactory;\n        // fetch accounts info\n        const accountsInfo = await repositoryFactory.createAccountRepository().getAccountsInfo(this.addressesList).toPromise();\n        if (!accountsInfo) {\n            return;\n        }\n        // map balances\n        this.addressMosaicMap = this.mapBalanceByAddress(accountsInfo, this.networkMosaic);\n    }\n\n    public mapBalanceByAddress(accountsInfo: AccountInfo[], mosaic: MosaicId): Record<string, number> {\n        return accountsInfo\n            .map(({ mosaics, address }) => {\n                // - check balance\n                const hasNetworkMosaic = mosaics.find((mosaicOwned) => mosaicOwned.id.equals(mosaic));\n\n                // - account doesn't hold network mosaic so the balance is zero\n                if (hasNetworkMosaic === undefined) {\n                    return {\n                        address: address.plain(),\n                        balance: 0,\n                    };\n                }\n                // - map balance to address\n                const balance = hasNetworkMosaic.amount.compact();\n                return {\n                    address: address.plain(),\n                    balance: balance,\n                };\n            })\n            .reduce((acc, { address, balance }) => ({ ...acc, [address]: balance }), {});\n    }\n\n    /**\n     * Create an account instance from mnemonic and path\n     * @return {AccountModel}\n     */\n    private createAccountsFromPathIndexes(indexes: number[]): AccountModel[] {\n        const paths = indexes.map((index) => {\n            if (index == 0) {\n                return AccountService.DEFAULT_ACCOUNT_PATH;\n            }\n\n            return this.derivation.incrementPathLevel(AccountService.DEFAULT_ACCOUNT_PATH, DerivationPathLevels.Profile, index);\n        });\n\n        const accounts = this.accountService.generateAccountsFromPaths(\n            new MnemonicPassPhrase(this.currentMnemonic),\n            this.currentProfile.networkType,\n            paths,\n        );\n\n        const simpleWallets = accounts.map((account, i) =>\n            SimpleWallet.createFromPrivateKey(\n                `Seed Account ${indexes[i] + 1}`,\n                this.currentPassword,\n                account.privateKey,\n                this.currentProfile.networkType,\n            ),\n        );\n\n        return simpleWallets.map((simpleWallet, i) => {\n            return {\n                id: SimpleObjectStorage.generateIdentifier(),\n                profileName: this.currentProfile.profileName,\n                name: simpleWallet.name,\n                node: '',\n                type: AccountType.SEED,\n                address: simpleWallet.address.plain(),\n                publicKey: accounts[i].publicKey,\n                encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n                path: paths[i],\n                isMultisig: false,\n            };\n        });\n    }\n\n    /**\n     * Called when clicking on an address to add it to the selection\n     * @param {number} pathNumber\n     */\n    protected onAddAddress(pathNumber: number): void {\n        this.$store.commit('account/addToSelectedAddressesToInteract', pathNumber);\n    }\n}\n"],"sourceRoot":""}]}
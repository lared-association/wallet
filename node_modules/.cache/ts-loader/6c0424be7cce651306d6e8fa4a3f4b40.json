{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Account.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Account.ts","mtime":1611927227397},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/store/Account.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport Vue from 'vue';\nimport {\n    AccountInfo,\n    AccountNames,\n    Address,\n    IListener,\n    MultisigAccountInfo,\n    NetworkType,\n    PublicAccount,\n    RepositoryFactory,\n} from 'symbol-sdk';\nimport { of, Subscription } from 'rxjs';\n// internal dependencies\nimport { $eventBus } from '../events';\nimport { RESTService } from '@/services/RESTService';\nimport { AwaitLock } from './AwaitLock';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { MultisigService } from '@/services/MultisigService';\nimport * as _ from 'lodash';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { AccountService } from '@/services/AccountService';\nimport { catchError, map } from 'rxjs/operators';\nimport { ProfileService } from '@/services/ProfileService';\n/// region globals\nconst Lock = AwaitLock.create();\n/// end-region globals\n\n/**\n * Type SubscriptionType for account Store\n * @type {SubscriptionType}\n */\ntype SubscriptionType = {\n    listener: IListener;\n    subscriptions: Subscription[];\n};\n\nexport type Signer = {\n    label: string;\n    address: Address;\n    multisig: boolean;\n    requiredCosignatures: number;\n};\n\n// Account state typing\ninterface AccountState {\n    initialized: boolean;\n    currentAccount: AccountModel;\n    currentAccountAddress: Address;\n    currentAccountMultisigInfo: MultisigAccountInfo;\n    multisigAccountGraph: MultisigAccountInfo[][];\n    isCosignatoryMode: boolean;\n    signers: Signer[];\n    currentSigner: Signer;\n    currentSignerAddress: Address;\n    currentSignerPublicKey: string;\n    currentSignerMultisigInfo: MultisigAccountInfo;\n    // Known accounts database identifiers\n    knownAccounts: AccountModel[];\n    knownAddresses: Address[];\n    accountsInfo: AccountInfo[];\n    multisigAccountsInfo: MultisigAccountInfo[];\n    subscriptions: Record<string, SubscriptionType[]>;\n    currentRecipient: PublicAccount;\n    currentAccountAliases: AccountNames[];\n    selectedAddressesToInteract: number[];\n    currentSignerAccountModel: AccountModel;\n}\n\n// account state initial definition\nconst accountState: AccountState = {\n    initialized: false,\n    currentAccount: null,\n    currentAccountAddress: null,\n    currentAccountMultisigInfo: null,\n    currentAccountAliases: [],\n    isCosignatoryMode: false,\n    signers: [],\n    currentSigner: null,\n    currentSignerAddress: null,\n    currentSignerPublicKey: null,\n    currentSignerMultisigInfo: null,\n    knownAccounts: [],\n    knownAddresses: [],\n    accountsInfo: [],\n    multisigAccountsInfo: [],\n    subscriptions: {},\n    currentRecipient: null,\n    multisigAccountGraph: null,\n    selectedAddressesToInteract: [],\n    currentSignerAccountModel: null,\n};\n\n/**\n * Account Store\n */\nexport default {\n    namespaced: true,\n    state: accountState,\n    getters: {\n        getInitialized: (state: AccountState) => state.initialized,\n        currentAccount: (state: AccountState): AccountModel => {\n            return state.currentAccount;\n        },\n        signers: (state: AccountState): Signer[] => state.signers,\n        currentSigner: (state: AccountState): Signer => state.currentSigner,\n        currentAccountAddress: (state: AccountState) => state.currentAccountAddress,\n        knownAddresses: (state: AccountState) => state.knownAddresses,\n        currentAccountMultisigInfo: (state: AccountState) => state.currentAccountMultisigInfo,\n        currentSignerMultisigInfo: (state: AccountState) => state.currentSignerMultisigInfo,\n        isCosignatoryMode: (state: AccountState) => state.isCosignatoryMode,\n        currentSignerAddress: (state: AccountState) => state.currentSignerAddress,\n        currentSignerPublicKey: (state: AccountState) => state.currentSignerPublicKey,\n        knownAccounts: (state: AccountState) => state.knownAccounts,\n        accountsInfo: (state: AccountState) => state.accountsInfo,\n        currentAccountAccountInfo: (state: AccountState): AccountInfo => {\n            return state.accountsInfo.find(({ publicKey }) => publicKey === state.currentAccount.publicKey);\n        },\n        currentSignerAccountInfo: (state: AccountState): AccountInfo => {\n            return state.accountsInfo.find(({ address }) => address.plain() === state.currentSigner.address.plain());\n        },\n        multisigAccountsInfo: (state: AccountState) => state.multisigAccountsInfo,\n        getSubscriptions: (state: AccountState) => state.subscriptions,\n        currentRecipient: (state: AccountState) => state.currentRecipient,\n        currentAccountAliases: (state: AccountState) => state.currentAccountAliases,\n        multisigAccountGraph: (state: AccountState) => state.multisigAccountGraph,\n        selectedAddressesToInteract: (state: AccountState) => state.selectedAddressesToInteract,\n        currentSignerAccountModel: (state: AccountState) =>\n            state.knownAccounts.find((a) => a.address === state.currentSignerAddress.plain()),\n    },\n    mutations: {\n        setInitialized: (state: AccountState, initialized: boolean) => {\n            state.initialized = initialized;\n        },\n        currentAccount: (state: AccountState, accountModel: AccountModel) => {\n            state.currentAccount = accountModel;\n        },\n        currentAccountAddress: (state: AccountState, accountAddress: Address) => {\n            state.currentAccountAddress = accountAddress;\n        },\n        currentAccountAliases: (state: AccountState, currentAccountAliases: AccountNames[]) => {\n            state.currentAccountAliases = currentAccountAliases;\n        },\n        currentSigner: (state: AccountState, currentSigner: Signer) => {\n            state.currentSigner = currentSigner;\n        },\n        signers: (state: AccountState, signers: Signer[]) => {\n            state.signers = signers;\n        },\n        currentSignerAddress: (state: AccountState, signerAddress) => {\n            state.currentSignerAddress = signerAddress;\n        },\n        currentSignerPublicKey: (state: AccountState, signerPubKey) => {\n            state.currentSignerPublicKey = signerPubKey;\n        },\n        knownAccounts: (state: AccountState, knownAccounts: AccountModel[]) => {\n            state.knownAccounts = knownAccounts;\n        },\n        knownAddresses: (state: AccountState, knownAddresses: Address[]) => {\n            state.knownAddresses = knownAddresses;\n        },\n        isCosignatoryMode: (state: AccountState, isCosignatoryMode: boolean) => {\n            state.isCosignatoryMode = isCosignatoryMode;\n        },\n        accountsInfo: (state: AccountState, accountsInfo) => {\n            state.accountsInfo = accountsInfo;\n        },\n        multisigAccountsInfo: (state: AccountState, multisigAccountsInfo) => {\n            state.multisigAccountsInfo = multisigAccountsInfo;\n        },\n        currentAccountMultisigInfo: (state: AccountState, currentAccountMultisigInfo) => {\n            state.currentAccountMultisigInfo = currentAccountMultisigInfo;\n        },\n        currentSignerMultisigInfo: (state: AccountState, currentSignerMultisigInfo) => {\n            state.currentSignerMultisigInfo = currentSignerMultisigInfo;\n        },\n        currentRecipient: (state: AccountState, currentRecipient) => {\n            state.currentRecipient = currentRecipient;\n        },\n\n        setSubscriptions: (state: AccountState, subscriptions: Record<string, SubscriptionType[]>) => {\n            state.subscriptions = subscriptions;\n        },\n\n        multisigAccountGraph: (state: AccountState, multisigAccountGraph) => {\n            state.multisigAccountGraph = multisigAccountGraph;\n        },\n        updateSubscriptions: (state: AccountState, payload: { address: string; subscriptions: SubscriptionType }) => {\n            const { address, subscriptions } = payload;\n\n            // if subscriptions are empty, unset the address subscriptions\n            if (!subscriptions) {\n                Vue.delete(state.subscriptions, address);\n                return;\n            }\n\n            // get current subscriptions from state\n            const oldSubscriptions = state.subscriptions[address] || [];\n            // update subscriptions\n            const newSubscriptions: SubscriptionType[] = [...oldSubscriptions, subscriptions];\n            // update state\n            Vue.set(state.subscriptions, address, newSubscriptions);\n        },\n        addToSelectedAddressesToInteract: (state: AccountState, pathNumber: number) => {\n            const selectedAccounts = [...state.selectedAddressesToInteract];\n            selectedAccounts.push(pathNumber);\n            state.selectedAddressesToInteract = selectedAccounts;\n        },\n        removeFromSelectedAddressesToInteract: (state: AccountState, pathNumber: number) => {\n            const selectedAccounts = [...state.selectedAddressesToInteract];\n            const indexToDelete = selectedAccounts.indexOf(pathNumber);\n            selectedAccounts.splice(indexToDelete, 1);\n            state.selectedAddressesToInteract = selectedAccounts;\n        },\n    },\n    actions: {\n        /**\n         * Possible `options` values include:\n         * @type {\n         *    skipTransactions: boolean,\n         * }\n         */\n        async initialize({ commit, getters }, { address }) {\n            const callback = async () => {\n                if (!address || !address.length) {\n                    return;\n                }\n                commit('setInitialized', true);\n            };\n            await Lock.initialize(callback, { getters });\n        },\n        async uninitialize({ commit, dispatch, getters }, { address }) {\n            const callback = async () => {\n                // close websocket connections\n                await dispatch('UNSUBSCRIBE', address);\n                await dispatch('transaction/RESET_TRANSACTIONS', {}, { root: true });\n                commit('setInitialized', false);\n            };\n            await Lock.uninitialize(callback, { getters });\n        },\n\n        /**\n         * Possible `options` values include:\n         * @type {\n         *    isCosignatoryMode: boolean,\n         * }\n         */\n        async SET_CURRENT_ACCOUNT({ commit, dispatch, getters }, currentAccount: AccountModel) {\n            const previous: AccountModel = getters.currentAccount;\n            if (previous && previous.address === currentAccount.address) {\n                return;\n            }\n\n            const currentAccountAddress: Address = Address.createFromRawAddress(currentAccount.address);\n            dispatch('diagnostic/ADD_DEBUG', 'Store action account/SET_CURRENT_ACCOUNT dispatched with ' + currentAccountAddress.plain(), {\n                root: true,\n            });\n\n            // set current account\n            commit('currentAccount', currentAccount);\n\n            // reset current signer\n            await dispatch('SET_CURRENT_SIGNER', {\n                address: currentAccountAddress,\n            });\n            //reset current account alias\n            await dispatch('LOAD_CURRENT_ACCOUNT_ALIASES', currentAccountAddress);\n\n            $eventBus.$emit('onAccountChange', currentAccountAddress.plain());\n        },\n\n        async RESET_CURRENT_ACCOUNT({ commit, dispatch }) {\n            dispatch('diagnostic/ADD_DEBUG', 'Store action account/RESET_CURRENT_ACCOUNT dispatched', { root: true });\n            commit('currentAccount', null);\n            commit('currentAccountAddress', null);\n            commit('currentSignerAddress', null);\n            commit('currentSignerPublicKey', null);\n            commit('currentAccountAliases', []);\n        },\n\n        async SET_CURRENT_SIGNER({ commit, dispatch, getters, rootGetters }, { address }: { address: Address }) {\n            if (!address) {\n                throw new Error('Address must be provided when calling account/SET_CURRENT_SIGNER!');\n            }\n            const currentProfile: ProfileModel = rootGetters['profile/currentProfile'];\n            const currentAccount: AccountModel = getters.currentAccount;\n            const previousSignerAddress: Address = getters.currentSignerAddress;\n\n            const currentSignerAddress: Address = address;\n\n            if (previousSignerAddress && previousSignerAddress.equals(currentSignerAddress)) {\n                return;\n            }\n\n            dispatch('diagnostic/ADD_DEBUG', 'Store action account/SET_CURRENT_SIGNER dispatched with ' + currentSignerAddress.plain(), {\n                root: true,\n            });\n\n            dispatch('transaction/RESET_TRANSACTIONS', {}, { root: true });\n            dispatch('restriction/RESET_ACCOUNT_RESTRICTIONS', {}, { root: true });\n\n            const currentAccountAddress = Address.createFromRawAddress(currentAccount.address);\n            const knownAccounts = new AccountService().getKnownAccounts(currentProfile.accounts);\n\n            commit('currentSignerAddress', currentSignerAddress);\n            commit('currentAccountAddress', currentAccountAddress);\n            commit('isCosignatoryMode', !currentSignerAddress.equals(currentAccountAddress));\n            commit('knownAccounts', knownAccounts);\n\n            // Upgrade\n            dispatch('namespace/SIGNER_CHANGED', {}, { root: true });\n            dispatch('mosaic/SIGNER_CHANGED', {}, { root: true });\n            dispatch('transaction/SIGNER_CHANGED', {}, { root: true });\n            dispatch('metadata/SIGNER_CHANGED', {}, { root: true });\n            dispatch('harvesting/SET_CURRENT_SIGNER_HARVESTING_MODEL', currentSignerAddress.plain(), { root: true });\n\n            // open / close websocket connections\n            if (previousSignerAddress) {\n                await dispatch('UNSUBSCRIBE', previousSignerAddress);\n            }\n            await dispatch('SUBSCRIBE', currentSignerAddress);\n\n            await dispatch('LOAD_ACCOUNT_INFO');\n\n            dispatch('namespace/LOAD_NAMESPACES', {}, { root: true });\n            dispatch('mosaic/LOAD_MOSAICS', {}, { root: true });\n        },\n\n        async NETWORK_CHANGED({ dispatch }) {\n            dispatch('transaction/RESET_TRANSACTIONS', {}, { root: true });\n            dispatch('namespace/RESET_NAMESPACES', {}, { root: true });\n            dispatch('mosaic/RESET_MOSAICS', {}, { root: true });\n            dispatch('transaction/LOAD_TRANSACTIONS', undefined, { root: true });\n            await dispatch('mosaic/LOAD_NETWORK_CURRENCIES', undefined, {\n                root: true,\n            });\n            await dispatch('LOAD_ACCOUNT_INFO');\n            dispatch('namespace/LOAD_NAMESPACES', {}, { root: true });\n            dispatch('mosaic/LOAD_MOSAICS', {}, { root: true });\n        },\n\n        async GET_RECIPIENT({ commit, rootGetters }, recipientAddress?: Address) {\n            if (recipientAddress) {\n                //First check known accounts\n                const currentProfile: ProfileModel = rootGetters['profile/currentProfile'];\n                const knownAccounts = new AccountService().getKnownAccounts(currentProfile.accounts);\n                const knownRecipient = knownAccounts.find((ka) => ka.address === recipientAddress.plain());\n                if (knownRecipient) {\n                    commit('currentRecipient', AccountModel.getObjects(knownRecipient).publicAccount);\n                } else {\n                    const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n                    const getAccountsInfoPromise = repositoryFactory\n                        .createAccountRepository()\n                        .getAccountInfo(recipientAddress)\n                        .toPromise()\n                        .catch(() => commit('currentRecipient', null));\n                    const accountsInfo = await getAccountsInfoPromise;\n\n                    commit('currentRecipient', (accountsInfo as AccountInfo).publicAccount);\n                }\n            } else {\n                commit('currentRecipient', null);\n            }\n        },\n\n        async LOAD_CURRENT_ACCOUNT_ALIASES({ commit, rootGetters }, currentAccountAddress: Address) {\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const aliasPromise = repositoryFactory\n                .createNamespaceRepository()\n                .getAccountsNames([currentAccountAddress])\n                .toPromise()\n                .catch(() => commit('currentAccountAliases', []));\n            const aliases = await aliasPromise;\n            commit('currentAccountAliases', aliases);\n        },\n\n        async LOAD_ACCOUNT_INFO({ commit, getters, rootGetters, dispatch }) {\n            const networkType: NetworkType = rootGetters['network/networkType'];\n            const currentAccount: AccountModel = getters.currentAccount;\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const currentSignerAddress: Address = getters.currentSignerAddress;\n            const currentAccountAddress: Address = getters.currentAccountAddress;\n            const knownAccounts: AccountModel[] = getters.knownAccounts;\n\n            // avoid calls if no account set\n            if (!currentAccount || !currentAccountAddress) {\n                return;\n            }\n\n            // remote calls:\n\n            if (!currentAccountAddress) {\n                return;\n            }\n\n            const getMultisigAccountGraphInfoPromise = repositoryFactory\n                .createMultisigRepository()\n                .getMultisigAccountGraphInfo(currentAccountAddress)\n                .pipe(\n                    map((g) => {\n                        // sorted array to be represented in multisig tree\n                        commit('multisigAccountGraph', g.multisigEntries);\n                        return MultisigService.getMultisigInfoFromMultisigGraphInfo(g);\n                    }),\n                    catchError(() => {\n                        return of([]);\n                    }),\n                )\n                .toPromise();\n\n            // REMOTE CALL\n            const aliasPromise = repositoryFactory\n                .createNamespaceRepository()\n                .getAccountsNames([currentAccountAddress])\n                .toPromise()\n                .catch(() => commit('currentAccountAliases', []));\n            const aliases = await aliasPromise;\n            commit('currentAccountAliases', aliases);\n\n            const multisigAccountsInfo: MultisigAccountInfo[] = await getMultisigAccountGraphInfoPromise;\n            const currentAccountMultisigInfo = multisigAccountsInfo.find((m) => m.accountAddress.equals(currentAccountAddress));\n            const currentSignerMultisigInfo = multisigAccountsInfo.find((m) => m.accountAddress.equals(currentSignerAddress));\n            // update multisig flag in currentAccount\n            const accountService = new AccountService();\n            if (currentAccountMultisigInfo && currentAccountMultisigInfo.cosignatoryAddresses.length > 0) {\n                if (!currentAccount.isMultisig) {\n                    accountService.updateIsMultisig(currentAccount, true);\n                }\n            } else {\n                accountService.updateIsMultisig(currentAccount, false);\n            }\n\n            const signers = new MultisigService().getSigners(\n                networkType,\n                knownAccounts,\n                currentAccount,\n                currentAccountMultisigInfo,\n                multisigAccountsInfo,\n            );\n\n            const knownAddresses = _.uniqBy(\n                [...signers.map((s) => s.address), ...knownAccounts.map((w) => Address.createFromRawAddress(w.address))].filter((a) => a),\n                'address',\n            );\n\n            commit('knownAddresses', knownAddresses);\n            commit(\n                'currentSigner',\n                signers.find((s) => s.address.equals(currentSignerAddress)),\n            );\n            commit('signers', signers);\n            commit('multisigAccountsInfo', multisigAccountsInfo);\n            commit('currentAccountMultisigInfo', currentAccountMultisigInfo);\n            commit('currentSignerMultisigInfo', currentSignerMultisigInfo);\n\n            // REMOTE CALL\n            const getAccountsInfoPromise = repositoryFactory.createAccountRepository().getAccountsInfo(knownAddresses).toPromise();\n            const accountsInfo = await getAccountsInfoPromise;\n\n            commit('accountsInfo', accountsInfo);\n\n            // read signer info to get public key\n            const signerModel = knownAccounts.find((w) => w.address === currentSignerAddress.plain());\n            if (signerModel !== undefined) {\n                commit('currentSignerPublicKey', signerModel.publicKey);\n            } else {\n                if (getters.currentSignerAccountInfo) {\n                    commit('currentSignerPublicKey', getters.currentSignerAccountInfo.publicKey);\n                }\n            }\n            dispatch('aggregateTransaction/CLEAR_AGGREGATE_TRANSACTIONS_LIST', {}, { root: true });\n        },\n\n        UPDATE_CURRENT_ACCOUNT_NAME({ commit, getters, rootGetters }, name: string) {\n            const currentAccount: AccountModel = getters.currentAccount;\n            if (!currentAccount) {\n                return;\n            }\n            const currentProfile: ProfileModel = rootGetters['profile/currentProfile'];\n            if (!currentProfile) {\n                return;\n            }\n            const accountService = new AccountService();\n            accountService.updateName(currentAccount, name);\n            const knownAccounts = accountService.getKnownAccounts(currentProfile.accounts);\n            commit('knownAccounts', knownAccounts);\n            // update current signer name\n            const signers: Signer[] = getters.signers;\n            signers.map((s) => {\n                if (s.address.plain() === currentAccount.address) {\n                    s.label = name;\n                    commit('currentSigner', s);\n                }\n            });\n        },\n\n        UPDATE_CURRENT_ACCOUNT_REMOTE_ACCOUNT({ commit, getters, rootGetters, dispatch }, encRemoteAccountPrivateKey: string) {\n            const currentAccount: AccountModel = getters.currentAccount;\n            if (!currentAccount) {\n                return;\n            }\n            const currentProfile: ProfileModel = rootGetters['profile/currentProfile'];\n            if (!currentProfile) {\n                return;\n            }\n            const accountService = new AccountService();\n            accountService.updateRemoteAccount(currentAccount, encRemoteAccountPrivateKey);\n            const knownAccounts = accountService.getKnownAccounts(currentProfile.accounts);\n            commit('knownAccounts', knownAccounts);\n            dispatch('LOAD_ACCOUNT_INFO');\n        },\n\n        DELETE_CURRENT_ACCOUNT({ commit, rootGetters }, account: AccountModel) {\n            if (!account) {\n                return;\n            }\n            const currentProfile: ProfileModel = rootGetters['profile/currentProfile'];\n            if (!currentProfile) {\n                return;\n            }\n            const accountService = new AccountService();\n            accountService.deleteAccount(account);\n            const accountsIds = accountService\n                .getAccounts()\n                .filter((acc) => acc.profileName === currentProfile.profileName)\n                .map((acc) => acc.id);\n            // update accounts in profile\n            new ProfileService().updateAccounts(currentProfile, [...accountsIds]);\n            // set first account to be selected\n            const knownAccounts = accountService.getKnownAccounts(currentProfile.accounts);\n            commit('currentAccount', knownAccounts[0]);\n            // update known Accounts\n            commit('knownAccounts', knownAccounts);\n        },\n\n        SET_KNOWN_ACCOUNTS({ commit }, accounts: string[]) {\n            commit('knownAccounts', new AccountService().getKnownAccounts(accounts));\n        },\n\n        /**\n         * Websocket API\n         */\n        // Subscribe to latest account transactions.\n        async SUBSCRIBE({ commit, dispatch, rootGetters }, address: Address) {\n            if (!address) {\n                return;\n            }\n\n            const plainAddress = address.plain();\n\n            // use RESTService to open websocket channel subscriptions\n            const repositoryFactory = rootGetters['network/repositoryFactory'] as RepositoryFactory;\n            const subscriptions: SubscriptionType = await RESTService.subscribeTransactionChannels(\n                { commit, dispatch },\n                repositoryFactory,\n                plainAddress,\n            );\n            const payload: { address: string; subscriptions: SubscriptionType } = { address: plainAddress, subscriptions };\n            // update state of listeners & subscriptions\n            commit('updateSubscriptions', payload);\n        },\n\n        // Unsubscribe an address open websocket connections\n        async UNSUBSCRIBE({ commit, getters }, plainAddress: Address) {\n            // get all subscriptions\n            const subscriptions: Record<string, SubscriptionType[]> = getters.getSubscriptions;\n            // subscriptions to close\n            const subscriptionTypes = (subscriptions && subscriptions[plainAddress.plain()]) || [];\n\n            if (!subscriptionTypes.length) {\n                return;\n            }\n\n            // close subscriptions\n            for (const subscriptionType of subscriptionTypes) {\n                const { listener, subscriptions } = subscriptionType;\n                for (const subscription of subscriptions) {\n                    subscription.unsubscribe();\n                }\n                listener.close();\n            }\n\n            // update state of listeners & subscriptions\n            const payload: { address: string; subscriptions: SubscriptionType } = {\n                address: plainAddress.plain(),\n                subscriptions: null,\n            };\n            commit('updateSubscriptions', payload);\n        },\n    },\n};\n"],"sourceRoot":""}]}
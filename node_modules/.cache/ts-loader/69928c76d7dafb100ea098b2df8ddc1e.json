{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormProfilePasswordUpdate/FormProfilePasswordUpdateTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormProfilePasswordUpdate/FormProfilePasswordUpdateTs.ts","mtime":1611927227642},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormProfilePasswordUpdate/FormProfilePasswordUpdateTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Password, Crypto } from 'symbol-sdk';\n// internal dependencies\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\nimport { ProfileService } from '@/services/ProfileService';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { AccountService } from '@/services/AccountService';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        FormWrapper,\n        FormRow,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            networkConfiguration: 'network/networkConfiguration',\n            isSettingVisible: 'profile/isSettingVisible',\n        }),\n    },\n})\nexport class FormProfilePasswordUpdateTs extends Vue {\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {ProfileModel}\n     */\n    public currentProfile: ProfileModel;\n\n    private networkConfiguration: NetworkConfigurationModel;\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Whether account is currently being unlocked\n     * @var {boolean}\n     */\n    public isUnlockingAccount: boolean = false;\n\n    /**\n     * Form fields\n     * @var {Object}\n     */\n    public formItems = {\n        password: '',\n        passwordConfirm: '',\n        passwordHint: '',\n    };\n\n    /**\n     * Indicates if form has no changes and button should be disabled.\n     */\n    public isConfirmButtonDisabled: boolean = true;\n\n    /**\n     * Unlocks confirm button.\n     */\n    public onChange(): void {\n        this.isConfirmButtonDisabled = false;\n    }\n\n    /**\n     * Type the ValidationObserver refs\n     * @type {{\n     *     observer: InstanceType<typeof ValidationObserver>\n     *   }}\n     */\n    public $refs!: {\n        observer: InstanceType<typeof ValidationObserver>;\n    };\n    public isSettingVisible: boolean;\n    /// region computed properties getter/setter\n    public get hasAccountUnlockModal(): boolean {\n        return this.isUnlockingAccount;\n    }\n\n    public set hasAccountUnlockModal(f: boolean) {\n        this.isUnlockingAccount = f;\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Submit action asks for account unlock\n     * @return {void}\n     */\n    public onSubmit() {\n        this.hasAccountUnlockModal = true;\n\n        // resets form validation\n        this.$nextTick(() => {\n            this.$refs.observer.reset();\n        });\n    }\n\n    /**\n     * When account is unlocked, the sub account can be created\n     */\n    public async onAccountUnlocked(account: Account, oldPassword: Password) {\n        try {\n            const profileService = new ProfileService();\n            const newPassword = new Password(this.formItems.password);\n            const oldSeed = this.currentProfile.seed;\n            const plainSeed = Crypto.decrypt(oldSeed, oldPassword.value);\n            const newSeed = Crypto.encrypt(plainSeed, newPassword.value);\n\n            // // - create new password hash\n            const passwordHash = ProfileService.getPasswordHash(newPassword);\n            profileService.updatePassword(this.currentProfile, passwordHash, this.formItems.passwordHint, newSeed);\n\n            const accountService = new AccountService();\n            const accountIdentifiers = this.currentProfile.accounts;\n\n            const accounts = accountService.getKnownAccounts(accountIdentifiers);\n            for (const model of accounts) {\n                const updatedModel = accountService.updateWalletPassword(model, oldPassword, newPassword);\n                accountService.saveAccount(updatedModel);\n            }\n\n            // - update state and finalize\n            this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.SUCCESS_PASSWORD_CHANGED);\n            this.isSettingVisible && this.$store.commit('profile/toggleSetting');\n            await this.$store.dispatch('profile/LOG_OUT');\n            setTimeout(() => {\n                this.$router.push({ name: 'profiles.login' });\n            }, 500);\n        } catch (e) {\n            this.$store.dispatch('notification/ADD_ERROR', 'An error happened, please try again.');\n            console.error(e);\n        }\n    }\n}\n"],"sourceRoot":""}]}
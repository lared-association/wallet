{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/core/transactions/BroadcastResult.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/core/transactions/BroadcastResult.ts","mtime":1606213958961},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpleHBvcnQgdmFyIEJyb2FkY2FzdFJlc3VsdCA9Ci8qKgogKiBDcmVhdGUgYSB0cmFuc2FjdGlvbiBicm9hZGNhc3QgcmVzdWx0IGluc3RhbmNlCiAqCiAqIEBwYXJhbSB7U2lnbmVkVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uCiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3VjY2VzcwogKiBAcGFyYW0ge3N0cmluZ30gZXJyb3IKICovCmZ1bmN0aW9uIEJyb2FkY2FzdFJlc3VsdCgKLyoqCiAqIFRoZSB0cmFuc2FjdGlvbiB0aGF0IHdhcyBhbm5vdW5jZWQKICogQHZhciB7U2lnbmVkVHJhbnNhY3Rpb259CiAqLwpzaWduZWRUcmFuc2FjdGlvbiwKLyoqCiAqIFRoZSB0cmFuc2FjdGlvbiB0aGF0IHJldHVybmVkLgogKiBAdmFyIHtTaWduZWRUcmFuc2FjdGlvbn0KICovCnRyYW5zYWN0aW9uLAovKioKICogV2hldGhlciBicm9hZGNhc3Rpbmcgd2FzIHN1Y2Nlc3NmdWxsCiAqIEB2YXIge2Jvb2xlYW59CiAqKi8Kc3VjY2VzcywKLyoqCiAqIEVycm9yIG1lc3NhZ2UgKG9wdGlvbmFsKQogKiBAdmFyIHtzdHJpbmd9CiAqKi8KZXJyb3IpIHsKICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvYWRjYXN0UmVzdWx0KTsKCiAgdGhpcy5zaWduZWRUcmFuc2FjdGlvbiA9IHNpZ25lZFRyYW5zYWN0aW9uOwogIHRoaXMudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjsKICB0aGlzLnN1Y2Nlc3MgPSBzdWNjZXNzOwogIHRoaXMuZXJyb3IgPSBlcnJvcjsKfTs="},{"version":3,"sources":["/home/hero/lared-wallet/src/core/transactions/BroadcastResult.ts"],"names":[],"mappings":";;AAiBA,WAAa,eAAb;AACI;;;;;;;AAOA;AACI;;;;AAIgB,iBALpB;AAOI;;;;AAIgB,WAXpB;AAYI;;;;AAIgB,OAhBpB;AAiBI;;;;AAIgB,KArBpB,EAqBkC;AAAA;;AAhBd,OAAA,iBAAA,GAAA,iBAAA;AAMA,OAAA,WAAA,GAAA,WAAA;AAKA,OAAA,OAAA,GAAA,OAAA;AAKA,OAAA,KAAA,GAAA,KAAA;AAChB,CA9BR","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { CosignatureSignedTransaction, SignedTransaction, Transaction } from 'symbol-sdk';\n\nexport class BroadcastResult {\n    /**\n     * Create a transaction broadcast result instance\n     *\n     * @param {SignedTransaction} transaction\n     * @param {boolean} success\n     * @param {string} error\n     */\n    constructor(\n        /**\n         * The transaction that was announced\n         * @var {SignedTransaction}\n         */\n        public readonly signedTransaction: SignedTransaction | CosignatureSignedTransaction,\n\n        /**\n         * The transaction that returned.\n         * @var {SignedTransaction}\n         */\n        public readonly transaction: Transaction | undefined,\n        /**\n         * Whether broadcasting was successfull\n         * @var {boolean}\n         **/\n        public readonly success: boolean,\n        /**\n         * Error message (optional)\n         * @var {string}\n         **/\n        public readonly error?: string,\n    ) {}\n}\n"],"sourceRoot":""}]}
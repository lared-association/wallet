{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/node_modules/symbol-paper-wallets/index.ts","dependencies":[{"path":"/home/hero/lared-wallet/node_modules/symbol-paper-wallets/index.ts","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/node_modules/symbol-paper-wallets/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { PDFDocument, PDFFont, PDFPage, rgb } from \"pdf-lib\";\nimport fontkit from \"@pdf-lib/fontkit\";\nimport { AccountQR, ContactQR, MnemonicQR, QRCode } from \"symbol-qr-library\";\nimport encodedFont from \"./resources/encodedFont\";\nimport encodedBasePdf from \"./resources/encodedBasePdf\";\nimport encodedBasePrivateKeyPdf from \"./resources/encodedBasePrivateKeyPdf\";\n\n/**\n * Default generation hash\n */\nconst DEFAULT_GENERATION_HASH_SEED =\n  \"57F7DA205008026C776CB6AED843393F04CD458E0AA2D9F1D5F31A402072B2D6\";\n\n/**\n * Printing constants\n */\nconst MNEMONIC_POSITION = {\n  x: 184,\n  y: 36,\n};\nconst ADDRESS_POSITION = {\n  x: 184,\n  y: 90,\n};\nconst MNEMONIC_QR_POSITION = {\n  x: 264,\n  y: 159,\n  width: 99,\n  height: 99,\n};\nconst ADDRESS_QR_POSITION = {\n  x: 418,\n  y: 159,\n  width: 99,\n  height: 99,\n};\n\n/**\n * Abstraction for NetworkType sdk interface\n */\nexport type INetworkType = number;\n/**\n * HD Account info interface\n */\nexport type IHDAccountInfo = {\n  mnemonic: string;\n  rootAccountPublicKey: string;\n  rootAccountAddress: string;\n};\n/**\n * Account info interface\n */\nexport type IAccountInfo = {\n  name: string;\n  address: string;\n  publicKey: string;\n  privateKey: string;\n};\n\n/**\n * Symbol Paper wallet class\n */\nclass SymbolPaperWallet {\n  public hdAccount: IHDAccountInfo;\n  public accountInfos: IAccountInfo[];\n  public network: INetworkType;\n  public generationHashSeed: string;\n\n  constructor(\n    hdAccountInfo: IHDAccountInfo,\n    accountInfos: IAccountInfo[],\n    network: INetworkType,\n    generationHashSeed: string = DEFAULT_GENERATION_HASH_SEED\n  ) {\n    this.hdAccount = hdAccountInfo;\n    this.accountInfos = accountInfos;\n    this.network = network;\n    this.generationHashSeed = generationHashSeed;\n  }\n\n  /**\n   * Exports as a PDF Uin8Array\n   */\n  async toPdf(): Promise<Uint8Array> {\n    const plainPdfFile = new Buffer(encodedBasePdf, \"base64\");\n    let pdfDoc = await PDFDocument.load(plainPdfFile);\n    const notoSansFontBytes = new Buffer(encodedFont, \"base64\");\n    pdfDoc.registerFontkit(fontkit);\n    const notoSansFont = await pdfDoc.embedFont(notoSansFontBytes);\n\n    pdfDoc = await this.writeMnemonicPage(pdfDoc, notoSansFont);\n\n    for (let account of this.accountInfos) {\n      pdfDoc = await this.writeAccountPage(account, pdfDoc);\n    }\n    return pdfDoc.save();\n  }\n\n  /**\n   * Writes the mnemonic page into the given pdfDoc\n   * @param pdfDoc\n   * @param font\n   */\n  private async writeMnemonicPage(\n    pdfDoc: PDFDocument,\n    font: PDFFont\n  ): Promise<PDFDocument> {\n    const pages = pdfDoc.getPages();\n    const page = pages[0];\n    await this.writeAddress(this.hdAccount.rootAccountAddress, page, font);\n\n    const mnemonicWords = this.hdAccount.mnemonic.split(\" \");\n    const firstMnemonic = mnemonicWords.slice(\n      0,\n      Math.round(mnemonicWords.length / 2)\n    );\n    const secondMnemonic = mnemonicWords.slice(\n      Math.round(mnemonicWords.length / 2),\n      mnemonicWords.length\n    );\n    await this.writePrivateInfo(\n      [firstMnemonic.join(\" \"), secondMnemonic.join(\" \")],\n      page,\n      font\n    );\n\n    const plainMnemonicQR = new MnemonicQR(\n      this.hdAccount.mnemonic,\n      this.network,\n      this.generationHashSeed\n    );\n    await this.writePrivateQR(plainMnemonicQR, pdfDoc, page);\n\n    const contactQR = new ContactQR(\n      \"Root account\",\n      this.hdAccount.rootAccountPublicKey,\n      this.network,\n      this.generationHashSeed\n    );\n    await this.writePublicQR(contactQR, pdfDoc, page);\n\n    return pdfDoc;\n  }\n\n  /**\n   * Writes the account page into the given pdfDoc\n   * @param account\n   * @param pdfDoc\n   */\n  private async writeAccountPage(\n    account: IAccountInfo,\n    pdfDoc: PDFDocument\n  ): Promise<PDFDocument> {\n    const newPlainPdfFile = new Buffer(encodedBasePrivateKeyPdf, \"base64\");\n    const newPdfDoc = await PDFDocument.load(newPlainPdfFile);\n    const notoSansFontBytes = new Buffer(encodedFont, \"base64\");\n    newPdfDoc.registerFontkit(fontkit);\n    const font = await newPdfDoc.embedFont(notoSansFontBytes);\n\n    let accountPage = newPdfDoc.getPages()[0];\n    await this.writeAddress(account.address, accountPage, font);\n\n    await this.writePrivateInfo([account.privateKey], accountPage, font);\n\n    const accountQR = new AccountQR(\n      account.privateKey,\n      this.network,\n      this.generationHashSeed\n    );\n    await this.writePrivateQR(accountQR, newPdfDoc, accountPage);\n\n    const contactQR = new ContactQR(\n      account.name,\n      account.publicKey,\n      this.network,\n      this.generationHashSeed\n    );\n    await this.writePublicQR(contactQR, newPdfDoc, accountPage);\n\n    [accountPage] = await pdfDoc.copyPages(newPdfDoc, [0]);\n    pdfDoc.addPage(accountPage);\n    return pdfDoc;\n  }\n\n  /**\n   * Writes address into the given pdfDoc\n   * @param address\n   * @param page\n   * @param font\n   */\n  private async writeAddress(\n    address: string,\n    page: PDFPage,\n    font: PDFFont\n  ): Promise<PDFPage> {\n    page.drawText(address, {\n      x: ADDRESS_POSITION.x,\n      y: ADDRESS_POSITION.y,\n      size: 12,\n      font: font,\n      color: rgb(82 / 256, 0, 198 / 256),\n    });\n    return page;\n  }\n\n  /**\n   * Writes private info into the pdfDoc\n   * @param privateLines\n   * @param page\n   * @param font\n   */\n  private async writePrivateInfo(\n    privateLines: string[],\n    page: PDFPage,\n    font: PDFFont\n  ): Promise<PDFPage> {\n    for (let i = 0; i < privateLines.length; i++) {\n      page.drawText(privateLines[i], {\n        x: MNEMONIC_POSITION.x,\n        y: MNEMONIC_POSITION.y - 16 * i,\n        size: 9,\n        font: font,\n        color: rgb(82 / 256, 0, 198 / 256),\n      });\n    }\n    return page;\n  }\n\n  /**\n   * Writes the private QR (mnemonic or private key) into the given pdfDoc\n   * @param qr\n   * @param pdfDoc\n   * @param page\n   */\n  private async writePrivateQR(\n    qr: QRCode,\n    pdfDoc: PDFDocument,\n    page: PDFPage\n  ): Promise<PDFPage> {\n    const qrBase64 = await qr.toBase64().toPromise();\n    const png = await pdfDoc.embedPng(qrBase64);\n\n    page.drawImage(png, {\n      x: MNEMONIC_QR_POSITION.x,\n      y: MNEMONIC_QR_POSITION.y,\n      width: MNEMONIC_QR_POSITION.width,\n      height: MNEMONIC_QR_POSITION.height,\n    });\n    return page;\n  }\n\n  /**\n   * Writes the public QR into the given pdfDoc\n   * @param qr\n   * @param pdfDoc\n   * @param page\n   */\n  private async writePublicQR(\n    qr: QRCode,\n    pdfDoc: PDFDocument,\n    page: PDFPage\n  ): Promise<PDFPage> {\n    const qrBase64 = await qr.toBase64().toPromise();\n    const png = await pdfDoc.embedPng(qrBase64);\n\n    page.drawImage(png, {\n      x: ADDRESS_QR_POSITION.x,\n      y: ADDRESS_QR_POSITION.y,\n      width: ADDRESS_QR_POSITION.width,\n      height: ADDRESS_QR_POSITION.height,\n    });\n    return page;\n  }\n}\n\nexport { SymbolPaperWallet };\n"],"sourceRoot":""}]}
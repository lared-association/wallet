{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/DerivationService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/DerivationService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/services/DerivationService.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAeA;AACA,SAAS,uBAAT,QAAwC,8BAAxC;AACA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAC5B,EAAA,oBAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,oBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,oBAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,oBAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,oBAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACH,CAND,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC;;AAQA,WAAa,iBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACI;;;;;AADJ,gCAMuB,IANvB,EAMmC;AAC3B,aAAO,uBAAuB,CAAC,QAAxB,CAAiC,IAAjC,CAAP;AACH;AAED;;;;;;;AAVJ;AAAA;AAAA,uCAgB8B,IAhB9B,EAgBwH;AAAA,UAA5E,KAA4E,uEAA9C,oBAAoB,CAAC,OAAyB;AAAA,UAAhB,IAAgB,uEAAD,CAAC;AAChH;AACA,WAAK,eAAL,CAAqB,IAArB,EAFgH,CAIhH;;AACA,WAAK,oBAAL,CAA0B,KAA1B,EALgH,CAOhH;;AACA,UAAM,KAAK,GAAG,KAAd;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd,CATgH,CAWhH;;AACA,UAAM,IAAI,GAAG,CAAC,IAAI,IAAI,CAAR,GAAY,CAAZ,GAAgB,IAAjB,IAAyB,QAAQ,CAAC,KAAK,CAAC,KAAD,CAAL,CAAa,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAD,CAA9C,CAZgH,CAchH;;AACA,aAAO,KAAK,CACP,GADE,CACE,UAAC,KAAD,EAAQ,GAAR,EAAe;AAChB,YAAI,GAAG,KAAK,KAAZ,EAAmB;AACf,iBAAO,KAAP;AACH;;AACD,yBAAU,IAAV;AACH,OANE,EAOF,IAPE,CAOG,GAPH,CAAP;AAQH;AAED;;;;;;AAzCJ;AAAA;AAAA,uCA8C8B,KA9C9B,EA8C6C;AACrC,UAAM,WAAW,GAAG,cAAc,CAAC,oBAAnC,CADqC,CAGrC;;AACA,UAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACf,eAAO,WAAP;AACH,OANoC,CAQrC;;;AACA,UAAI,KAAK,CAAC,OAAN,CAAc,WAAd,MAA+B,CAAC,CAApC,EAAuC;AACnC,eAAO,WAAP;AACH,OAXoC,CAarC;;;AACA,UAAM,oBAAoB,GAAG,KAAK,CAC7B,GADwB,CACpB,UAAC,IAAD;AAAA,eAAW;AACZ,UAAA,IAAI,EAAJ,IADY;AAEZ,UAAA,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,oBAAoB,CAAC,OAArC,CAAD,EAAgD,EAAhD;AAFP,SAAX;AAAA,OADoB,EAKxB,IALwB,CAKnB,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,CAAC,CAAC,SAAF,GAAc,CAAC,CAAC,SAA1B;AAAA,OALmB,CAA7B,CAdqC,CAqBrC;;AACA,UAAM,cAAc,GAAG,oBAAoB,CACvC;AADuC,OAEtC,MAFkB,CAEX,gBAAgB,CAAhB,EAAmB,IAAnB,EAA2B;AAAA,YAAxB,SAAwB,QAAxB,SAAwB;;AAC/B;AACA,YAAI,CAAC,KAAK,IAAI,CAAC,MAAL,GAAc,CAAxB,EAA2B;AACvB,iBAAO,IAAP;AACH,SAJ8B,CAM/B;;;AACA,YAAI,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,CAAY,SAAZ,KAA0B,SAAS,GAAG,CAA1C,EAA6C;AACzC,iBAAO,IAAP;AACH,SAT8B,CAW/B;;;AACA,eAAO,KAAP;AACH,OAfkB,EAgBlB,IAhBkB,CAgBb,UAAC,IAAD;AAAA,eAAU,IAAV;AAAA,OAhBa,CAAvB,CAtBqC,CAsCV;AAE3B;;AACA,aAAO,KAAK,kBAAL,CAAwB,cAAc,CAAC,IAAvC,EAA6C,oBAAoB,CAAC,OAAlE,CAAP;AACH;AAED;;;;;;;AA1FJ;AAAA;AAAA,uCAgG8B,IAhG9B,EAgGwH;AAAA,UAA5E,KAA4E,uEAA9C,oBAAoB,CAAC,OAAyB;AAAA,UAAhB,IAAgB,uEAAD,CAAC;AAChH;AACA,WAAK,eAAL,CAAqB,IAArB,EAFgH,CAIhH;;AACA,WAAK,oBAAL,CAA0B,KAA1B,EALgH,CAOhH;;AACA,UAAM,KAAK,GAAG,KAAd;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd,CATgH,CAWhH;;AACA,UAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAD,CAAL,CAAa,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAD,CAAR,IAA2C,IAAI,IAAI,CAAR,GAAY,CAAZ,GAAgB,IAA3D,CAAX;;AACA,UAAI,IAAI,GAAG,CAAX,EAAc;AACV,QAAA,IAAI,GAAG,CAAP;AACH,OAf+G,CAiBhH;;;AACA,aAAO,KAAK,CACP,GADE,CACE,UAAC,KAAD,EAAQ,GAAR,EAAe;AAChB,YAAI,GAAG,KAAK,KAAZ,EAAmB;AACf,iBAAO,KAAP;AACH;;AACD,yBAAU,IAAV;AACH,OANE,EAOF,IAPE,CAOG,GAPH,CAAP;AAQH;AAED;;;;;;;AA5HJ;AAAA;AAAA,oCAkI2B,IAlI3B,EAkIuC;AAC/B,UAAI,CAAC,KAAK,WAAL,CAAiB,IAAjB,CAAL,EAA6B;AACzB,YAAM,YAAY,GAAG,8BAA8B,IAAnD;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,YAAd;AACA,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACH;AACJ;AAED;;;;;;;AA1IJ;AAAA;AAAA,yCAgJgC,KAhJhC,EAgJ2D;AACnD,UAAM,OAAO,GAAG,CAAC,oBAAoB,CAAC,OAAtB,EAA+B,oBAAoB,CAAC,QAApD,CAAhB;;AACA,UAAI,SAAS,KAAK,OAAO,CAAC,IAAR,CAAa,UAAC,IAAD;AAAA,eAAU,KAAK,KAAK,IAApB;AAAA,OAAb,CAAlB,EAA0D;AACtD,YAAM,YAAY,GAAG,iEAArB;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,YAAd;AACA,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACH;AACJ;AAvJL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// internal dependencies\nimport { DerivationPathValidator } from '@/core/validation/validators';\nimport { AccountService } from '@/services/AccountService';\n\nexport enum DerivationPathLevels {\n    Purpose = 1,\n    CoinType = 2,\n    Profile = 3,\n    Remote = 4, // BIP44=change\n    Address = 5,\n}\n\nexport class DerivationService {\n    /**\n     * Validate derivation path\n     * @param {string} path\n     * @return {boolean}\n     */\n    public isValidPath(path: string): boolean {\n        return DerivationPathValidator.validate(path);\n    }\n\n    /**\n     * Increment a derivation path level\n     * @param {string} path\n     * @param {DerivationPathLevel} which\n     * @return {string}\n     */\n    public incrementPathLevel(path: string, which: DerivationPathLevels = DerivationPathLevels.Profile, step: number = 1): string {\n        // make sure derivation path is valid\n        this.assertValidPath(path);\n\n        // purpose and coin type cannot be changed\n        this.assertCanModifyLevel(which);\n\n        // read levels and increment\n        const index = which as number;\n        const parts = path.split('/');\n\n        // calculate next index (increment)\n        const next = (step <= 1 ? 1 : step) + parseInt(parts[index].replace(/'/, ''));\n\n        // modify affected level only\n        return parts\n            .map((level, idx) => {\n                if (idx !== index) {\n                    return level;\n                }\n                return `${next}'`;\n            })\n            .join('/');\n    }\n\n    /**\n     * Returns the first missing consecutive account path in a path array\n     * @param {string[]} paths\n     * @returns {string}\n     */\n    public getNextAccountPath(paths: string[]): string {\n        const defaultPath = AccountService.DEFAULT_ACCOUNT_PATH;\n\n        // return the default path if no path in the array\n        if (!paths.length) {\n            return defaultPath;\n        }\n\n        // return the default path if it is not in the array\n        if (paths.indexOf(defaultPath) === -1) {\n            return defaultPath;\n        }\n\n        // get the sorted path indexes for the given derivation path level\n        const pathsSortedByIndexes = paths\n            .map((path) => ({\n                path,\n                pathIndex: parseInt(path.split('/')[DerivationPathLevels.Profile], 10),\n            }))\n            .sort((a, b) => a.pathIndex - b.pathIndex);\n\n        // get the first non consecutive path index\n        const firstCandidate = pathsSortedByIndexes\n            // fill an array with indexes with no consecutive next index, and the last index\n            .filter(({ pathIndex }, i, self) => {\n                // the last path is always a candidate\n                if (i === self.length - 1) {\n                    return true;\n                }\n\n                // next path is not consecutive, add it to candidates\n                if (self[i + 1].pathIndex !== pathIndex + 1) {\n                    return true;\n                }\n\n                // next path is consecutive, skip\n                return false;\n            })\n            .find((path) => path); // find the first candidate\n\n        // return path incremented from the first candidate\n        return this.incrementPathLevel(firstCandidate.path, DerivationPathLevels.Profile);\n    }\n\n    /**\n     * Decrement a derivation path level\n     * @param {string} path\n     * @param {DerivationPathLevel} which\n     * @return {string}\n     */\n    public decrementPathLevel(path: string, which: DerivationPathLevels = DerivationPathLevels.Profile, step: number = 1): string {\n        // make sure derivation path is valid\n        this.assertValidPath(path);\n\n        // purpose and coin type cannot be changed\n        this.assertCanModifyLevel(which);\n\n        // read levels and increment\n        const index = which as number;\n        const parts = path.split('/');\n\n        // calculate next index (decrement)\n        let next = parseInt(parts[index].replace(/'/, '')) - (step <= 1 ? 1 : step);\n        if (next < 0) {\n            next = 0;\n        }\n\n        // modify affected level only\n        return parts\n            .map((level, idx) => {\n                if (idx !== index) {\n                    return level;\n                }\n                return `${next}'`;\n            })\n            .join('/');\n    }\n\n    /**\n     * Assert whether \\a path is a valid derivation path\n     * @param {string} path\n     * @return {void}\n     * @throws {Error} On \\a path with invalid derivation path\n     */\n    public assertValidPath(path: string): void {\n        if (!this.isValidPath(path)) {\n            const errorMessage = 'Invalid derivation path: ' + path;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n\n    /**\n     * Assert whether derivation path level can be modified\n     * @param {DerivationPathLevels} which\n     * @return {void}\n     * @throws {Error} On \\a which with protected path level value\n     */\n    public assertCanModifyLevel(which: DerivationPathLevels): void {\n        const protect = [DerivationPathLevels.Purpose, DerivationPathLevels.CoinType];\n        if (undefined !== protect.find((type) => which === type)) {\n            const errorMessage = \"Cannot modify a derivation path's purpose and coin type levels.\";\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n}\n"],"sourceRoot":""}]}
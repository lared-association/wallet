{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/BlockService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/BlockService.ts","mtime":1611927204196},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKLyoKICogQ29weXJpZ2h0IDIwMjAgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwppbXBvcnQgeyBCbG9ja0luZm9Nb2RlbFN0b3JhZ2UgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2Uvc3RvcmFnZS9CbG9ja0luZm9Nb2RlbFN0b3JhZ2UnOwppbXBvcnQgeyBCbG9ja0luZm9Nb2RlbCB9IGZyb20gJ0AvY29yZS9kYXRhYmFzZS9lbnRpdGllcy9CbG9ja0luZm9Nb2RlbCc7CmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IGZsYXRNYXAsIG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7CmltcG9ydCB7IE9ic2VydmFibGVIZWxwZXJzIH0gZnJvbSAnQC9jb3JlL3V0aWxzL09ic2VydmFibGVIZWxwZXJzJzsKZXhwb3J0IHZhciBCbG9ja1NlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJsb2NrU2VydmljZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9ja1NlcnZpY2UpOwoKICAgIC8qKgogICAgICogVGhlIG5hbWVzcGFjZSBpbmZvcm1hdGlvbiBsb2NhbCBjYWNoZS4KICAgICAqLwogICAgdGhpcy5ibG9ja0luZm9Nb2RlbFN0b3JhZ2UgPSBCbG9ja0luZm9Nb2RlbFN0b3JhZ2UuSU5TVEFOQ0U7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQmxvY2tTZXJ2aWNlLCBbewogICAga2V5OiAiZ2V0S25vd25CbG9ja0luZm9zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRLbm93bkJsb2NrSW5mb3MoZ2VuZXJhdGlvbkhhc2gpIHsKICAgICAgcmV0dXJuIHRoaXMuYmxvY2tJbmZvTW9kZWxTdG9yYWdlLmdldChnZW5lcmF0aW9uSGFzaCkgfHwgW107CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QmxvY2tJbmZvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCbG9ja0luZm8ocmVwb3NpdG9yeUZhY3RvcnksIGhlaWdodCwgYWxyZWFkeUxvYWRlZEJsb2NrcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIHJlcG9zaXRvcnlGYWN0b3J5LmdldEdlbmVyYXRpb25IYXNoKCkucGlwZShmbGF0TWFwKGZ1bmN0aW9uIChnZW5lcmF0aW9uSGFzaCkgewogICAgICAgIHZhciBibG9ja0luZm9Nb2RlbHMgPSBfdGhpcy5nZXRLbm93bkJsb2NrSW5mb3MoZ2VuZXJhdGlvbkhhc2gpOwoKICAgICAgICB2YXIgY2FjaGVkTW9kZWwgPSBibG9ja0luZm9Nb2RlbHMuZmluZChmdW5jdGlvbiAobSkgewogICAgICAgICAgcmV0dXJuIG0uaGVpZ2h0ID09PSBoZWlnaHQudG9TdHJpbmcoKTsKICAgICAgICB9KTsKICAgICAgICB2YXIgYWxyZWFkeUxvYWRlZEJsb2NrID0gYWxyZWFkeUxvYWRlZEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICByZXR1cm4gbS5oZWlnaHQgPT09IGhlaWdodC50b1N0cmluZygpOwogICAgICAgIH0pOyAvL09ubHkgbG9hZCBmcm9tIHJlc3QgdGhlIGZpcnN0IHRpbWUgaW4gdGhlIGFwcCBzZXNzaW9uIChidXQgdXNpbmcgdGhlIHN0b3JlZCBjYWNoZSBmb3IgcXVpY2sgdXNlciBmZWVkYmFjaykuCgogICAgICAgIGlmIChjYWNoZWRNb2RlbCAmJiBhbHJlYWR5TG9hZGVkQmxvY2sgJiYgY2FjaGVkTW9kZWwuZ2VuZXJhdGlvbkhhc2ggPT09IGFscmVhZHlMb2FkZWRCbG9jay5nZW5lcmF0aW9uSGFzaCkgewogICAgICAgICAgcmV0dXJuIG9mKGNhY2hlZE1vZGVsKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXBvc2l0b3J5RmFjdG9yeS5jcmVhdGVCbG9ja1JlcG9zaXRvcnkoKS5nZXRCbG9ja0J5SGVpZ2h0KGhlaWdodCkucGlwZShtYXAoZnVuY3Rpb24gKGR0bykgewogICAgICAgICAgcmV0dXJuIG5ldyBCbG9ja0luZm9Nb2RlbChkdG8pOwogICAgICAgIH0pLCB0YXAoZnVuY3Rpb24gKG1vZGVsKSB7CiAgICAgICAgICB2YXIgYmxvY2tJbmZvTW9kZWxzID0gXy51bmlxQnkoW21vZGVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KF90aGlzLmdldEtub3duQmxvY2tJbmZvcyhnZW5lcmF0aW9uSGFzaCkpKSwgJ2hlaWdodCcpOwoKICAgICAgICAgIF90aGlzLmJsb2NrSW5mb01vZGVsU3RvcmFnZS5zZXQoZ2VuZXJhdGlvbkhhc2gsIGJsb2NrSW5mb01vZGVscyk7CiAgICAgICAgfSksIE9ic2VydmFibGVIZWxwZXJzLmRlZmF1bHRGaXJzdChjYWNoZWRNb2RlbCkpOwogICAgICB9KSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQmxvY2tTZXJ2aWNlOwp9KCk7"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/BlockService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,qBAAT,QAAsC,+CAAtC;AAEA,SAAS,cAAT,QAA+B,yCAA/B;AACA,SAAqB,EAArB,QAA+B,MAA/B;AACA,SAAS,OAAT,EAAkB,GAAlB,EAAuB,GAAvB,QAAkC,gBAAlC;AACA,OAAO,KAAK,CAAZ,MAAmB,QAAnB;AACA,SAAS,iBAAT,QAAkC,gCAAlC;AAEA,WAAa,YAAb;AAAA,0BAAA;AAAA;;AACI;;AAEG;AACc,SAAA,qBAAA,GAAwB,qBAAqB,CAAC,QAA9C;AAkCpB;;AAtCD;AAAA;AAAA,uCAM8B,cAN9B,EAMoD;AAC5C,aAAO,KAAK,qBAAL,CAA2B,GAA3B,CAA+B,cAA/B,KAAkD,EAAzD;AACH;AARL;AAAA;AAAA,iCAWQ,iBAXR,EAYQ,MAZR,EAaQ,mBAbR,EAa6C;AAAA;;AAErC,aAAO,iBAAiB,CAAC,iBAAlB,GAAsC,IAAtC,CACH,OAAO,CAAC,UAAC,cAAD,EAAmB;AACvB,YAAM,eAAe,GAAG,KAAI,CAAC,kBAAL,CAAwB,cAAxB,CAAxB;;AACA,YAAM,WAAW,GAAG,eAAe,CAAC,IAAhB,CAAqB,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,MAAF,KAAa,MAAM,CAAC,QAAP,EAApB;AAAA,SAArB,CAApB;AACA,YAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAApB,CAAyB,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,MAAF,KAAa,MAAM,CAAC,QAAP,EAApB;AAAA,SAAzB,CAA3B,CAHuB,CAIvB;;AACA,YAAI,WAAW,IAAI,kBAAf,IAAqC,WAAW,CAAC,cAAZ,KAA+B,kBAAkB,CAAC,cAA3F,EAA2G;AACvG,iBAAO,EAAE,CAAC,WAAD,CAAT;AACH;;AACD,eAAO,iBAAiB,CACnB,qBADE,GAEF,gBAFE,CAEe,MAFf,EAGF,IAHE,CAIC,GAAG,CAAC,UAAC,GAAD;AAAA,iBAAS,IAAI,cAAJ,CAAmB,GAAnB,CAAT;AAAA,SAAD,CAJJ,EAKC,GAAG,CAAC,UAAC,KAAD,EAAU;AACV,cAAM,eAAe,GAAG,CAAC,CAAC,MAAF,EAAU,KAAV,4BAAoB,KAAI,CAAC,kBAAL,CAAwB,cAAxB,CAApB,IAA8D,QAA9D,CAAxB;;AACA,UAAA,KAAI,CAAC,qBAAL,CAA2B,GAA3B,CAA+B,cAA/B,EAA+C,eAA/C;AACH,SAHE,CALJ,EASC,iBAAiB,CAAC,YAAlB,CAA+B,WAA/B,CATD,CAAP;AAWH,OAnBM,CADJ,CAAP;AAsBH;AArCL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport { BlockInfoModelStorage } from '@/core/database/storage/BlockInfoModelStorage';\nimport { RepositoryFactory, UInt64 } from 'symbol-sdk';\nimport { BlockInfoModel } from '@/core/database/entities/BlockInfoModel';\nimport { Observable, of } from 'rxjs';\nimport { flatMap, map, tap } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport { ObservableHelpers } from '@/core/utils/ObservableHelpers';\n\nexport class BlockService {\n    /**\n     * The namespace information local cache.\n     */\n    private readonly blockInfoModelStorage = BlockInfoModelStorage.INSTANCE;\n\n    public getKnownBlockInfos(generationHash: string): BlockInfoModel[] {\n        return this.blockInfoModelStorage.get(generationHash) || [];\n    }\n\n    public getBlockInfo(\n        repositoryFactory: RepositoryFactory,\n        height: UInt64,\n        alreadyLoadedBlocks: BlockInfoModel[],\n    ): Observable<BlockInfoModel> {\n        return repositoryFactory.getGenerationHash().pipe(\n            flatMap((generationHash) => {\n                const blockInfoModels = this.getKnownBlockInfos(generationHash);\n                const cachedModel = blockInfoModels.find((m) => m.height === height.toString());\n                const alreadyLoadedBlock = alreadyLoadedBlocks.find((m) => m.height === height.toString());\n                //Only load from rest the first time in the app session (but using the stored cache for quick user feedback).\n                if (cachedModel && alreadyLoadedBlock && cachedModel.generationHash === alreadyLoadedBlock.generationHash) {\n                    return of(cachedModel);\n                }\n                return repositoryFactory\n                    .createBlockRepository()\n                    .getBlockByHeight(height)\n                    .pipe(\n                        map((dto) => new BlockInfoModel(dto)),\n                        tap((model) => {\n                            const blockInfoModels = _.uniqBy([model, ...this.getKnownBlockInfos(generationHash)], 'height');\n                            this.blockInfoModelStorage.set(generationHash, blockInfoModels);\n                        }),\n                        ObservableHelpers.defaultFirst(cachedModel),\n                    );\n            }),\n        );\n    }\n}\n"],"sourceRoot":""}]}
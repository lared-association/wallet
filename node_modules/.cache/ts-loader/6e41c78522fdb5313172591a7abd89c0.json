{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalTransactionCosignature/ModalTransactionCosignatureTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalTransactionCosignature/ModalTransactionCosignatureTs.ts","mtime":1611927205499},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalTransactionCosignature/ModalTransactionCosignatureTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator';\nimport {\n    Account,\n    AggregateTransaction,\n    AggregateTransactionCosignature,\n    CosignatureTransaction,\n    MultisigAccountInfo,\n    NetworkType,\n    TransactionStatus,\n} from 'symbol-sdk';\nimport { mapGetters } from 'vuex';\n\nimport { AccountModel, AccountType } from '@/core/database/entities/AccountModel';\nimport { AccountTransactionSigner, TransactionAnnouncerService, TransactionSigner } from '@/services/TransactionAnnouncerService';\n// child components\n// @ts-ignore\nimport TransactionDetails from '@/components/TransactionDetails/TransactionDetails.vue';\n// @ts-ignore\nimport FormProfileUnlock from '@/views/forms/FormProfileUnlock/FormProfileUnlock.vue';\n// @ts-ignore\nimport HardwareConfirmationButton from '@/components/HardwareConfirmationButton/HardwareConfirmationButton.vue';\nimport { CosignatureQR } from 'symbol-qr-library';\n// @ts-ignore\nimport QRCodeDisplay from '@/components/QRCode/QRCodeDisplay/QRCodeDisplay.vue';\n\n@Component({\n    components: {\n        TransactionDetails,\n        FormProfileUnlock,\n        HardwareConfirmationButton,\n        QRCodeDisplay,\n    },\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n            networkType: 'network/networkType',\n            generationHash: 'network/generationHash',\n            currentAccountMultisigInfo: 'account/currentAccountMultisigInfo',\n        }),\n    },\n})\nexport class ModalTransactionCosignatureTs extends Vue {\n    @Prop({\n        default: false,\n    })\n    visible: boolean;\n\n    @Prop({\n        default: null,\n    })\n    transactionHash: string;\n\n    /**\n     * Aggregate transaction fetched by transactionHash\n     */\n    transaction: AggregateTransaction = null;\n\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Network type\n     * @see {Store.Network}\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Current generationHash\n     * @see {Store.Network}\n     * @var {string}\n     */\n    public generationHash: string;\n\n    /**\n     * Current account multisig info\n     * @type {MultisigAccountInfo}\n     */\n    public currentAccountMultisigInfo: MultisigAccountInfo;\n\n    /**\n     * Whether transaction has expired\n     */\n    public expired: boolean = false;\n\n    /// region computed properties\n    /**\n     * Visibility state\n     * @type {boolean}\n     */\n    public get show(): boolean {\n        return this.visible;\n    }\n\n    /**\n     * Emits close event\n     */\n    public set show(val) {\n        if (!val) {\n            this.$emit('close');\n        }\n    }\n\n    /**\n     * Returns whether current account is a hardware wallet\n     * @return {boolean}\n     */\n    public get isUsingHardwareWallet(): boolean {\n        // XXX should use \"stagedTransaction.signer\" to identify account\n        return AccountType.TREZOR === this.currentAccount.type;\n    }\n\n    public get needsCosignature(): boolean {\n        // Multisig account can not sign\n        if (this.currentAccountMultisigInfo && this.currentAccountMultisigInfo.isMultisig()) {\n            return false;\n        }\n        const currentPubAccount = AccountModel.getObjects(this.currentAccount).publicAccount;\n        return !this.transaction.signedByAccount(currentPubAccount);\n    }\n\n    public get cosignatures(): AggregateTransactionCosignature[] {\n        return this.transaction?.cosignatures;\n    }\n\n    public get hasMissSignatures(): boolean {\n        //merkleComponentHash ==='000000000000...' present that the transaction is still lack of signature\n        return (\n            this.transaction?.transactionInfo != null &&\n            this.transaction?.transactionInfo.merkleComponentHash !== undefined &&\n            this.transaction?.transactionInfo.merkleComponentHash.startsWith('000000000000')\n        );\n    }\n\n    public get cosignatureQrCode(): CosignatureQR {\n        // @ts-ignore\n        return new CosignatureQR(this.transaction, this.networkType, this.generationHash);\n    }\n\n    @Watch('transactionHash', { immediate: true })\n    public async fetchTransaction() {\n        try {\n            // first get the last status\n            const transactionStatus: TransactionStatus = (await this.$store.dispatch('transaction/FETCH_TRANSACTION_STATUS', {\n                transactionHash: this.transactionHash,\n            })) as TransactionStatus;\n\n            if (transactionStatus.group != 'failed') {\n                // fetch the transaction by using the status\n                this.transaction = (await this.$store.dispatch('transaction/LOAD_TRANSACTION_DETAILS', {\n                    group: transactionStatus.group,\n                    transactionHash: this.transactionHash,\n                })) as AggregateTransaction;\n            } else {\n                this.expired = true;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    /**\n     * Hook called when child component FormProfileUnlock emits\n     * the 'success' event.\n     *\n     * This hook shall *sign transactions* with the \\a account\n     * that has been unlocked. Subsequently it will also announce\n     * the signed transaction.\n     *\n     * @param {Password} password\n     * @return {void}\n     */\n    public onAccountUnlocked({ account }: { account: Account }) {\n        // - log about unlock success\n        this.$store.dispatch('diagnostic/ADD_INFO', 'Account ' + account.address.plain() + ' unlocked successfully.');\n        return this.onSigner(new AccountTransactionSigner(account));\n    }\n\n    public async onSigner(transactionSigner: TransactionSigner) {\n        // - sign cosignature transaction\n        const cosignature = CosignatureTransaction.create(this.transaction);\n        const signCosignatureTransaction = await transactionSigner.signCosignatureTransaction(cosignature).toPromise();\n        const res = await new TransactionAnnouncerService(this.$store)\n            .announceAggregateBondedCosignature(signCosignatureTransaction)\n            .toPromise();\n        if (res.success) {\n            this.$emit('success');\n            this.show = false;\n        } else {\n            this.$store.dispatch('notification/ADD_ERROR', res.error, { root: true });\n        }\n    }\n\n    /**\n     * Hook called when child component FormProfileUnlock or\n     * HardwareConfirmationButton emit the 'error' event.\n     * @param {string} message\n     * @return {void}\n     */\n    public onError(error: string) {\n        this.$emit('error', error);\n    }\n}\n"],"sourceRoot":""}]}
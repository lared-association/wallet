{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AccountService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AccountService.ts","mtime":1611927204150},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKLyoKICogQ29weXJpZ2h0IDIwMjAgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwppbXBvcnQgeyBBY2NvdW50LCBTaW1wbGVXYWxsZXQsIENyeXB0byB9IGZyb20gJ3N5bWJvbC1zZGsnOwppbXBvcnQgeyBFeHRlbmRlZEtleSwgV2FsbGV0IH0gZnJvbSAnc3ltYm9sLWhkLXdhbGxldHMnOyAvLyBpbnRlcm5hbCBkZXBlbmRlbmNpZXMKCmltcG9ydCB7IERlcml2YXRpb25QYXRoTGV2ZWxzLCBEZXJpdmF0aW9uU2VydmljZSB9IGZyb20gJy4vRGVyaXZhdGlvblNlcnZpY2UnOwppbXBvcnQgeyBEZXJpdmF0aW9uUGF0aFZhbGlkYXRvciB9IGZyb20gJ0AvY29yZS92YWxpZGF0aW9uL3ZhbGlkYXRvcnMnOwppbXBvcnQgeyBBY2NvdW50TW9kZWwsIEFjY291bnRUeXBlIH0gZnJvbSAnQC9jb3JlL2RhdGFiYXNlL2VudGl0aWVzL0FjY291bnRNb2RlbCc7CmltcG9ydCB7IFNpbXBsZU9iamVjdFN0b3JhZ2UgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2UvYmFja2VuZHMvU2ltcGxlT2JqZWN0U3RvcmFnZSc7CmltcG9ydCB7IEFjY291bnRNb2RlbFN0b3JhZ2UgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2Uvc3RvcmFnZS9BY2NvdW50TW9kZWxTdG9yYWdlJzsKZXhwb3J0IHZhciBBY2NvdW50U2VydmljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQWNjb3VudFNlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3VudFNlcnZpY2UpOwoKICAgIHRoaXMuc3RvcmFnZSA9IEFjY291bnRNb2RlbFN0b3JhZ2UuSU5TVEFOQ0U7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQWNjb3VudFNlcnZpY2UsIFt7CiAgICBrZXk6ICJnZXRBY2NvdW50cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWNjb3VudHMoKSB7CiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZ2V0QWNjb3VudHNCeUlkKCkpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEFjY291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFjY291bnQoaWQpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0QWNjb3VudHNCeUlkKClbaWRdOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEFjY291bnRzQnlJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWNjb3VudHNCeUlkKCkgewogICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldCgpIHx8IHt9OwogICAgfQogIH0sIHsKICAgIGtleTogInNhdmVBY2NvdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlQWNjb3VudChhY2NvdW50KSB7CiAgICAgIHZhciBhY2NvdW50cyA9IHRoaXMuZ2V0QWNjb3VudHNCeUlkKCk7CiAgICAgIGFjY291bnRzW2FjY291bnQuaWRdID0gYWNjb3VudDsKICAgICAgdGhpcy5zdG9yYWdlLnNldChhY2NvdW50cyk7CiAgICAgIHJldHVybiBhY2NvdW50OwogICAgfQogIH0sIHsKICAgIGtleTogImRlbGV0ZUFjY291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUFjY291bnQoYWNjb3VudCkgewogICAgICB2YXIgYWNjb3VudHMgPSB0aGlzLmdldEFjY291bnRzQnlJZCgpOwogICAgICBkZWxldGUgYWNjb3VudHNbYWNjb3VudC5pZF07CiAgICAgIHRoaXMuc3RvcmFnZS5zZXQoYWNjb3VudHMpOwogICAgfQogIH0sIHsKICAgIGtleTogInVwZGF0ZU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU5hbWUoYWNjb3VudCwgbmFtZSkgewogICAgICByZXR1cm4gdGhpcy5zYXZlQWNjb3VudChPYmplY3QuYXNzaWduKGFjY291bnQsIHsKICAgICAgICBuYW1lOiBuYW1lCiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVJc011bHRpc2lnIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJc011bHRpc2lnKGFjY291bnQsIGlzTXVsdGlzaWcpIHsKICAgICAgcmV0dXJuIHRoaXMuc2F2ZUFjY291bnQoT2JqZWN0LmFzc2lnbihhY2NvdW50LCB7CiAgICAgICAgaXNNdWx0aXNpZzogaXNNdWx0aXNpZwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidXBkYXRlUmVtb3RlQWNjb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUmVtb3RlQWNjb3VudChhY2NvdW50LCBlbmNSZW1vdGVBY2NvdW50UHJpdmF0ZUtleSkgewogICAgICByZXR1cm4gdGhpcy5zYXZlQWNjb3VudChPYmplY3QuYXNzaWduKGFjY291bnQsIHsKICAgICAgICBlbmNSZW1vdGVBY2NvdW50UHJpdmF0ZUtleTogZW5jUmVtb3RlQWNjb3VudFByaXZhdGVLZXkKICAgICAgfSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInVwZGF0ZVNpZ25lZFBlcnNpc3RlbnREZWxSZXFUeHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNpZ25lZFBlcnNpc3RlbnREZWxSZXFUeHMoYWNjb3VudCwgc2lnbmVkUGVyc2lzdGVudERlbFJlcVR4cykgewogICAgICByZXR1cm4gdGhpcy5zYXZlQWNjb3VudChPYmplY3QuYXNzaWduKGFjY291bnQsIHsKICAgICAgICBzaWduZWRQZXJzaXN0ZW50RGVsUmVxVHhzOiBzaWduZWRQZXJzaXN0ZW50RGVsUmVxVHhzCiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVJc1BlcnNpc3RlbnREZWxSZXFTZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJc1BlcnNpc3RlbnREZWxSZXFTZW50KGFjY291bnQsIGlzUGVyc2lzdGVudERlbFJlcVNlbnQpIHsKICAgICAgcmV0dXJuIHRoaXMuc2F2ZUFjY291bnQoT2JqZWN0LmFzc2lnbihhY2NvdW50LCB7CiAgICAgICAgaXNQZXJzaXN0ZW50RGVsUmVxU2VudDogaXNQZXJzaXN0ZW50RGVsUmVxU2VudAogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidXBkYXRlU2VsZWN0ZWRIYXJ2ZXN0aW5nTm9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWRIYXJ2ZXN0aW5nTm9kZShhY2NvdW50LCBzZWxlY3RlZEhhcnZlc3RpbmdOb2RlKSB7CiAgICAgIHJldHVybiB0aGlzLnNhdmVBY2NvdW50KE9iamVjdC5hc3NpZ24oYWNjb3VudCwgewogICAgICAgIHNlbGVjdGVkSGFydmVzdGluZ05vZGU6IHNlbGVjdGVkSGFydmVzdGluZ05vZGUKICAgICAgfSkpOwogICAgfQogICAgLyoqCiAgICAgKiBEZXJpdmUgXGEgcGF0aCB1c2luZyBcYSBtbmVtb25pYyBwYXNzIHBocmFzZQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEFjY291bnRCeVBhdGgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFjY291bnRCeVBhdGgobW5lbW9uaWMsIG5ldHdvcmtUeXBlKSB7CiAgICAgIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBBY2NvdW50U2VydmljZS5ERUZBVUxUX0FDQ09VTlRfUEFUSDsKCiAgICAgIGlmIChmYWxzZSA9PT0gRGVyaXZhdGlvblBhdGhWYWxpZGF0b3IudmFsaWRhdGUocGF0aCkpIHsKICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ0ludmFsaWQgZGVyaXZhdGlvbiBwYXRoOiAnICsgcGF0aDsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7CiAgICAgIH0gLy8gY3JlYXRlIGhkIGV4dGVuZGVkIGtleQoKCiAgICAgIHZhciBleHRlbmRlZEtleSA9IEV4dGVuZGVkS2V5LmNyZWF0ZUZyb21TZWVkKG1uZW1vbmljLnRvU2VlZCgpLnRvU3RyaW5nKCdoZXgnKSk7IC8vIGNyZWF0ZSBhY2NvdW50CgogICAgICB2YXIgYWNjb3VudCA9IG5ldyBXYWxsZXQoZXh0ZW5kZWRLZXkpOwogICAgICByZXR1cm4gQWNjb3VudC5jcmVhdGVGcm9tUHJpdmF0ZUtleShhY2NvdW50LmdldENoaWxkQWNjb3VudFByaXZhdGVLZXkocGF0aCksIG5ldHdvcmtUeXBlKTsKICAgIH0KICAgIC8qKgogICAgICogR2V0IGV4dGVuZGVkIGtleSBhcm91bmQgXGEgbW5lbW9uaWMgZm9yIFxhIG5ldHdvcmtUeXB3CiAgICAgKiBAcGFyYW0ge01uZW1vbmljUGFzc1BocmFzZX0gbW5lbW9uaWMKICAgICAqIEByZXR1cm4ge0V4dGVuZGVkS2V5fQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEV4dGVuZGVkS2V5RnJvbU1uZW1vbmljIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFeHRlbmRlZEtleUZyb21NbmVtb25pYyhtbmVtb25pYykgewogICAgICByZXR1cm4gRXh0ZW5kZWRLZXkuY3JlYXRlRnJvbVNlZWQobW5lbW9uaWMudG9TZWVkKCkudG9TdHJpbmcoJ2hleCcpKTsKICAgIH0KICAgIC8qKgogICAgICogR2VuZXJhdGUgXGEgY291bnQgYWNjb3VudHMgdXNpbmcgXGEgbW5lbW9uaWMKICAgICAqIEBwYXJhbSB7TW5lbW9uaWNQYXNzUGhyYXNlfSBtbmVtb25pYwogICAgICogQHBhcmFtIHtOZXR3b3JrVHlwZX0gbmV0d29ya1R5cGUKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydFBhdGgKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudAogICAgICogQHJldHVybiB7QWNjb3VudFtdfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdlbmVyYXRlQWNjb3VudHNGcm9tTW5lbW9uaWMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlQWNjb3VudHNGcm9tTW5lbW9uaWMobW5lbW9uaWMsIG5ldHdvcmtUeXBlKSB7CiAgICAgIHZhciBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTA7CiAgICAgIHZhciBkZXJpdmF0aW9uU2VydmljZSA9IG5ldyBEZXJpdmF0aW9uU2VydmljZSgpOyAvLyBjcmVhdGUgaGQgZXh0ZW5kZWQga2V5CgogICAgICB2YXIgeGtleSA9IHRoaXMuZ2V0RXh0ZW5kZWRLZXlGcm9tTW5lbW9uaWMobW5lbW9uaWMpOyAvLyBpbmNyZW1lbnQgZGVyaXZhdGlvbiBwYXRoIFxhIGNvdW50IHRpbWVzCgogICAgICB2YXIgcGF0aHMgPSBfdG9Db25zdW1hYmxlQXJyYXkoQXJyYXkoY291bnQpLmtleXMoKSkubWFwKGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgIGlmIChpbmRleCA9PSAwKSB7CiAgICAgICAgICByZXR1cm4gQWNjb3VudFNlcnZpY2UuREVGQVVMVF9BQ0NPVU5UX1BBVEg7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZGVyaXZhdGlvblNlcnZpY2UuaW5jcmVtZW50UGF0aExldmVsKEFjY291bnRTZXJ2aWNlLkRFRkFVTFRfQUNDT1VOVF9QQVRILCBEZXJpdmF0aW9uUGF0aExldmVscy5Qcm9maWxlLCBpbmRleCk7CiAgICAgIH0pOwoKICAgICAgdmFyIHdhbGxldHMgPSBwYXRocy5tYXAoZnVuY3Rpb24gKHBhdGgpIHsKICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh4a2V5LmRlcml2ZVBhdGgocGF0aCkpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHdhbGxldHMubWFwKGZ1bmN0aW9uICh3YWxsZXQpIHsKICAgICAgICByZXR1cm4gQWNjb3VudC5jcmVhdGVGcm9tUHJpdmF0ZUtleSh3YWxsZXQuZ2V0QWNjb3VudFByaXZhdGVLZXkoKSwgbmV0d29ya1R5cGUpOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogR2VuZXJhdGUgYWNjb3VudHMgdXNpbmcgYSBtbmVtb25pYyBhbmQgYW4gYXJyYXkgb2YgcGF0aHMKICAgICAqIEBwYXJhbSB7TW5lbW9uaWNQYXNzUGhyYXNlfSBtbmVtb25pYwogICAgICogQHBhcmFtIHtOZXR3b3JrVHlwZX0gbmV0d29ya1R5cGUKICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzCiAgICAgKiBAcmV0dXJucyB7QWNjb3VudFtdfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdlbmVyYXRlQWNjb3VudHNGcm9tUGF0aHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlQWNjb3VudHNGcm9tUGF0aHMobW5lbW9uaWMsIG5ldHdvcmtUeXBlLCBwYXRocykgewogICAgICAvLyBjcmVhdGUgaGQgZXh0ZW5kZWQga2V5CiAgICAgIHZhciB4a2V5ID0gdGhpcy5nZXRFeHRlbmRlZEtleUZyb21NbmVtb25pYyhtbmVtb25pYyk7CiAgICAgIHZhciB3YWxsZXRzID0gcGF0aHMubWFwKGZ1bmN0aW9uIChwYXRoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBXYWxsZXQoeGtleS5kZXJpdmVQYXRoKHBhdGgpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB3YWxsZXRzLm1hcChmdW5jdGlvbiAod2FsbGV0KSB7CiAgICAgICAgcmV0dXJuIEFjY291bnQuY3JlYXRlRnJvbVByaXZhdGVLZXkod2FsbGV0LmdldEFjY291bnRQcml2YXRlS2V5KCksIG5ldHdvcmtUeXBlKTsKICAgICAgfSk7CiAgICB9CiAgICAvKioKICAgICAqIEdldCBsaXN0IG9mIGFkZHJlc3NlcyB1c2luZyBcYSBtbmVtb25pYwogICAgICogQHJldHVybiB7QWRkcmVzc1tdfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEFkZHJlc3Nlc0Zyb21NbmVtb25pYyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWRkcmVzc2VzRnJvbU1uZW1vbmljKG1uZW1vbmljLCBuZXR3b3JrVHlwZSkgewogICAgICB2YXIgY291bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDEwOwogICAgICB2YXIgYWNjb3VudHMgPSB0aGlzLmdlbmVyYXRlQWNjb3VudHNGcm9tTW5lbW9uaWMobW5lbW9uaWMsIG5ldHdvcmtUeXBlLCBjb3VudCk7CiAgICAgIHJldHVybiBhY2NvdW50cy5tYXAoZnVuY3Rpb24gKGFjY3QpIHsKICAgICAgICByZXR1cm4gYWNjdC5hZGRyZXNzOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRLbm93bkFjY291bnRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRLbm93bkFjY291bnRzKGtub3duQWNjb3VudHMpIHsKICAgICAgLy8gc2VhcmNoIGluIGtub3duIGFjY291bnRzCiAgICAgIHJldHVybiB0aGlzLmdldEFjY291bnRzKCkuZmlsdGVyKGZ1bmN0aW9uICh3bHQpIHsKICAgICAgICByZXR1cm4ga25vd25BY2NvdW50cy5pbmNsdWRlcyh3bHQuaWQpOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlIGEgYWNjb3VudCBpbnN0YW5jZSBmcm9tIG1uZW1vbmljCiAgICAgKiBAcmV0dXJuIHtBY2NvdW50TW9kZWx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RGVmYXVsdEFjY291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRBY2NvdW50KGN1cnJlbnRQcm9maWxlLCBtbmVtb25pYywgcGFzc3dvcmQsIG5ldHdvcmtUeXBlKSB7CiAgICAgIHZhciBhY2NvdW50ID0gdGhpcy5nZXRBY2NvdW50QnlQYXRoKG1uZW1vbmljLCBuZXR3b3JrVHlwZSwgQWNjb3VudFNlcnZpY2UuREVGQVVMVF9BQ0NPVU5UX1BBVEgpOwogICAgICB2YXIgc2ltcGxlV2FsbGV0ID0gU2ltcGxlV2FsbGV0LmNyZWF0ZUZyb21Qcml2YXRlS2V5KCdTZWVkIEFjY291bnQgMScsIHBhc3N3b3JkLCBhY2NvdW50LnByaXZhdGVLZXksIG5ldHdvcmtUeXBlKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBpZDogU2ltcGxlT2JqZWN0U3RvcmFnZS5nZW5lcmF0ZUlkZW50aWZpZXIoKSwKICAgICAgICBwcm9maWxlTmFtZTogY3VycmVudFByb2ZpbGUucHJvZmlsZU5hbWUsCiAgICAgICAgbmFtZTogc2ltcGxlV2FsbGV0Lm5hbWUsCiAgICAgICAgbm9kZTogJycsCiAgICAgICAgdHlwZTogQWNjb3VudFR5cGUuU0VFRCwKICAgICAgICBhZGRyZXNzOiBzaW1wbGVXYWxsZXQuYWRkcmVzcy5wbGFpbigpLAogICAgICAgIHB1YmxpY0tleTogYWNjb3VudC5wdWJsaWNLZXksCiAgICAgICAgZW5jcnlwdGVkUHJpdmF0ZUtleTogc2ltcGxlV2FsbGV0LmVuY3J5cHRlZFByaXZhdGVLZXksCiAgICAgICAgcGF0aDogQWNjb3VudFNlcnZpY2UuREVGQVVMVF9BQ0NPVU5UX1BBVEgsCiAgICAgICAgaXNNdWx0aXNpZzogZmFsc2UKICAgICAgfTsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlIGEgY2hpbGQgYWNjb3VudCBpbnN0YW5jZSBmcm9tIG1uZW1vbmljIGFuZCBwYXRoCiAgICAgKiBAcmV0dXJuIHtBY2NvdW50TW9kZWx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Q2hpbGRBY2NvdW50QnlQYXRoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZEFjY291bnRCeVBhdGgoY3VycmVudFByb2ZpbGUsIHBhc3N3b3JkLCBtbmVtb25pYywgbmV4dFBhdGgsIG5ldHdvcmtUeXBlLCBjaGlsZEFjY291bnROYW1lKSB7CiAgICAgIC8vIC0gZGVyaXZlIGFjY291bnQKICAgICAgdmFyIGFjY291bnQgPSB0aGlzLmdldEFjY291bnRCeVBhdGgobW5lbW9uaWMsIG5ldHdvcmtUeXBlLCBuZXh0UGF0aCk7CiAgICAgIHZhciBzaW1wbGVXYWxsZXQgPSBTaW1wbGVXYWxsZXQuY3JlYXRlRnJvbVByaXZhdGVLZXkoY2hpbGRBY2NvdW50TmFtZSwgcGFzc3dvcmQsIGFjY291bnQucHJpdmF0ZUtleSwgbmV0d29ya1R5cGUpOwogICAgICByZXR1cm4gewogICAgICAgIGlkOiBTaW1wbGVPYmplY3RTdG9yYWdlLmdlbmVyYXRlSWRlbnRpZmllcigpLAogICAgICAgIHByb2ZpbGVOYW1lOiBjdXJyZW50UHJvZmlsZS5wcm9maWxlTmFtZSwKICAgICAgICBuYW1lOiBjaGlsZEFjY291bnROYW1lLAogICAgICAgIG5vZGU6ICcnLAogICAgICAgIHR5cGU6IEFjY291bnRUeXBlLlNFRUQsCiAgICAgICAgYWRkcmVzczogc2ltcGxlV2FsbGV0LmFkZHJlc3MucGxhaW4oKSwKICAgICAgICBwdWJsaWNLZXk6IGFjY291bnQucHVibGljS2V5LAogICAgICAgIGVuY3J5cHRlZFByaXZhdGVLZXk6IHNpbXBsZVdhbGxldC5lbmNyeXB0ZWRQcml2YXRlS2V5LAogICAgICAgIHBhdGg6IG5leHRQYXRoLAogICAgICAgIGlzTXVsdGlzaWc6IGZhbHNlCiAgICAgIH07CiAgICB9CiAgICAvKioKICAgICAqIENyZWF0ZSBhIHN1YiBhY2NvdW50IGJ5IHByaXZhdGUga2V5CiAgICAgKiBAcGFyYW0gY3VycmVudFByb2ZpbGUKICAgICAqIEBwYXJhbSBwYXNzd29yZAogICAgICogQHBhcmFtIGNoaWxkQWNjb3VudE5hbWUKICAgICAqIEBwYXJhbSBwcml2YXRlS2V5CiAgICAgKiBAcGFyYW0gbmV0d29ya1R5cGUKICAgICAqIEByZXR1cm4ge0FjY291bnRNb2RlbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRTdWJBY2NvdW50QnlQcml2YXRlS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdWJBY2NvdW50QnlQcml2YXRlS2V5KGN1cnJlbnRQcm9maWxlLCBwYXNzd29yZCwgY2hpbGRBY2NvdW50TmFtZSwgcHJpdmF0ZUtleSwgbmV0d29ya1R5cGUpIHsKICAgICAgdmFyIGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZUZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXksIG5ldHdvcmtUeXBlKTsKICAgICAgdmFyIHNpbXBsZVdhbGxldCA9IFNpbXBsZVdhbGxldC5jcmVhdGVGcm9tUHJpdmF0ZUtleShjaGlsZEFjY291bnROYW1lLCBwYXNzd29yZCwgYWNjb3VudC5wcml2YXRlS2V5LCBuZXR3b3JrVHlwZSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgaWQ6IFNpbXBsZU9iamVjdFN0b3JhZ2UuZ2VuZXJhdGVJZGVudGlmaWVyKCksCiAgICAgICAgcHJvZmlsZU5hbWU6IGN1cnJlbnRQcm9maWxlLnByb2ZpbGVOYW1lLAogICAgICAgIG5hbWU6IGNoaWxkQWNjb3VudE5hbWUsCiAgICAgICAgbm9kZTogJycsCiAgICAgICAgdHlwZTogQWNjb3VudFR5cGUuUFJJVkFURV9LRVksCiAgICAgICAgYWRkcmVzczogc2ltcGxlV2FsbGV0LmFkZHJlc3MucGxhaW4oKSwKICAgICAgICBwdWJsaWNLZXk6IGFjY291bnQucHVibGljS2V5LAogICAgICAgIGVuY3J5cHRlZFByaXZhdGVLZXk6IHNpbXBsZVdhbGxldC5lbmNyeXB0ZWRQcml2YXRlS2V5LAogICAgICAgIHBhdGg6ICcnLAogICAgICAgIGlzTXVsdGlzaWc6IGZhbHNlCiAgICAgIH07CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgYSBBY2NvdW50TW9kZWwgd2l0aCBhbiB1cGRhdGVkIFNpbXBsZVdhbGxldAogICAgICogQHBhcmFtIHtBY2NvdW50TW9kZWx9IGFjY291bnQKICAgICAqIEBwYXJhbSB7UGFzc3dvcmR9IG9sZFBhc3N3b3JkCiAgICAgKiBAcGFyYW0ge1Bhc3N3b3JkfSBuZXdQYXNzd29yZAogICAgICovCgogIH0sIHsKICAgIGtleTogInVwZGF0ZVdhbGxldFBhc3N3b3JkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVXYWxsZXRQYXNzd29yZChhY2NvdW50LCBvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQpIHsKICAgICAgLy8gUGFzc3dvcmQgbW9kaWZpY2F0aW9uIGlzIG5vdCBhbGxvd2VkIGZvciBoYXJkd2FyZSB3YWxsZXRzCiAgICAgIGlmIChhY2NvdW50LnR5cGUgIT09IEFjY291bnRUeXBlLlNFRUQgJiYgYWNjb3VudC50eXBlICE9PSBBY2NvdW50VHlwZS5QUklWQVRFX0tFWSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignSGFyZHdhcmUgYWNjb3VudCBwYXNzd29yZCBjYW5ub3QgYmUgY2hhbmdlZCcpOwogICAgICB9CgogICAgICB2YXIgcHJpdmF0ZUtleSA9IENyeXB0by5kZWNyeXB0KGFjY291bnQuZW5jcnlwdGVkUHJpdmF0ZUtleSwgb2xkUGFzc3dvcmQudmFsdWUpOyAvLyBFbmNyeXB0IHRoZSBwcml2YXRlIGtleSB3aXRoIHRoZSBuZXcgcGFzc3dvcmQKCiAgICAgIHZhciBuZXdTaW1wbGVXYWxsZXQgPSBTaW1wbGVXYWxsZXQuY3JlYXRlRnJvbVByaXZhdGVLZXkoYWNjb3VudC5uYW1lLCBuZXdQYXNzd29yZCwgcHJpdmF0ZUtleSwgQWNjb3VudE1vZGVsLmdldE9iamVjdHMoYWNjb3VudCkuYWRkcmVzcy5uZXR3b3JrVHlwZSk7IC8vIFVwZGF0ZSB0aGUgYWNjb3VudCBtb2RlbAoKICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWNjb3VudCksIHsKICAgICAgICBlbmNyeXB0ZWRQcml2YXRlS2V5OiBuZXdTaW1wbGVXYWxsZXQuZW5jcnlwdGVkUHJpdmF0ZUtleQogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBBY2NvdW50U2VydmljZTsKfSgpOwovKioKICogRGVmYXVsdCBhY2NvdW50IGRlcml2YXRpb24gcGF0aAogKiBAdmFyIHtzdHJpbmd9CiAqLwoKQWNjb3VudFNlcnZpY2UuREVGQVVMVF9BQ0NPVU5UX1BBVEggPSAibS80NCcvNDM0MycvMCcvMCcvMCciOw=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AccountService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Account, Address, NetworkType, Password, SimpleWallet, Crypto } from 'symbol-sdk';\nimport { ExtendedKey, MnemonicPassPhrase, Wallet } from 'symbol-hd-wallets';\n// internal dependencies\nimport { DerivationPathLevels, DerivationService } from './DerivationService';\nimport { DerivationPathValidator } from '@/core/validation/validators';\nimport { AccountModel, AccountType } from '@/core/database/entities/AccountModel';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { SimpleObjectStorage } from '@/core/database/backends/SimpleObjectStorage';\nimport { AccountModelStorage } from '@/core/database/storage/AccountModelStorage';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\n\nexport class AccountService {\n    private readonly storage = AccountModelStorage.INSTANCE;\n\n    /**\n     * Default account derivation path\n     * @var {string}\n     */\n    public static readonly DEFAULT_ACCOUNT_PATH = `m/44'/4343'/0'/0'/0'`;\n\n    public getAccounts(): AccountModel[] {\n        return Object.values(this.getAccountsById());\n    }\n\n    public getAccount(id: string): AccountModel | undefined {\n        return this.getAccountsById()[id];\n    }\n\n    public getAccountsById(): Record<string, AccountModel> {\n        return this.storage.get() || {};\n    }\n\n    public saveAccount(account: AccountModel): AccountModel {\n        const accounts = this.getAccountsById();\n        accounts[account.id] = account;\n        this.storage.set(accounts);\n        return account;\n    }\n\n    public deleteAccount(account: AccountModel) {\n        const accounts = this.getAccountsById();\n        delete accounts[account.id];\n        this.storage.set(accounts);\n    }\n\n    public updateName(account: AccountModel, name: string): AccountModel {\n        return this.saveAccount(Object.assign(account, { name }));\n    }\n\n    public updateIsMultisig(account: AccountModel, isMultisig: boolean): AccountModel {\n        return this.saveAccount(Object.assign(account, { isMultisig }));\n    }\n\n    public updateRemoteAccount(account: AccountModel, encRemoteAccountPrivateKey: string): AccountModel {\n        return this.saveAccount(Object.assign(account, { encRemoteAccountPrivateKey }));\n    }\n\n    public updateSignedPersistentDelReqTxs(account: AccountModel, signedPersistentDelReqTxs): AccountModel {\n        return this.saveAccount(Object.assign(account, { signedPersistentDelReqTxs }));\n    }\n\n    public updateIsPersistentDelReqSent(account: AccountModel, isPersistentDelReqSent: boolean): AccountModel {\n        return this.saveAccount(Object.assign(account, { isPersistentDelReqSent }));\n    }\n\n    public updateSelectedHarvestingNode(account: AccountModel, selectedHarvestingNode: NodeModel): AccountModel {\n        return this.saveAccount(Object.assign(account, { selectedHarvestingNode }));\n    }\n\n    /**\n     * Derive \\a path using \\a mnemonic pass phrase\n     */\n    public getAccountByPath(\n        mnemonic: MnemonicPassPhrase,\n        networkType: NetworkType,\n        path: string = AccountService.DEFAULT_ACCOUNT_PATH,\n    ): Account {\n        if (false === DerivationPathValidator.validate(path)) {\n            const errorMessage = 'Invalid derivation path: ' + path;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n\n        // create hd extended key\n        const extendedKey = ExtendedKey.createFromSeed(mnemonic.toSeed().toString('hex'));\n\n        // create account\n        const account = new Wallet(extendedKey);\n        return Account.createFromPrivateKey(account.getChildAccountPrivateKey(path), networkType);\n    }\n\n    /**\n     * Get extended key around \\a mnemonic for \\a networkTypw\n     * @param {MnemonicPassPhrase} mnemonic\n     * @return {ExtendedKey}\n     */\n    public getExtendedKeyFromMnemonic(mnemonic: MnemonicPassPhrase): ExtendedKey {\n        return ExtendedKey.createFromSeed(mnemonic.toSeed().toString('hex'));\n    }\n\n    /**\n     * Generate \\a count accounts using \\a mnemonic\n     * @param {MnemonicPassPhrase} mnemonic\n     * @param {NetworkType} networkType\n     * @param {string} startPath\n     * @param {number} count\n     * @return {Account[]}\n     */\n    public generateAccountsFromMnemonic(mnemonic: MnemonicPassPhrase, networkType: NetworkType, count: number = 10): Account[] {\n        const derivationService = new DerivationService();\n\n        // create hd extended key\n        const xkey = this.getExtendedKeyFromMnemonic(mnemonic);\n\n        // increment derivation path \\a count times\n        const paths = [...Array(count).keys()].map((index) => {\n            if (index == 0) {\n                return AccountService.DEFAULT_ACCOUNT_PATH;\n            }\n\n            return derivationService.incrementPathLevel(AccountService.DEFAULT_ACCOUNT_PATH, DerivationPathLevels.Profile, index);\n        });\n\n        const wallets = paths.map((path) => new Wallet(xkey.derivePath(path)));\n        return wallets.map((wallet) => Account.createFromPrivateKey(wallet.getAccountPrivateKey(), networkType));\n    }\n\n    /**\n     * Generate accounts using a mnemonic and an array of paths\n     * @param {MnemonicPassPhrase} mnemonic\n     * @param {NetworkType} networkType\n     * @param {string[]} paths\n     * @returns {Account[]}\n     */\n    public generateAccountsFromPaths(mnemonic: MnemonicPassPhrase, networkType: NetworkType, paths: string[]): Account[] {\n        // create hd extended key\n        const xkey = this.getExtendedKeyFromMnemonic(mnemonic);\n        const wallets = paths.map((path) => new Wallet(xkey.derivePath(path)));\n\n        return wallets.map((wallet) => Account.createFromPrivateKey(wallet.getAccountPrivateKey(), networkType));\n    }\n\n    /**\n     * Get list of addresses using \\a mnemonic\n     * @return {Address[]}\n     */\n    public getAddressesFromMnemonic(mnemonic: MnemonicPassPhrase, networkType: NetworkType, count: number = 10): Address[] {\n        const accounts = this.generateAccountsFromMnemonic(mnemonic, networkType, count);\n        return accounts.map((acct) => acct.address);\n    }\n\n    public getKnownAccounts(knownAccounts: string[]): AccountModel[] {\n        // search in known accounts\n        return this.getAccounts().filter((wlt) => knownAccounts.includes(wlt.id));\n    }\n\n    /**\n     * Create a account instance from mnemonic\n     * @return {AccountModel}\n     */\n    public getDefaultAccount(\n        currentProfile: ProfileModel,\n        mnemonic: MnemonicPassPhrase,\n        password: Password,\n        networkType: NetworkType,\n    ): AccountModel {\n        const account = this.getAccountByPath(mnemonic, networkType, AccountService.DEFAULT_ACCOUNT_PATH);\n\n        const simpleWallet = SimpleWallet.createFromPrivateKey('Seed Account 1', password, account.privateKey, networkType);\n\n        return {\n            id: SimpleObjectStorage.generateIdentifier(),\n            profileName: currentProfile.profileName,\n            name: simpleWallet.name,\n            node: '',\n            type: AccountType.SEED,\n            address: simpleWallet.address.plain(),\n            publicKey: account.publicKey,\n            encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n            path: AccountService.DEFAULT_ACCOUNT_PATH,\n            isMultisig: false,\n        };\n    }\n\n    /**\n     * Create a child account instance from mnemonic and path\n     * @return {AccountModel}\n     */\n    public getChildAccountByPath(\n        currentProfile: ProfileModel,\n        password: Password,\n        mnemonic: MnemonicPassPhrase,\n        nextPath: string,\n        networkType: NetworkType,\n        childAccountName: string,\n    ): AccountModel {\n        // - derive account\n        const account = this.getAccountByPath(mnemonic, networkType, nextPath);\n\n        const simpleWallet = SimpleWallet.createFromPrivateKey(childAccountName, password, account.privateKey, networkType);\n\n        return {\n            id: SimpleObjectStorage.generateIdentifier(),\n            profileName: currentProfile.profileName,\n            name: childAccountName,\n            node: '',\n            type: AccountType.SEED,\n            address: simpleWallet.address.plain(),\n            publicKey: account.publicKey,\n            encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n            path: nextPath,\n            isMultisig: false,\n        };\n    }\n\n    /**\n     * Create a sub account by private key\n     * @param currentProfile\n     * @param password\n     * @param childAccountName\n     * @param privateKey\n     * @param networkType\n     * @return {AccountModel}\n     */\n    public getSubAccountByPrivateKey(\n        currentProfile: ProfileModel,\n        password: Password,\n        childAccountName: string,\n        privateKey: string,\n        networkType: NetworkType,\n    ): AccountModel {\n        const account = Account.createFromPrivateKey(privateKey, networkType);\n        const simpleWallet = SimpleWallet.createFromPrivateKey(childAccountName, password, account.privateKey, networkType);\n\n        return {\n            id: SimpleObjectStorage.generateIdentifier(),\n            profileName: currentProfile.profileName,\n            name: childAccountName,\n            node: '',\n            type: AccountType.PRIVATE_KEY,\n            address: simpleWallet.address.plain(),\n            publicKey: account.publicKey,\n            encryptedPrivateKey: simpleWallet.encryptedPrivateKey,\n            path: '',\n            isMultisig: false,\n        };\n    }\n\n    /**\n     * Returns a AccountModel with an updated SimpleWallet\n     * @param {AccountModel} account\n     * @param {Password} oldPassword\n     * @param {Password} newPassword\n     */\n    public updateWalletPassword(account: AccountModel, oldPassword: Password, newPassword: Password): AccountModel {\n        // Password modification is not allowed for hardware wallets\n        if (account.type !== AccountType.SEED && account.type !== AccountType.PRIVATE_KEY) {\n            throw new Error('Hardware account password cannot be changed');\n        }\n\n        const privateKey = Crypto.decrypt(account.encryptedPrivateKey, oldPassword.value);\n\n        // Encrypt the private key with the new password\n        const newSimpleWallet = SimpleWallet.createFromPrivateKey(\n            account.name,\n            newPassword,\n            privateKey,\n            AccountModel.getObjects(account).address.networkType,\n        );\n        // Update the account model\n        return {\n            ...account,\n            encryptedPrivateKey: newSimpleWallet.encryptedPrivateKey,\n        };\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AssetTableService/NamespaceTableService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AssetTableService/NamespaceTableService.ts","mtime":1611927204188},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKLyoKICogQ29weXJpZ2h0IDIwMjAgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwovLyBleHRlcm5hbCBkZXBlbmRlbmNpZXMKaW1wb3J0IHsgQWxpYXNUeXBlIH0gZnJvbSAnc3ltYm9sLXNkayc7IC8vIGludGVybmFsIGRlcGVuZGVuY2llcwoKaW1wb3J0IHsgQXNzZXRUYWJsZVNlcnZpY2UgfSBmcm9tICcuL0Fzc2V0VGFibGVTZXJ2aWNlJzsKaW1wb3J0IHsgTmFtZXNwYWNlU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvTmFtZXNwYWNlU2VydmljZSc7CmV4cG9ydCB2YXIgTmFtZXNwYWNlVGFibGVTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQXNzZXRUYWJsZVNlcnZpY2UpIHsKICBfaW5oZXJpdHMoTmFtZXNwYWNlVGFibGVTZXJ2aWNlLCBfQXNzZXRUYWJsZVNlcnZpY2UpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE5hbWVzcGFjZVRhYmxlU2VydmljZSk7CgogIGZ1bmN0aW9uIE5hbWVzcGFjZVRhYmxlU2VydmljZShjdXJyZW50SGVpZ2h0LCBuYW1lc3BhY2VzLCBuZXR3b3JrQ29uZmlndXJhdGlvbikgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYW1lc3BhY2VUYWJsZVNlcnZpY2UpOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY3VycmVudEhlaWdodCk7CiAgICBfdGhpcy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlczsKICAgIF90aGlzLm5ldHdvcmtDb25maWd1cmF0aW9uID0gbmV0d29ya0NvbmZpZ3VyYXRpb247CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKgogICAqIFJldHVybiB0YWJsZSBmaWVsZHMgdG8gYmUgZGlzcGxheWVkIGluIGEgdGFibGUgaGVhZGVyCiAgICogQHJldHVybnMge1RhYmxlRmllbGRbXX0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhOYW1lc3BhY2VUYWJsZVNlcnZpY2UsIFt7CiAgICBrZXk6ICJnZXRUYWJsZUZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFibGVGaWVsZHMoKSB7CiAgICAgIHJldHVybiBbewogICAgICAgIG5hbWU6ICdoZXhJZCcsCiAgICAgICAgbGFiZWw6ICd0YWJsZV9oZWFkZXJfaGV4X2lkJwogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ25hbWUnLAogICAgICAgIGxhYmVsOiAndGFibGVfaGVhZGVyX25hbWUnCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAnZXhwaXJhdGlvbicsCiAgICAgICAgbGFiZWw6ICd0YWJsZV9oZWFkZXJfZXhwaXJhdGlvbicKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdleHBpcmVkJywKICAgICAgICBsYWJlbDogJ3RhYmxlX2hlYWRlcl9leHBpcmVkJwogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ2FsaWFzVHlwZScsCiAgICAgICAgbGFiZWw6ICd0YWJsZV9oZWFkZXJfYWxpYXNfdHlwZScKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdhbGlhc0lkZW50aWZpZXInLAogICAgICAgIGxhYmVsOiAndGFibGVfaGVhZGVyX2FsaWFzX2lkZW50aWZpZXInCiAgICAgIH1dOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFRhYmxlUm93cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFibGVSb3dzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBuYW1lc3BhY2VzID0gdGhpcy5uYW1lc3BhY2VzOwogICAgICByZXR1cm4gbmFtZXNwYWNlcy5tYXAoZnVuY3Rpb24gKG5hbWVzcGFjZU1vZGVsKSB7CiAgICAgICAgdmFyIF90aGlzMiRnZXRFeHBpcmF0aW9uID0gX3RoaXMyLmdldEV4cGlyYXRpb24obmFtZXNwYWNlTW9kZWwpLAogICAgICAgICAgICBleHBpcmVkID0gX3RoaXMyJGdldEV4cGlyYXRpb24uZXhwaXJlZCwKICAgICAgICAgICAgZXhwaXJhdGlvbiA9IF90aGlzMiRnZXRFeHBpcmF0aW9uLmV4cGlyYXRpb247CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICBoZXhJZDogbmFtZXNwYWNlTW9kZWwubmFtZXNwYWNlSWRIZXgsCiAgICAgICAgICBuYW1lOiBuYW1lc3BhY2VNb2RlbC5uYW1lLAogICAgICAgICAgZXhwaXJhdGlvbjogZXhwaXJhdGlvbiwKICAgICAgICAgIGV4cGlyZWQ6IGV4cGlyZWQsCiAgICAgICAgICBhbGlhc1R5cGU6IF90aGlzMi5nZXRBbGlhc1R5cGUobmFtZXNwYWNlTW9kZWwpLAogICAgICAgICAgYWxpYXNJZGVudGlmaWVyOiBfdGhpczIuZ2V0QWxpYXNJZGVudGlmaWVyKG5hbWVzcGFjZU1vZGVsKSwKICAgICAgICAgIG1ldGFkYXRhTGlzdDogbmFtZXNwYWNlTW9kZWwubWV0YWRhdGFMaXN0IHx8IFtdCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CiAgICAvKioKICAgICAqIEdldHMgdGhlIG5hbWVzcGFjZSB0eXBlIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgdGFibGUKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0gdGhlIG5hbWVzcGFjZSBtb2RlbC4KICAgICAqIEByZXR1cm5zIHsoJ04vQScgfCAnYWRkcmVzcycgfCAnbW9zYWljJyl9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0QWxpYXNUeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGlhc1R5cGUobmFtZXNwYWNlTW9kZWwpIHsKICAgICAgaWYgKCFuYW1lc3BhY2VNb2RlbC5hbGlhc1RhcmdldEFkZHJlc3NSYXdQbGFpbiAmJiAhbmFtZXNwYWNlTW9kZWwuYWxpYXNUYXJnZXRNb3NhaWNJZEhleCkgewogICAgICAgIHJldHVybiAnTi9BJzsKICAgICAgfQoKICAgICAgcmV0dXJuIG5hbWVzcGFjZU1vZGVsLmFsaWFzVHlwZSA9PT0gQWxpYXNUeXBlLkFkZHJlc3MgPyAnYWRkcmVzcycgOiAnbW9zYWljJzsKICAgIH0KICAgIC8qKgogICAgICogR2V0cyB0aGUgbmFtZXNwYWNlIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkIGluIHRoZSB0YWJsZQogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB0aGUgbmFtZXNwYWNlIG1vZGVsLgogICAgICogQHJldHVybnMge3N0cmluZ30KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRBbGlhc0lkZW50aWZpZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsaWFzSWRlbnRpZmllcihuYW1lc3BhY2VNb2RlbCkgewogICAgICByZXR1cm4gbmFtZXNwYWNlTW9kZWwuYWxpYXNUYXJnZXRNb3NhaWNJZEhleCB8fCBuYW1lc3BhY2VNb2RlbC5hbGlhc1RhcmdldEFkZHJlc3NSYXdQbGFpbiB8fCAnTi9BJzsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBhIHZpZXcgb2YgYSBuYW1lc3BhY2UgZXhwaXJhdGlvbiBpbmZvCiAgICAgKiBAcHVibGljCiAgICAgKiBAcGFyYW0gdGhlIG5hbWVzcGFjZSBtb2RlbC4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RXhwaXJhdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXhwaXJhdGlvbihuYW1lc3BhY2VNb2RlbCkgewogICAgICByZXR1cm4gTmFtZXNwYWNlU2VydmljZS5nZXRFeHBpcmF0aW9uKHRoaXMubmV0d29ya0NvbmZpZ3VyYXRpb24sIHRoaXMuY3VycmVudEhlaWdodCwgbmFtZXNwYWNlTW9kZWwuZW5kSGVpZ2h0KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBOYW1lc3BhY2VUYWJsZVNlcnZpY2U7Cn0oQXNzZXRUYWJsZVNlcnZpY2UpOw=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/AssetTableService/NamespaceTableService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;AACH;AACA,SAAS,SAAT,QAA0B,YAA1B,C,CACA;;AACA,SAAS,iBAAT,QAA8C,qBAA9C;AAEA,SAAS,gBAAT,QAAiC,6BAAjC;AAGA,WAAa,qBAAb;AAAA;;AAAA;;AACI,iCACI,aADJ,EAEqB,UAFrB,EAGqB,oBAHrB,EAGoE;AAAA;;AAAA;;AAEhE,8BAAM,aAAN;AAHiB,UAAA,UAAA,GAAA,UAAA;AACA,UAAA,oBAAA,GAAA,oBAAA;AAA+C;AAGnE;AAED;;;AAGG;;;AAZP;AAAA;AAAA,qCAayB;AACjB,aAAO,CACH;AAAE,QAAA,IAAI,EAAE,OAAR;AAAiB,QAAA,KAAK,EAAE;AAAxB,OADG,EAEH;AAAE,QAAA,IAAI,EAAE,MAAR;AAAgB,QAAA,KAAK,EAAE;AAAvB,OAFG,EAGH;AAAE,QAAA,IAAI,EAAE,YAAR;AAAsB,QAAA,KAAK,EAAE;AAA7B,OAHG,EAIH;AAAE,QAAA,IAAI,EAAE,SAAR;AAAmB,QAAA,KAAK,EAAE;AAA1B,OAJG,EAKH;AAAE,QAAA,IAAI,EAAE,WAAR;AAAqB,QAAA,KAAK,EAAE;AAA5B,OALG,EAMH;AAAE,QAAA,IAAI,EAAE,iBAAR;AAA2B,QAAA,KAAK,EAAE;AAAlC,OANG,CAAP;AAQH;AAtBL;AAAA;AAAA,mCAwBuB;AAAA;;AACf,UAAM,UAAU,GAAqB,KAAK,UAA1C;AAEA,aAAO,UAAU,CAAC,GAAX,CAAe,UAAC,cAAD,EAAmB;AAAA,mCACL,MAAI,CAAC,aAAL,CAAmB,cAAnB,CADK;AAAA,YAC7B,OAD6B,wBAC7B,OAD6B;AAAA,YACpB,UADoB,wBACpB,UADoB;;AAGrC,eAAO;AACH,UAAA,KAAK,EAAE,cAAc,CAAC,cADnB;AAEH,UAAA,IAAI,EAAE,cAAc,CAAC,IAFlB;AAGH,UAAA,UAAU,EAAE,UAHT;AAIH,UAAA,OAAO,EAAE,OAJN;AAKH,UAAA,SAAS,EAAE,MAAI,CAAC,YAAL,CAAkB,cAAlB,CALR;AAMH,UAAA,eAAe,EAAE,MAAI,CAAC,kBAAL,CAAwB,cAAxB,CANd;AAOH,UAAA,YAAY,EAAE,cAAc,CAAC,YAAf,IAA+B;AAP1C,SAAP;AASH,OAZM,CAAP;AAaH;AAED;;;;;AAKG;;AA/CP;AAAA;AAAA,iCAgDyB,cAhDzB,EAgDuD;AAC/C,UAAI,CAAC,cAAc,CAAC,0BAAhB,IAA8C,CAAC,cAAc,CAAC,sBAAlE,EAA0F;AACtF,eAAO,KAAP;AACH;;AACD,aAAO,cAAc,CAAC,SAAf,KAA6B,SAAS,CAAC,OAAvC,GAAiD,SAAjD,GAA6D,QAApE;AACH;AAED;;;;;AAKG;;AA5DP;AAAA;AAAA,uCA6D+B,cA7D/B,EA6D6D;AACrD,aAAO,cAAc,CAAC,sBAAf,IAAyC,cAAc,CAAC,0BAAxD,IAAsF,KAA7F;AACH;AAED;;;;;AAKG;;AAtEP;AAAA;AAAA,kCAuE0B,cAvE1B,EAuEwD;AAChD,aAAO,gBAAgB,CAAC,aAAjB,CAA+B,KAAK,oBAApC,EAA0D,KAAK,aAA/D,EAA8E,cAAc,CAAC,SAA7F,CAAP;AACH;AAzEL;;AAAA;AAAA,EAA2C,iBAA3C","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport { AliasType } from 'symbol-sdk';\n// internal dependencies\nimport { AssetTableService, TableField } from './AssetTableService';\nimport { NamespaceModel } from '@/core/database/entities/NamespaceModel';\nimport { NamespaceService } from '@/services/NamespaceService';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\n\nexport class NamespaceTableService extends AssetTableService {\n    constructor(\n        currentHeight: number,\n        private readonly namespaces: NamespaceModel[],\n        private readonly networkConfiguration: NetworkConfigurationModel,\n    ) {\n        super(currentHeight);\n    }\n\n    /**\n     * Return table fields to be displayed in a table header\n     * @returns {TableField[]}\n     */\n    public getTableFields(): TableField[] {\n        return [\n            { name: 'hexId', label: 'table_header_hex_id' },\n            { name: 'name', label: 'table_header_name' },\n            { name: 'expiration', label: 'table_header_expiration' },\n            { name: 'expired', label: 'table_header_expired' },\n            { name: 'aliasType', label: 'table_header_alias_type' },\n            { name: 'aliasIdentifier', label: 'table_header_alias_identifier' },\n        ];\n    }\n\n    public getTableRows(): any[] {\n        const namespaces: NamespaceModel[] = this.namespaces;\n\n        return namespaces.map((namespaceModel) => {\n            const { expired, expiration } = this.getExpiration(namespaceModel);\n\n            return {\n                hexId: namespaceModel.namespaceIdHex,\n                name: namespaceModel.name,\n                expiration: expiration,\n                expired: expired,\n                aliasType: this.getAliasType(namespaceModel),\n                aliasIdentifier: this.getAliasIdentifier(namespaceModel),\n                metadataList: namespaceModel.metadataList || [],\n            };\n        });\n    }\n\n    /**\n     * Gets the namespace type to be displayed in the table\n     * @private\n     * @param the namespace model.\n     * @returns {('N/A' | 'address' | 'mosaic')}\n     */\n    private getAliasType(namespaceModel: NamespaceModel): 'N/A' | 'address' | 'mosaic' {\n        if (!namespaceModel.aliasTargetAddressRawPlain && !namespaceModel.aliasTargetMosaicIdHex) {\n            return 'N/A';\n        }\n        return namespaceModel.aliasType === AliasType.Address ? 'address' : 'mosaic';\n    }\n\n    /**\n     * Gets the namespace identifier to be displayed in the table\n     * @private\n     * @param the namespace model.\n     * @returns {string}\n     */\n    private getAliasIdentifier(namespaceModel: NamespaceModel): string {\n        return namespaceModel.aliasTargetMosaicIdHex || namespaceModel.aliasTargetAddressRawPlain || 'N/A';\n    }\n\n    /**\n     * Returns a view of a namespace expiration info\n     * @public\n     * @param the namespace model.\n     * @returns {string}\n     */\n    private getExpiration(namespaceModel: NamespaceModel): { expiration: string; expired: boolean } {\n        return NamespaceService.getExpiration(this.networkConfiguration, this.currentHeight, namespaceModel.endHeight);\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmationTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmationTs.ts","mtime":1611927205471},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmationTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Account, Transaction } from 'symbol-sdk';\n// internal dependencies\nimport { AccountModel, AccountType } from '@/core/database/entities/AccountModel';\nimport { AccountTransactionSigner, TransactionAnnouncerService, TransactionSigner } from '@/services/TransactionAnnouncerService';\n// child components\n// @ts-ignore\nimport TransactionDetails from '@/components/TransactionDetails/TransactionDetails.vue';\n// @ts-ignore\nimport FormProfileUnlock from '@/views/forms/FormProfileUnlock/FormProfileUnlock.vue';\n// @ts-ignore\nimport HardwareConfirmationButton from '@/components/HardwareConfirmationButton/HardwareConfirmationButton.vue';\nimport { TransactionCommand } from '@/services/TransactionCommand';\n\n@Component({\n    components: {\n        TransactionDetails,\n        FormProfileUnlock,\n        HardwareConfirmationButton,\n    },\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n        }),\n    },\n})\nexport class ModalTransactionConfirmationTs extends Vue {\n    @Prop({\n        default: false,\n    })\n    public visible: boolean;\n\n    @Prop({\n        required: true,\n    })\n    public command: TransactionCommand;\n\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * List of transactions on-stage\n     * @see {Store.Account}\n     * @var {Transaction[]}\n     */\n    public stagedTransactions: Transaction[] = [];\n\n    public async mounted() {\n        this.stagedTransactions = await this.command.resolveTransactions().toPromise();\n    }\n\n    /// region computed properties getter/setter\n    /**\n     * Returns whether current account is a hardware wallet\n     * @return {boolean}\n     */\n    public get isUsingHardwareWallet(): boolean {\n        // XXX should use \"stagedTransaction.signer\" to identify account\n        return AccountType.TREZOR === this.currentAccount.type;\n    }\n\n    /**\n     * Visibility state\n     * @type {boolean}\n     */\n    public get show(): boolean {\n        return this.visible;\n    }\n\n    /**\n     * Emits close event\n     */\n    public set show(val) {\n        if (!val) {\n            this.$emit('close');\n        }\n    }\n    /// end-region computed properties getter/setter\n\n    /**\n     * Hook called when child component FormProfileUnlock emits\n     * the 'success' event.\n     *\n     * This hook shall *sign transactions* with the \\a account\n     * that has been unlocked. Subsequently it will also announce\n     * the signed transaction.\n     *\n     */\n    public async onAccountUnlocked({ account }: { account: Account }): Promise<void> {\n        // - log about unlock success\n        this.$store.dispatch('diagnostic/ADD_INFO', `Account ${account.address.plain()} unlocked successfully.`);\n        // - get transaction stage config\n        return this.onSigner(new AccountTransactionSigner(account));\n    }\n\n    /**\n     * Hook called when child component FormProfileUnlock emits\n     * the 'success' event.\n     *\n     * This hook shall *sign transactions* with the \\a account\n     * that has been unlocked. Subsequently it will also announce\n     * the signed transaction.\n     *\n     */\n    public async onSigner(transactionSigner: TransactionSigner): Promise<void> {\n        // - log about unlock success\n        // - get transaction stage config\n        const announcements = await this.command.announce(new TransactionAnnouncerService(this.$store), transactionSigner).toPromise();\n        announcements.forEach((announcement) => {\n            announcement.subscribe((res) => {\n                if (!res.success) {\n                    this.$store.dispatch('notification/ADD_ERROR', res.error, { root: true });\n                }\n            });\n        });\n        // - notify about successful transaction announce\n        this.$store.dispatch('notification/ADD_SUCCESS', 'success_transactions_signed');\n        this.$emit('success');\n        this.show = false;\n    }\n\n    /**\n     * Hook called when child component FormProfileUnlock or\n     * HardwareConfirmationButton emit the 'error' event.\n     * @param {string} message\n     * @return {void}\n     */\n    public onError(error: string) {\n        this.$emit('error', error);\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormTransferTransaction/FormTransferTransactionTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormTransferTransaction/FormTransferTransactionTs.ts","mtime":1606213958973},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvaGVyby9sYXJlZC13YWxsZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSkgeyByZXR1cm47IH0gdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgewogIGZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsKICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7CiAgICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOwogICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7CgogICAgdHJ5IHsKICAgICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksCiAgICAgICAgcmVzdWx0OwoKICAgIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgewogICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOwoKICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7CiAgfTsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgppbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwLXByZXNlbnQgTkVNIChodHRwczovL25lbS5pbykKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqLwoKaW1wb3J0IHsgQWRkcmVzcywgRW5jcnlwdGVkTWVzc2FnZSwgTW9zYWljLCBNb3NhaWNJZCwgTmFtZXNwYWNlSWQsIFBsYWluTWVzc2FnZSwgUmF3VUludDY0LCBUcmFuc2ZlclRyYW5zYWN0aW9uLCBVSW50NjQgfSBmcm9tICdzeW1ib2wtc2RrJzsKaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUsIFdhdGNoIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsgLy8gaW50ZXJuYWwgZGVwZW5kZW5jaWVzCgppbXBvcnQgeyBGb3JtYXR0ZXJzIH0gZnJvbSAnQC9jb3JlL3V0aWxzL0Zvcm1hdHRlcnMnOwppbXBvcnQgeyBGb3JtVHJhbnNhY3Rpb25CYXNlIH0gZnJvbSAnQC92aWV3cy9mb3Jtcy9Gb3JtVHJhbnNhY3Rpb25CYXNlL0Zvcm1UcmFuc2FjdGlvbkJhc2UnOwppbXBvcnQgeyBBZGRyZXNzVmFsaWRhdG9yLCBBbGlhc1ZhbGlkYXRvciB9IGZyb20gJ0AvY29yZS92YWxpZGF0aW9uL3ZhbGlkYXRvcnMnOwppbXBvcnQgeyBNb3NhaWNJbnB1dHNNYW5hZ2VyIH0gZnJvbSAnLi9Nb3NhaWNJbnB1dHNNYW5hZ2VyJzsgLy8gY2hpbGQgY29tcG9uZW50cwoKaW1wb3J0IHsgVmFsaWRhdGlvbk9ic2VydmVyIH0gZnJvbSAndmVlLXZhbGlkYXRlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IEFtb3VudElucHV0IGZyb20gJ0AvY29tcG9uZW50cy9BbW91bnRJbnB1dC9BbW91bnRJbnB1dC52dWUnOyAvLyBAdHMtaWdub3JlCgppbXBvcnQgRm9ybVdyYXBwZXIgZnJvbSAnQC9jb21wb25lbnRzL0Zvcm1XcmFwcGVyL0Zvcm1XcmFwcGVyLnZ1ZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCBNZXNzYWdlSW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL01lc3NhZ2VJbnB1dC9NZXNzYWdlSW5wdXQudnVlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IE1vZGFsVHJhbnNhY3Rpb25Db25maXJtYXRpb24gZnJvbSAnQC92aWV3cy9tb2RhbHMvTW9kYWxUcmFuc2FjdGlvbkNvbmZpcm1hdGlvbi9Nb2RhbFRyYW5zYWN0aW9uQ29uZmlybWF0aW9uLnZ1ZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCBNb3NhaWNBdHRhY2htZW50SW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL01vc2FpY0F0dGFjaG1lbnRJbnB1dC9Nb3NhaWNBdHRhY2htZW50SW5wdXQudnVlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IE1vc2FpY1NlbGVjdG9yIGZyb20gJ0AvY29tcG9uZW50cy9Nb3NhaWNTZWxlY3Rvci9Nb3NhaWNTZWxlY3Rvci52dWUnOyAvLyBAdHMtaWdub3JlCgppbXBvcnQgUmVjaXBpZW50SW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL1JlY2lwaWVudElucHV0L1JlY2lwaWVudElucHV0LnZ1ZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCBTaWduZXJTZWxlY3RvciBmcm9tICdAL2NvbXBvbmVudHMvU2lnbmVyU2VsZWN0b3IvU2lnbmVyU2VsZWN0b3IudnVlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IE1heEZlZUFuZFN1Ym1pdCBmcm9tICdAL2NvbXBvbmVudHMvTWF4RmVlQW5kU3VibWl0L01heEZlZUFuZFN1Ym1pdC52dWUnOyAvLyBAdHMtaWdub3JlCgppbXBvcnQgTW9kYWxUcmFuc2FjdGlvblVyaUltcG9ydCBmcm9tICdAL3ZpZXdzL21vZGFscy9Nb2RhbFRyYW5zYWN0aW9uVXJpSW1wb3J0L01vZGFsVHJhbnNhY3Rpb25VcmlJbXBvcnQudnVlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IFRyYW5zYWN0aW9uVXJpRGlzcGxheSBmcm9tICdAL2NvbXBvbmVudHMvVHJhbnNhY3Rpb25VcmkvVHJhbnNhY3Rpb25VcmlEaXNwbGF5L1RyYW5zYWN0aW9uVXJpRGlzcGxheS52dWUnOyAvLyBAdHMtaWdub3JlCgppbXBvcnQgUHJvdGVjdGVkUHJpdmF0ZUtleURpc3BsYXkgZnJvbSAnQC9jb21wb25lbnRzL1Byb3RlY3RlZFByaXZhdGVLZXlEaXNwbGF5L1Byb3RlY3RlZFByaXZhdGVLZXlEaXNwbGF5LnZ1ZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCBNb2RhbEZvcm1Qcm9maWxlVW5sb2NrIGZyb20gJ0Avdmlld3MvbW9kYWxzL01vZGFsRm9ybVByb2ZpbGVVbmxvY2svTW9kYWxGb3JtUHJvZmlsZVVubG9jay52dWUnOyAvLyBAdHMtaWdub3JlCgppbXBvcnQgRm9ybVJvdyBmcm9tICdAL2NvbXBvbmVudHMvRm9ybVJvdy9Gb3JtUm93LnZ1ZSc7CmltcG9ydCB7IE1vc2FpY1NlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL01vc2FpY1NlcnZpY2UnOwppbXBvcnQgeyBGaWx0ZXJIZWxwZXJzIH0gZnJvbSAnQC9jb3JlL3V0aWxzL0ZpbHRlckhlbHBlcnMnOwppbXBvcnQgeyBUcmFuc2FjdGlvbkNvbW1hbmQgfSBmcm9tICdAL3NlcnZpY2VzL1RyYW5zYWN0aW9uQ29tbWFuZCc7CmltcG9ydCB7IGZlZXNDb25maWcgfSBmcm9tICdAL2NvbmZpZyc7CmltcG9ydCB7IE5vdGlmaWNhdGlvblR5cGUgfSBmcm9tICdAL2NvcmUvdXRpbHMvTm90aWZpY2F0aW9uVHlwZSc7Cgp2YXIgRm9ybVRyYW5zZmVyVHJhbnNhY3Rpb25UcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Zvcm1UcmFuc2FjdGlvbkJhc2UpIHsKICBfaW5oZXJpdHMoRm9ybVRyYW5zZmVyVHJhbnNhY3Rpb25UcywgX0Zvcm1UcmFuc2FjdGlvbkJhc2UpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZvcm1UcmFuc2ZlclRyYW5zYWN0aW9uVHMpOwoKICBmdW5jdGlvbiBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzKTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLy8gZW5kLXJlZ2lvbiBjb21wb25lbnQgcHJvcGVydGllcwoKICAgIC8qKgogICAgICogRm9ybWF0dGVycyBoZWxwZXJzCiAgICAgKiBAdmFyIHtGb3JtYXR0ZXJzfQogICAgICovCgogICAgX3RoaXMuZm9ybWF0dGVycyA9IEZvcm1hdHRlcnM7CiAgICAvKioKICAgICAqIEZvcm0gaXRlbXMKICAgICAqIEB2YXIge2FueX0KICAgICAqLwoKICAgIF90aGlzLmZvcm1JdGVtcyA9IHsKICAgICAgc2lnbmVyQWRkcmVzczogJycsCiAgICAgIGF0dGFjaGVkTW9zYWljczogW10sCiAgICAgIHJlY2lwaWVudFJhdzogJycsCiAgICAgIHJlY2lwaWVudDogbnVsbCwKICAgICAgc2VsZWN0ZWRNb3NhaWNIZXg6ICcnLAogICAgICByZWxhdGl2ZUFtb3VudDogMCwKICAgICAgbWVzc2FnZVBsYWluOiAnJywKICAgICAgZW5jcnlwdE1lc3NhZ2U6IGZhbHNlLAogICAgICBtYXhGZWU6IDAsCiAgICAgIG1vc2FpY3M6IFtdLAogICAgICBzaWduZXJQdWJsaWNLZXk6ICcnCiAgICB9OwogICAgLyoqCiAgICAgKiBXaGV0aGVyIE1vZGFsVHJhbnNhY3Rpb25VcmlJbXBvcnQgaXMgdmlzaWJsZQogICAgICovCgogICAgX3RoaXMuaXNJbXBvcnRUcmFuc2FjdGlvblVyaU1vZGFsVmlzaWJsZSA9IGZhbHNlOwogICAgLyoqCiAgICAgKiBIb2xkcyB0aGUganVzdCBpbiB0aW1lIHRyYW5zYWN0aW9ucwogICAgICovCgogICAgX3RoaXMudHJhbnNhY3Rpb25zID0gW107CiAgICAvKioKICAgICAqIENhbGN1bGF0ZWQgcmVjb21tZW5kZWQgZmVlIGJhc2VkIG9uIHRoZSB0eHMgc2l6ZQogICAgICovCgogICAgX3RoaXMuY2FsY3VsYXRlZFJlY29tbWVuZGVkRmVlID0gMDsKICAgIC8qKgogICAgICogQ2FsY3VsYXRlZCBoaWdoZXN0IGZlZSBiYXNlZCBvbiB0aGUgdHhzIHNpemUKICAgICAqLwoKICAgIF90aGlzLmNhbGN1bGF0ZWRIaWdoZXN0RmVlID0gMDsKICAgIF90aGlzLnNob3dVbmxvY2tBY2NvdW50TW9kYWwgPSBmYWxzZTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgLyoqCiAgICogUmVzZXQgdGhlIGZvcm0gd2l0aCBwcm9wZXJ0aWVzCiAgICogQHJldHVybiB7dm9pZH0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzLCBbewogICAga2V5OiAicmVzZXRGb3JtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEZvcm0oKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgLy8gLSByZXNldCBhdHRhY2hlZCBtb3NhaWNzCiAgICAgIHRoaXMuZm9ybUl0ZW1zLmF0dGFjaGVkTW9zYWljcyA9IFtdOyAvLyAtIHNldCBkZWZhdWx0IGZvcm0gdmFsdWVzCgogICAgICB0aGlzLmZvcm1JdGVtcy5zaWduZXJBZGRyZXNzID0gdGhpcy5zZWxlY3RlZFNpZ25lciA/IHRoaXMuc2VsZWN0ZWRTaWduZXIuYWRkcmVzcy5wbGFpbigpIDogdGhpcy5jdXJyZW50QWNjb3VudC5hZGRyZXNzOwogICAgICB0aGlzLmZvcm1JdGVtcy5zZWxlY3RlZE1vc2FpY0hleCA9IHRoaXMubmV0d29ya01vc2FpYy50b0hleCgpOyAvLyBkZWZhdWx0IGN1cnJlbnRBY2NvdW50IEFkZHJlc3MgdG8gcmVjaXBpZW50UmF3CgogICAgICBpZiAodGhpcy4kcm91dGUucGF0aC5pbmRleE9mKCdpbnZvaWNlJykgPiAtMSkgewogICAgICAgIHRoaXMuZm9ybUl0ZW1zLnJlY2lwaWVudFJhdyA9IHRoaXMuY3VycmVudEFjY291bnQuYWRkcmVzcyB8fCAnJzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmZvcm1JdGVtcy5yZWNpcGllbnRSYXcgPSAhIXRoaXMucmVjaXBpZW50ID8gdGhpcy5yZWNpcGllbnQucGxhaW4oKSA6ICcnOwogICAgICB9CgogICAgICB0aGlzLmZvcm1JdGVtcy5yZWNpcGllbnQgPSAhIXRoaXMucmVjaXBpZW50ID8gdGhpcy5yZWNpcGllbnQgOiBudWxsOwogICAgICB2YXIgY3VycmVudE1vc2FpY3MgPSB0aGlzLmN1cnJlbnRNb3NhaWNMaXN0KCk7CiAgICAgIHZhciBhdHRhY2hlZE1vc2FpY3MgPSBbewogICAgICAgIGlkOiBuZXcgTW9zYWljSWQodGhpcy5uZXR3b3JrQ3VycmVuY3kubW9zYWljSWRIZXgpLAogICAgICAgIG1vc2FpY0hleDogdGhpcy5uZXR3b3JrQ3VycmVuY3kubW9zYWljSWRIZXgsCiAgICAgICAgbmFtZTogdGhpcy5uZXR3b3JrQ3VycmVuY3kubmFtZXNwYWNlSWRGdWxsbmFtZSwKICAgICAgICBhbW91bnQ6IDAsCiAgICAgICAgdWlkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMGU2KQogICAgICB9XTsKICAgICAgdGhpcy5mb3JtSXRlbXMubWVzc2FnZVBsYWluID0gdGhpcy5tZXNzYWdlID8gRm9ybWF0dGVycy5oZXhUb1V0ZjgodGhpcy5tZXNzYWdlLnBheWxvYWQpIDogJyc7CiAgICAgIHRoaXMuZm9ybUl0ZW1zLmVuY3J5cHRNZXNzYWdlID0gZmFsc2U7CiAgICAgIHRoaXMuZW5jeXB0ZWRNZXNzYWdlID0gbnVsbDsKICAgICAgdGhpcy5zaG93VW5sb2NrQWNjb3VudE1vZGFsID0gZmFsc2U7IC8vIC0gbWF4RmVlIG11c3QgYmUgYWJzb2x1dGUKCiAgICAgIHRoaXMuZm9ybUl0ZW1zLm1heEZlZSA9IHRoaXMuZGVmYXVsdEZlZTsgLy8gLSBpbml0aWFsaXplIG1vc2FpY3MgaW5wdXQgbWFuYWdlcgoKICAgICAgdGhpcy5tb3NhaWNJbnB1dHNNYW5hZ2VyID0gTW9zYWljSW5wdXRzTWFuYWdlci5pbml0aWFsaXplKGN1cnJlbnRNb3NhaWNzKTsgLy8gdHJhbnNhY3Rpb24gZGV0YWlscyBwYXNzZWQgdmlhIHJvdXRlcgoKICAgICAgaWYgKHRoaXMuJHJvdXRlLnBhcmFtcy50cmFuc2FjdGlvbiB8fCB0aGlzLmltcG9ydGVkVHJhbnNhY3Rpb24pIHsKICAgICAgICAvLyBAdHMtaWdub3JlCiAgICAgICAgdGhpcy5zZXRUcmFuc2FjdGlvbnMoWyEhdGhpcy5pbXBvcnRlZFRyYW5zYWN0aW9uID8gdGhpcy5pbXBvcnRlZFRyYW5zYWN0aW9uIDogdGhpcy4kcm91dGUucGFyYW1zLnRyYW5zYWN0aW9uXSk7CiAgICAgICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMi5mb3JtSXRlbXMuYXR0YWNoZWRNb3NhaWNzLmZvckVhY2goZnVuY3Rpb24gKGF0dGFjaGVkTW9zYWljKSB7CiAgICAgICAgICAgIF90aGlzMi5tb3NhaWNJbnB1dHNNYW5hZ2VyLnNldFNsb3QoYXR0YWNoZWRNb3NhaWMubW9zYWljSGV4LCBhdHRhY2hlZE1vc2FpYy51aWQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gLSBzZXQgYXR0YWNoZWRNb3NhaWNzIGFuZCBhbGxvY2F0ZSBzbG90cwogICAgICAgIFZ1ZS5uZXh0VGljaygpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcihfdGhpczIsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0YWNoZWRNb3NhaWNzLmZvckVhY2goZnVuY3Rpb24gKGF0dGFjaGVkTW9zYWljLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLm1vc2FpY0lucHV0c01hbmFnZXIuc2V0U2xvdChhdHRhY2hlZE1vc2FpYy5tb3NhaWNIZXgsIGF0dGFjaGVkTW9zYWljLnVpZCk7CgogICAgICAgICAgICAgICAgICAgICAgVnVlLnNldChfdGhpczMuZm9ybUl0ZW1zLmF0dGFjaGVkTW9zYWljcywgaW5kZXgsIGF0dGFjaGVkTW9zYWljKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICB9KSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRoaXMudHJpZ2dlckNoYW5nZSgpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBtb3NhaWMgbGlzdCBvZiB0aGUgY3VycmVudCBhY2NvdW50IG9yIGN1cnJlbnQgc2lnbmVyCiAgICAgKiBkZXBlbmRpbmcgb24gdGhlIG11bHRpc2lnIHNpdHVhdGlvbgogICAgICogQHByb3RlY3RlZAogICAgICogQHJldHVybnMKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjdXJyZW50TW9zYWljTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3VycmVudE1vc2FpY0xpc3QoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgLy8gZmlsdGVyIG91dCBleHBpcmVkIG1vc2FpY3MKICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZU1vc2FpY3MuZmlsdGVyKGZ1bmN0aW9uIChtb3NhaWNJbmZvKSB7CiAgICAgICAgLy8gY2FsY3VsYXRlIGV4cGlyYXRpb24KICAgICAgICB2YXIgZXhwaXJhdGlvbiA9IE1vc2FpY1NlcnZpY2UuZ2V0RXhwaXJhdGlvbihtb3NhaWNJbmZvLCBfdGhpczQuY3VycmVudEhlaWdodCwgX3RoaXM0Lm5ldHdvcmtDb25maWd1cmF0aW9uLmJsb2NrR2VuZXJhdGlvblRhcmdldFRpbWUpOyAvLyBza2lwIGlmIG1vc2FpYyBpcyBleHBpcmVkCgogICAgICAgIHJldHVybiBleHBpcmF0aW9uICE9PSAnZXhwaXJlZCc7CiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBHZXR0ZXIgZm9yIFRSQU5TRkVSIHRyYW5zYWN0aW9ucyB0aGF0IHdpbGwgYmUgc3RhZ2VkCiAgICAgKiBAc2VlIHtGb3JtVHJhbnNhY3Rpb25CYXNlfQogICAgICogQHJldHVybiB7VHJhbnNmZXJUcmFuc2FjdGlvbltdfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFRyYW5zYWN0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25zKCkgewogICAgICB2YXIgbW9zYWljc0luZm8gPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydtb3NhaWMvbW9zYWljcyddOwogICAgICB2YXIgbW9zYWljcyA9IHRoaXMuZm9ybUl0ZW1zLmF0dGFjaGVkTW9zYWljcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICB2YXIgdWlkID0gX3JlZi51aWQ7CiAgICAgICAgcmV0dXJuIHVpZDsKICAgICAgfSkgLy8gZmlsdGVyIG91dCBudWxsIHZhbHVlcwogICAgICAubWFwKGZ1bmN0aW9uIChzcGVjKSB7CiAgICAgICAgdmFyIGluZm8gPSBtb3NhaWNzSW5mby5maW5kKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgICByZXR1cm4gaS5tb3NhaWNJZEhleCA9PT0gc3BlYy5tb3NhaWNIZXg7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGRpdiA9IGluZm8gPyBpbmZvLmRpdmlzaWJpbGl0eSA6IDA7IC8vIC0gZm9ybWF0IGFtb3VudCB0byBhYnNvbHV0ZQoKICAgICAgICByZXR1cm4gbmV3IE1vc2FpYyhuZXcgTW9zYWljSWQoUmF3VUludDY0LmZyb21IZXgoc3BlYy5tb3NhaWNIZXgpKSwgVUludDY0LmZyb21VaW50KHNwZWMuYW1vdW50ICogTWF0aC5wb3coMTAsIGRpdikpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBbVHJhbnNmZXJUcmFuc2FjdGlvbi5jcmVhdGUodGhpcy5jcmVhdGVEZWFkbGluZSgpLCB0aGlzLmluc3RhbnRpYXRlZFJlY2lwaWVudCwgbW9zYWljcy5sZW5ndGggPyBtb3NhaWNzIDogW10sIHRoaXMuZm9ybUl0ZW1zLmVuY3J5cHRNZXNzYWdlID8gdGhpcy5lbmN5cHRlZE1lc3NhZ2UgOiBQbGFpbk1lc3NhZ2UuY3JlYXRlKHRoaXMuZm9ybUl0ZW1zLm1lc3NhZ2VQbGFpbiB8fCAnJyksIHRoaXMubmV0d29ya1R5cGUsIFVJbnQ2NC5mcm9tVWludCh0aGlzLmZvcm1JdGVtcy5tYXhGZWUpKV07CiAgICB9CiAgICAvKioKICAgICAqIFNldHRlciBmb3IgVFJBTlNGRVIgdHJhbnNhY3Rpb25zIHRoYXQgd2lsbCBiZSBzdGFnZWQKICAgICAqIEBzZWUge0Zvcm1UcmFuc2FjdGlvbkJhc2V9CiAgICAgKiBAcGFyYW0ge1RyYW5zZmVyVHJhbnNhY3Rpb25bXX0gdHJhbnNhY3Rpb25zCiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm90IG92ZXJsb2FkZWQgaW4gZGVyaXZhdGUgY29tcG9uZW50CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2V0VHJhbnNhY3Rpb25zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUcmFuc2FjdGlvbnModHJhbnNhY3Rpb25zKSB7CiAgICAgIC8vIC0gdGhpcyBmb3JtIGNyZWF0ZXMgb25seSAxIHRyYW5zYWN0aW9uCiAgICAgIHZhciB0cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9ucy5zaGlmdCgpOyAvLyAtIHBvcHVsYXRlIHJlY2lwaWVudAoKICAgICAgdGhpcy5mb3JtSXRlbXMucmVjaXBpZW50UmF3ID0gdHJhbnNhY3Rpb24ucmVjaXBpZW50QWRkcmVzcyBpbnN0YW5jZW9mIE5hbWVzcGFjZUlkID8gdHJhbnNhY3Rpb24ucmVjaXBpZW50QWRkcmVzcy5mdWxsTmFtZSA6IHRyYW5zYWN0aW9uLnJlY2lwaWVudEFkZHJlc3MucGxhaW4oKTsgLy8gLSBwb3B1bGF0ZSBhdHRhY2hlZCBtb3NhaWNzCgogICAgICB0aGlzLmZvcm1JdGVtcy5hdHRhY2hlZE1vc2FpY3MgPSB0aGlzLm1vc2FpY3NUb0F0dGFjaG1lbnRzKHRyYW5zYWN0aW9uLm1vc2FpY3MpOyAvLyAtIHBvcHVsYXRlIG1lc3NhZ2UKCiAgICAgIHRoaXMuZm9ybUl0ZW1zLm1lc3NhZ2VQbGFpbiA9IHRyYW5zYWN0aW9uLm1lc3NhZ2UucGF5bG9hZDsgLy8gLSBwb3B1bGF0ZSBtYXhGZWUKCiAgICAgIHRoaXMuZm9ybUl0ZW1zLm1heEZlZSA9IHRyYW5zYWN0aW9uLm1heEZlZS5jb21wYWN0KCk7CiAgICB9IC8vLyByZWdpb24gY29tcHV0ZWQgcHJvcGVydGllcyBnZXR0ZXIvc2V0dGVyCgogICAgLyoqCiAgICAgKiBSZWNpcGllbnQgdXNlZCBpbiB0aGUgdHJhbnNhY3Rpb24KICAgICAqIEByZWFkb25seQogICAgICogQHByb3RlY3RlZAogICAgICogQHR5cGUgeyhBZGRyZXNzIHwgTmFtZXNwYWNlSWQpfQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uRGVsZXRlTW9zYWljIiwKICAgIC8vLyBlbmQtcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgoKICAgIC8qKgogICAgICogSG9vayBjYWxsZWQgd2hlbiB0aGUgY2hpbGQgY29tcG9uZW50IE1vc2FpY0F0dGFjaG1lbnREaXNwbGF5IHRyaWdnZXJzCiAgICAgKiB0aGUgZXZlbnQgJ2RlbGV0ZScKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBvbkRlbGV0ZU1vc2FpYyhpZCkgewogICAgICB2YXIgdXBkYXRlZEF0dGFjaGVkTW9zYWljcyA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmZvcm1JdGVtcy5hdHRhY2hlZE1vc2FpY3MpLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgICB2YXIgbW9zYWljSGV4ID0gX3JlZjIubW9zYWljSGV4OwogICAgICAgIHJldHVybiBtb3NhaWNIZXggIT09IGlkLnRvSGV4KCk7CiAgICAgIH0pOyAvLyBmaXhlcyByZWFjdGl2aXR5IG9uIGF0dGFjaGVkTW9zYWljcyAob2JzZXJ2ZXIgcmVzb2x1dGlvbikKCgogICAgICBWdWUuc2V0KHRoaXMuZm9ybUl0ZW1zLCAnYXR0YWNoZWRNb3NhaWNzJywgdXBkYXRlZEF0dGFjaGVkTW9zYWljcyk7CiAgICB9CiAgICAvKioKICAgICAqIEhvb2sgY2FsbGVkIHdoZW4gdGhlIGNoaWxkIGNvbXBvbmVudCBCdXR0b25BZGQgdHJpZ2dlcnMKICAgICAqIHRoZSBldmVudCAnY2xpY2snCiAgICAgKiBAcmV0dXJuIHt2b2lkfQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uTW9zYWljSW5wdXRDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uTW9zYWljSW5wdXRDaGFuZ2UocGF5bG9hZCkgewogICAgICB2YXIgbW9zYWljQXR0YWNobWVudCA9IHBheWxvYWQubW9zYWljQXR0YWNobWVudCwKICAgICAgICAgIGlucHV0SW5kZXggPSBwYXlsb2FkLmlucHV0SW5kZXg7IC8vIHNldCBzbG90CgogICAgICB0aGlzLm1vc2FpY0lucHV0c01hbmFnZXIuc2V0U2xvdChtb3NhaWNBdHRhY2htZW50Lm1vc2FpY0hleCwgaW5wdXRJbmRleCk7IC8vIHVwZGF0ZSBmb3JtSXRlbXMKCiAgICAgIHZhciBuZXdBdHRhY2hlZE1vc2FpY3MgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5mb3JtSXRlbXMuYXR0YWNoZWRNb3NhaWNzKTsKCiAgICAgIHZhciBpbmRleFRvVXBkYXRlID0gbmV3QXR0YWNoZWRNb3NhaWNzLmZpbmRJbmRleChmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgICB2YXIgdWlkID0gX3JlZjMudWlkOwogICAgICAgIHJldHVybiB1aWQgPT0gaW5wdXRJbmRleDsKICAgICAgfSk7CiAgICAgIG5ld0F0dGFjaGVkTW9zYWljc1tpbmRleFRvVXBkYXRlXSA9IG1vc2FpY0F0dGFjaG1lbnQ7CiAgICAgIFZ1ZS5zZXQodGhpcy5mb3JtSXRlbXMsICdhdHRhY2hlZE1vc2FpY3MnLCBuZXdBdHRhY2hlZE1vc2FpY3MpOwogICAgICB0aGlzLnRyaWdnZXJDaGFuZ2UoKTsKICAgIH0KICAgIC8qKgogICAgICogSGFuZGxlIGRlbGV0aW9uIG9mIGEgbW9zYWljIGlucHV0CiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXRJbmRleAogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uRGVsZXRlTW9zYWljSW5wdXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRGVsZXRlTW9zYWljSW5wdXQoaW5kZXgpIHsKICAgICAgLy8gdW5zZXQgbW9zYWljIGlucHV0IHNsb3QKICAgICAgdGhpcy5tb3NhaWNJbnB1dHNNYW5hZ2VyLnVuc2V0U2xvdChpbmRleCk7IC8vIHVwZGF0ZSBmb3JtSXRlbXMsIHNldCBpbnB1dCB1aWQgdG8gbnVsbAoKICAgICAgdmFyIGluZGV4VG9VcGRhdGUgPSB0aGlzLmZvcm1JdGVtcy5hdHRhY2hlZE1vc2FpY3MuZmluZEluZGV4KGZ1bmN0aW9uIChfcmVmNCkgewogICAgICAgIHZhciB1aWQgPSBfcmVmNC51aWQ7CiAgICAgICAgcmV0dXJuIHVpZCA9PSBpbmRleDsKICAgICAgfSk7CiAgICAgIFZ1ZS5zZXQodGhpcy5mb3JtSXRlbXMuYXR0YWNoZWRNb3NhaWNzLCBpbmRleFRvVXBkYXRlLCB7CiAgICAgICAgdWlkOiBudWxsCiAgICAgIH0pOyAvLyBkZWxldGUgdGhlIGxhc3Qgb25lIGluIG9yZGVyIHRvIHJlLXJlbmRlciB0aGUgbGlzdAoKICAgICAgdGhpcy5mb3JtSXRlbXMuYXR0YWNoZWRNb3NhaWNzLnBvcCgpOwogICAgICB0aGlzLnRyaWdnZXJDaGFuZ2UoKTsKICAgIH0KICAgIC8qKgogICAgICogSW50ZXJuYWwgaGVscGVyIHRvIGZvcm1hdCBhIHtNb3NhaWN9IGVudHJ5IGludG8KICAgICAqIGFuIGFycmF5IG9mIE1vc2FpY0F0dGFjaG1lbnQgdXNlZCBpbiB0aGlzIGZvcm0uCiAgICAgKiBAaW50ZXJuYWwKICAgICAqIEBwYXJhbSB7TW9zYWljW119IG1vc2FpY3MKICAgICAqIEByZXR1cm4ge01vc2FpY0F0dGFjaG1lbnRbXX0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJtb3NhaWNzVG9BdHRhY2htZW50cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW9zYWljc1RvQXR0YWNobWVudHMobW9zYWljcykgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHJldHVybiBtb3NhaWNzLm1hcChmdW5jdGlvbiAobW9zYWljKSB7CiAgICAgICAgdmFyIGluZm8gPSBfdGhpczUuYmFsYW5jZU1vc2FpY3MuZmluZChmdW5jdGlvbiAobSkgewogICAgICAgICAgcmV0dXJuIG1vc2FpYy5pZC50b0hleCgpID09PSBtLm1vc2FpY0lkSGV4OwogICAgICAgIH0pOwoKICAgICAgICBpZiAoIWluZm8pIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0gLy8gYW1vdW50IHdpbGwgYmUgY29udmVydGVkIHRvIFJFTEFUSVZFCgoKICAgICAgICByZXR1cm4gewogICAgICAgICAgaWQ6IG5ldyBNb3NhaWNJZChpbmZvLm1vc2FpY0lkSGV4KSwKICAgICAgICAgIG1vc2FpY0hleDogaW5mby5tb3NhaWNJZEhleCwKICAgICAgICAgIG5hbWU6IGluZm8ubmFtZSwKICAgICAgICAgIGFtb3VudDogbW9zYWljLmFtb3VudC5jb21wYWN0KCkgLyBNYXRoLnBvdygxMCwgaW5mby5kaXZpc2liaWxpdHkpLAogICAgICAgICAgdWlkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMGU2KQogICAgICAgIH07CiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoYSkgewogICAgICAgIHJldHVybiBhOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogIEhvb2sgY2FsbGVkIHdoZW4gYWRkaW5nIGEgbmV3IG1vc2FpYyBhdHRhY2htZW50IGlucHV0CiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYWRkTW9zYWljQXR0YWNobWVudElucHV0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNb3NhaWNBdHRhY2htZW50SW5wdXQoKSB7CiAgICAgIGlmICghdGhpcy5tb3NhaWNJbnB1dHNNYW5hZ2VyLmhhc0ZyZWVTbG90cygpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9IC8vIGdlbmVyYXRlIGlkIGFuZCBwcmVwYXJlIG1vc2FpYyBmb3Igc2xvdAoKCiAgICAgIHZhciB1aWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMGU2KTsKCiAgICAgIHZhciBfdGhpcyRtb3NhaWNJbnB1dHNNYW4gPSB0aGlzLm1vc2FpY0lucHV0c01hbmFnZXIuZ2V0TW9zYWljc0J5U2xvdCh1aWQpLAogICAgICAgICAgX3RoaXMkbW9zYWljSW5wdXRzTWFuMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJG1vc2FpY0lucHV0c01hbiwgMSksCiAgICAgICAgICBtb3NhaWNUb0FmZmVjdFRvTmV3SW5wdXQgPSBfdGhpcyRtb3NhaWNJbnB1dHNNYW4yWzBdOyAvLyB1cGRhdGUgaW5wdXRzIG1hbmFnZXIgYW5kIGZvcm0gaXRlbXMKCgogICAgICB0aGlzLm1vc2FpY0lucHV0c01hbmFnZXIuc2V0U2xvdChtb3NhaWNUb0FmZmVjdFRvTmV3SW5wdXQsIHVpZCk7CiAgICAgIHRoaXMuZm9ybUl0ZW1zLmF0dGFjaGVkTW9zYWljcy5wdXNoKHsKICAgICAgICBtb3NhaWNIZXg6IG1vc2FpY1RvQWZmZWN0VG9OZXdJbnB1dCwKICAgICAgICBhbW91bnQ6IDAsCiAgICAgICAgdWlkOiB1aWQKICAgICAgfSk7CiAgICAgIHRoaXMudHJpZ2dlckNoYW5nZSgpOwogICAgfQogICAgLyoqCiAgICAgKiBIYW5kbGVyIHdoZW4gY2hhbmdpbmcgbWVzc2FnZQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uQ2hhbmdlTWVzc2FnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VNZXNzYWdlKCkgewogICAgICB0aGlzLnRyaWdnZXJDaGFuZ2UoKTsKICAgIH0KICAgIC8qKgogICAgICogSGFuZGxlciB3aGVuIGNoYW5naW5nIHJlY2lwaWVudAogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uQ2hhbmdlUmVjaXBpZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVJlY2lwaWVudCgpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICAvLyBmaWx0ZXIgdGFncwogICAgICB0aGlzLmZvcm1JdGVtcy5yZWNpcGllbnRSYXcgPSBGaWx0ZXJIZWxwZXJzLnN0cmlwRmlsdGVyKHRoaXMuZm9ybUl0ZW1zLnJlY2lwaWVudFJhdyk7CgogICAgICBpZiAoQWRkcmVzcy5pc1ZhbGlkUmF3QWRkcmVzcyh0aGlzLmZvcm1JdGVtcy5yZWNpcGllbnRSYXcpKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FjY291bnQvR0VUX1JFQ0lQSUVOVCcsIEFkZHJlc3MuY3JlYXRlRnJvbVJhd0FkZHJlc3ModGhpcy5mb3JtSXRlbXMucmVjaXBpZW50UmF3KSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgX2E7CgogICAgICAgICAgaWYgKCEoKF9hID0gX3RoaXM2LmN1cnJlbnRSZWNpcGllbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wdWJsaWNLZXkpIHx8IC9eMCokLy50ZXN0KF90aGlzNi5jdXJyZW50UmVjaXBpZW50LnB1YmxpY0tleSkpIHsKICAgICAgICAgICAgX3RoaXM2LnJlc2V0RW5jcnlwdGVkTWVzc2FnZSgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucmVzZXRFbmNyeXB0ZWRNZXNzYWdlKCk7CiAgICAgIH0KCiAgICAgIHRoaXMudHJpZ2dlckNoYW5nZSgpOwogICAgfQogICAgLyoqCiAgICAgKiBIYW5kbGVyIHdoZW4gY2hhbmdpbmcgbWF4IGZlZQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uQ2hhbmdlTWF4RmVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZU1heEZlZSgpIHsKICAgICAgaWYgKHRoaXMuZm9ybUl0ZW1zLnJlY2lwaWVudFJhdyAmJiB0aGlzLmZvcm1JdGVtcy5yZWNpcGllbnRSYXcgIT09ICcnKSB7CiAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cmlnZ2VyQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cmlnZ2VyQ2hhbmdlKCkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIGlmIChBZGRyZXNzLmlzVmFsaWRSYXdBZGRyZXNzKHRoaXMuZm9ybUl0ZW1zLnJlY2lwaWVudFJhdykpIHsKICAgICAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25zKCk7IC8vIGF2b2lkIGVycm9yCgogICAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9ucykgewogICAgICAgICAgdmFyIGRhdGEgPSBbXTsKICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25zLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICBkYXRhLnB1c2goewogICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBpdGVtLAogICAgICAgICAgICAgIGF0dGFjaG1lbnRzOiBfdGhpczcubW9zYWljc1RvQXR0YWNobWVudHMoaXRlbS5tb3NhaWNzKQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy4kZW1pdCgnb25UcmFuc2FjdGlvbnNDaGFuZ2UnLCBkYXRhKTsKICAgICAgICAgIHRoaXMuY2FsY3VsYXRlRHluYW1pY0ZlZXMoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50cmFuc2FjdGlvbnMgPSBudWxsOwogICAgICAgIHRoaXMucmVzZXREeW5hbWljRmVlcygpOwogICAgICAgIHRoaXMucmVzZXRFbmNyeXB0ZWRNZXNzYWdlKCk7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmVzZXR0aW5nIHRoZSBmb3JtIHdoZW4gY2hvb3NpbmcgYSBtdWx0aXNpZyBzaWduZXIgYW5kIGNoYW5naW5nIG11bHRpc2lnIHNpZ25lcgogICAgICogSXMgbmVjZXNzYXJ5IHRvIG1ha2UgdGhlIG1vc2FpYyBpbnB1dHMgcmVhY3RpdmUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvblNlbGVjdGVkU2lnbmVyQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNlbGVjdGVkU2lnbmVyQ2hhbmdlKCkgewogICAgICBpZiAodGhpcy5pc011bHRpc2lnTW9kZSgpKSB7CiAgICAgICAgdGhpcy5yZXNldEZvcm0oKTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBNb2RhbFRyYW5zYWN0aW9uVXJpSW1wb3J0IG1vZGFsIHBhZ2UgY2xvc2UgZXZlbnQgaGFuZGxlcgogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uSW1wb3J0VHJhbnNhY3Rpb25VUklNb2RhbENsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkltcG9ydFRyYW5zYWN0aW9uVVJJTW9kYWxDbG9zZSgpIHsKICAgICAgdGhpcy5pc0ltcG9ydFRyYW5zYWN0aW9uVXJpTW9kYWxWaXNpYmxlID0gZmFsc2U7CiAgICB9CiAgICAvKioKICAgICAqIEltcG9ydCB0cmFuc2FjdGlvblVSSSBjb21wbGV0ZSBldmVudCBoYW5kbGVyCiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gdHJhbnNhY3Rpb24gdG8gYmUgaW1wb3J0ZWQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkltcG9ydFRyYW5zYWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkltcG9ydFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7CiAgICAgIHRoaXMuaW1wb3J0ZWRUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uOwogICAgICB0aGlzLnJlc2V0Rm9ybSgpOwogICAgfQogICAgLyoqCiAgICAgKiBFbmNyeXB0IG1lc3NhZ2UgY2hlY2tib3ggY2xpY2sKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvbkVuY3J5cHRpb25DaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRW5jcnlwdGlvbkNoYW5nZSgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICB2YXIgX2E7CgogICAgICBpZiAodGhpcy5mb3JtSXRlbXMuZW5jcnlwdE1lc3NhZ2UpIHsKICAgICAgICBpZiAoISgoX2EgPSB0aGlzLmN1cnJlbnRSZWNpcGllbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wdWJsaWNLZXkpKSB7CiAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbm90aWZpY2F0aW9uL0FERF9FUlJPUicsIHRoaXMuJHQoTm90aWZpY2F0aW9uVHlwZS5SRUNJUElFTlRfUFVCTElDX0tFWV9JTlZBTElEX0VSUk9SKSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczguZm9ybUl0ZW1zLmVuY3J5cHRNZXNzYWdlID0gZmFsc2U7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmZvcm1JdGVtcy5tZXNzYWdlUGxhaW4pIHsKICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdub3RpZmljYXRpb24vQUREX0VSUk9SJywgdGhpcy4kdChOb3RpZmljYXRpb25UeXBlLkVOQ1JZUFRFRF9NRVNTQUdFX0VNUFRZX0VSUk9SKSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczguZm9ybUl0ZW1zLmVuY3J5cHRNZXNzYWdlID0gZmFsc2U7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5oYXNBY2NvdW50VW5sb2NrTW9kYWwgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmVuY3lwdGVkTWVzc2FnZSA9IG51bGw7CiAgICAgICAgdGhpcy5oYXNBY2NvdW50VW5sb2NrTW9kYWwgPSBmYWxzZTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBIb29rIGNhbGxlZCB3aGVuIHRoZSBhY2NvdW50IGhhcyBiZWVuIHVubG9ja2VkCiAgICAgKiBAcGFyYW0ge0FjY291bnR9IGFjY291bnQKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25BY2NvdW50VW5sb2NrZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWNjb3VudFVubG9ja2VkKGFjY291bnQpIHsKICAgICAgdGhpcy5oYXNBY2NvdW50VW5sb2NrTW9kYWwgPSBmYWxzZTsKICAgICAgdGhpcy5lbmN5cHRlZE1lc3NhZ2UgPSB0aGlzLmZvcm1JdGVtcy5tZXNzYWdlUGxhaW4gPyBFbmNyeXB0ZWRNZXNzYWdlLmNyZWF0ZSh0aGlzLmZvcm1JdGVtcy5tZXNzYWdlUGxhaW4sIHRoaXMuY3VycmVudFJlY2lwaWVudCwgYWNjb3VudC5wcml2YXRlS2V5KSA6IFBsYWluTWVzc2FnZS5jcmVhdGUoJycpOwogICAgICB0aGlzLmZvcm1JdGVtcy5lbmNyeXB0TWVzc2FnZSA9IHRydWU7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImNsb3NlQWNjb3VudFVubG9ja01vZGFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZUFjY291bnRVbmxvY2tNb2RhbCgpIHsKICAgICAgdGhpcy5mb3JtSXRlbXMuZW5jcnlwdE1lc3NhZ2UgPSBmYWxzZTsKICAgICAgdGhpcy5oYXNBY2NvdW50VW5sb2NrTW9kYWwgPSBmYWxzZTsKICAgIH0KICAgIC8qKgogICAgICogQ2FsY3VsYXRlcyB0aGUgZHluYW1pYyBmZWVzIGJhc2VkIG9uIHRoZSB0eHMgc2l6ZQogICAgICogKi8KCiAgfSwgewogICAga2V5OiAiY2FsY3VsYXRlRHluYW1pY0ZlZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZUR5bmFtaWNGZWVzKCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHRoaXMuY3JlYXRlVHJhbnNhY3Rpb25Db21tYW5kRm9yRmVlKGZlZXNDb25maWcubWVkaWFuKS5nZXRUb3RhbE1heEZlZSgpLnN1YnNjcmliZShmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgcmV0dXJuIF90aGlzOS5jYWxjdWxhdGVkUmVjb21tZW5kZWRGZWUgPSB2YWwuY29tcGFjdCgpOwogICAgICB9KTsKICAgICAgdGhpcy5jcmVhdGVUcmFuc2FjdGlvbkNvbW1hbmRGb3JGZWUoZmVlc0NvbmZpZy5oaWdoZXN0KS5nZXRUb3RhbE1heEZlZSgpLnN1YnNjcmliZShmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgcmV0dXJuIF90aGlzOS5jYWxjdWxhdGVkSGlnaGVzdEZlZSA9IHZhbC5jb21wYWN0KCk7CiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgVHJhbnNhY3Rpb25Db21tYW5kIG9iamVjdCB0byBjYWxjdWxhdGUgdG90YWwgZmVlCiAgICAgKiBmb3IgdGhlIGdpdmVuIGR5bmFtaWMgZmVlIChSZWNvbW1lbmRlZC9IaWdoZXN0KQogICAgICogQHBhcmFtIHtudW1iZXJ9IG1heEZlZQogICAgICovCgogIH0sIHsKICAgIGtleTogImNyZWF0ZVRyYW5zYWN0aW9uQ29tbWFuZEZvckZlZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVHJhbnNhY3Rpb25Db21tYW5kRm9yRmVlKG1heEZlZSkgewogICAgICB2YXIgdHJhbnNhY3Rpb25zID0gdGhpcy5nZXRUcmFuc2FjdGlvbnMoKS5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICAvL0B0cy1pZ25vcmUKICAgICAgICB0Lm1heEZlZSA9IFVJbnQ2NC5mcm9tVWludChtYXhGZWUpOwogICAgICAgIHJldHVybiB0OwogICAgICB9KTsKICAgICAgdmFyIG1vZGUgPSB0aGlzLmdldFRyYW5zYWN0aW9uQ29tbWFuZE1vZGUodHJhbnNhY3Rpb25zKTsKICAgICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkNvbW1hbmQobW9kZSwgdGhpcy5zZWxlY3RlZFNpZ25lciwgdGhpcy5jdXJyZW50U2lnbmVyUHVibGljS2V5LCB0cmFuc2FjdGlvbnMsIHRoaXMubmV0d29ya01vc2FpYywgdGhpcy5nZW5lcmF0aW9uSGFzaCwgdGhpcy5lcG9jaEFkanVzdG1lbnQsIHRoaXMubmV0d29ya1R5cGUsIHRoaXMubmV0d29ya0NvbmZpZ3VyYXRpb24sIHRoaXMudHJhbnNhY3Rpb25GZWVzLCB0aGlzLmN1cnJlbnRTaWduZXJNdWx0aXNpZ0luZm8gPyB0aGlzLmN1cnJlbnRTaWduZXJNdWx0aXNpZ0luZm8ubWluQXBwcm92YWwgOiB0aGlzLnNlbGVjdGVkU2lnbmVyLnJlcXVpcmVkQ29zaWduYXR1cmVzKTsKICAgIH0KICAgIC8qKgogICAgICogUmVzZXRzIGNhbGN1bGF0ZWQgZHluYW1pYyBmZWVzCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVzZXREeW5hbWljRmVlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXREeW5hbWljRmVlcygpIHsKICAgICAgdGhpcy5jYWxjdWxhdGVkUmVjb21tZW5kZWRGZWUgPSAwOwogICAgICB0aGlzLmNhbGN1bGF0ZWRIaWdoZXN0RmVlID0gMDsKICAgIH0KICAgIC8qKgogICAgICogUmVzZXQgZW5jcnlwdGVkIG1lc3NhZ2UKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZXNldEVuY3J5cHRlZE1lc3NhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0RW5jcnlwdGVkTWVzc2FnZSgpIHsKICAgICAgdGhpcy5lbmN5cHRlZE1lc3NhZ2UgPSBudWxsOwogICAgICB0aGlzLmZvcm1JdGVtcy5lbmNyeXB0TWVzc2FnZSA9IGZhbHNlOwogICAgICB0aGlzLmhhc0FjY291bnRVbmxvY2tNb2RhbCA9IGZhbHNlOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnYWNjb3VudC9HRVRfUkVDSVBJRU5UJywgbnVsbCk7CiAgICB9CiAgICAvKioKICAgICAqIGVtaXQgZm9ybUl0ZW1zIHZhbHVlcyB0byBhZ2dyZWdhdGUgdHJhbnNhY3Rpb24gZm9ybSB0byBiZSBzYXZlZCBpbiBzdG9yYWdlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZW1pdFRvQWdncmVnYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0VG9BZ2dyZWdhdGUoKSB7CiAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9ucyAmJiB0aGlzLnRyYW5zYWN0aW9uc1swXSkgewogICAgICAgIHRoaXMuZm9ybUl0ZW1zLm1vc2FpY3MgPSB0aGlzLnRyYW5zYWN0aW9uc1swXS5tb3NhaWNzOwogICAgICAgIHRoaXMuZm9ybUl0ZW1zLnNpZ25lclB1YmxpY0tleSA9IHRoaXMuY3VycmVudFNpZ25lclB1YmxpY0tleTsKICAgICAgICB0aGlzLiRlbWl0KCd0eElucHV0JywgdGhpcy5mb3JtSXRlbXMpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAibW91bnRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgICAgaWYgKHRoaXMuaXNBZ2dyZWdhdGUgJiYgdGhpcy52YWx1ZSkgewogICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5mb3JtSXRlbXMsIHRoaXMudmFsdWUpOwogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIHdhdGNoIHRpdGxlIHRvIGNoYW5nZSBmb3JtIGl0ZW1zIG9uIHNlbGVjdCBkaWZmZXJlbnQgdHJhbnNhY3Rpb25zCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25UaXRsZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25UaXRsZUNoYW5nZSgpIHsKICAgICAgaWYgKHRoaXMuaXNBZ2dyZWdhdGUgJiYgdGhpcy52YWx1ZSkgewogICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5mb3JtSXRlbXMsIHRoaXMudmFsdWUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiaW5zdGFudGlhdGVkUmVjaXBpZW50IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgcmVjaXBpZW50UmF3ID0gdGhpcy5mb3JtSXRlbXMucmVjaXBpZW50UmF3OwoKICAgICAgaWYgKEFkZHJlc3NWYWxpZGF0b3IudmFsaWRhdGUocmVjaXBpZW50UmF3KSkgewogICAgICAgIHJldHVybiBBZGRyZXNzLmNyZWF0ZUZyb21SYXdBZGRyZXNzKHJlY2lwaWVudFJhdyk7CiAgICAgIH0gZWxzZSBpZiAoQWxpYXNWYWxpZGF0b3IudmFsaWRhdGUocmVjaXBpZW50UmF3KSkgewogICAgICAgIHJldHVybiBuZXcgTmFtZXNwYWNlSWQocmVjaXBpZW50UmF3KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImhhc0FjY291bnRVbmxvY2tNb2RhbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2hvd1VubG9ja0FjY291bnRNb2RhbDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChmKSB7CiAgICAgIHRoaXMuc2hvd1VubG9ja0FjY291bnRNb2RhbCA9IGY7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRm9ybVRyYW5zZmVyVHJhbnNhY3Rpb25UczsKfShGb3JtVHJhbnNhY3Rpb25CYXNlKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogbnVsbAp9KV0sIEZvcm1UcmFuc2ZlclRyYW5zYWN0aW9uVHMucHJvdG90eXBlLCAicmVjaXBpZW50Iiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogbnVsbAp9KV0sIEZvcm1UcmFuc2ZlclRyYW5zYWN0aW9uVHMucHJvdG90eXBlLCAibWVzc2FnZSIsIHZvaWQgMCk7CgpfX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IGZhbHNlCn0pXSwgRm9ybVRyYW5zZmVyVHJhbnNhY3Rpb25Ucy5wcm90b3R5cGUsICJoaWRlU3VibWl0Iiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogZmFsc2UKfSldLCBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzLnByb3RvdHlwZSwgImhpZGVTaWduZXIiLCB2b2lkIDApOwoKX19kZWNvcmF0ZShbUHJvcCh7CiAgImRlZmF1bHQiOiBmYWxzZQp9KV0sIEZvcm1UcmFuc2ZlclRyYW5zYWN0aW9uVHMucHJvdG90eXBlLCAic2hvd1RyYW5zYWN0aW9uQWN0aW9ucyIsIHZvaWQgMCk7CgpfX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgcmV0dXJuIHt9OwogIH0KfSldLCBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzLnByb3RvdHlwZSwgInZhbHVlIiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogJycKfSldLCBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzLnByb3RvdHlwZSwgInRpdGxlIiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogZmFsc2UKfSldLCBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzLnByb3RvdHlwZSwgImlzQWdncmVnYXRlIiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdzZWxlY3RlZFNpZ25lcicpXSwgRm9ybVRyYW5zZmVyVHJhbnNhY3Rpb25Ucy5wcm90b3R5cGUsICJvblNlbGVjdGVkU2lnbmVyQ2hhbmdlIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtXYXRjaCgndGl0bGUnLCB7CiAgaW1tZWRpYXRlOiB0cnVlCn0pXSwgRm9ybVRyYW5zZmVyVHJhbnNhY3Rpb25Ucy5wcm90b3R5cGUsICJvblRpdGxlQ2hhbmdlIiwgbnVsbCk7CgpGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzID0gX19kZWNvcmF0ZShbQ29tcG9uZW50KHsKICBjb21wb25lbnRzOiB7CiAgICBBbW91bnRJbnB1dDogQW1vdW50SW5wdXQsCiAgICBGb3JtV3JhcHBlcjogRm9ybVdyYXBwZXIsCiAgICBNZXNzYWdlSW5wdXQ6IE1lc3NhZ2VJbnB1dCwKICAgIE1vZGFsVHJhbnNhY3Rpb25Db25maXJtYXRpb246IE1vZGFsVHJhbnNhY3Rpb25Db25maXJtYXRpb24sCiAgICBNb3NhaWNBdHRhY2htZW50SW5wdXQ6IE1vc2FpY0F0dGFjaG1lbnRJbnB1dCwKICAgIE1vc2FpY1NlbGVjdG9yOiBNb3NhaWNTZWxlY3RvciwKICAgIFJlY2lwaWVudElucHV0OiBSZWNpcGllbnRJbnB1dCwKICAgIFNpZ25lclNlbGVjdG9yOiBTaWduZXJTZWxlY3RvciwKICAgIFZhbGlkYXRpb25PYnNlcnZlcjogVmFsaWRhdGlvbk9ic2VydmVyLAogICAgTWF4RmVlQW5kU3VibWl0OiBNYXhGZWVBbmRTdWJtaXQsCiAgICBGb3JtUm93OiBGb3JtUm93LAogICAgTW9kYWxUcmFuc2FjdGlvblVyaUltcG9ydDogTW9kYWxUcmFuc2FjdGlvblVyaUltcG9ydCwKICAgIFRyYW5zYWN0aW9uVXJpRGlzcGxheTogVHJhbnNhY3Rpb25VcmlEaXNwbGF5LAogICAgUHJvdGVjdGVkUHJpdmF0ZUtleURpc3BsYXk6IFByb3RlY3RlZFByaXZhdGVLZXlEaXNwbGF5LAogICAgTW9kYWxGb3JtUHJvZmlsZVVubG9jazogTW9kYWxGb3JtUHJvZmlsZVVubG9jawogIH0sCiAgY29tcHV0ZWQ6IE9iamVjdC5hc3NpZ24oe30sIG1hcEdldHRlcnMoewogICAgY3VycmVudEhlaWdodDogJ25ldHdvcmsvY3VycmVudEhlaWdodCcsCiAgICBiYWxhbmNlTW9zYWljczogJ21vc2FpYy9iYWxhbmNlTW9zYWljcycsCiAgICBjdXJyZW50UmVjaXBpZW50OiAnYWNjb3VudC9jdXJyZW50UmVjaXBpZW50JwogIH0pKQp9KV0sIEZvcm1UcmFuc2ZlclRyYW5zYWN0aW9uVHMpOwpleHBvcnQgeyBGb3JtVHJhbnNmZXJUcmFuc2FjdGlvblRzIH07"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormTransferTransaction/FormTransferTransactionTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020-present NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport {\n    Address,\n    EncryptedMessage,\n    Message,\n    Mosaic,\n    MosaicId,\n    NamespaceId,\n    PlainMessage,\n    RawUInt64,\n    Transaction,\n    TransferTransaction,\n    UInt64,\n    Account,\n    PublicAccount,\n} from 'symbol-sdk';\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// internal dependencies\nimport { Formatters } from '@/core/utils/Formatters';\nimport { FormTransactionBase } from '@/views/forms/FormTransactionBase/FormTransactionBase';\nimport { AddressValidator, AliasValidator } from '@/core/validation/validators';\nimport { MosaicInputsManager } from './MosaicInputsManager';\nimport { ITransactionEntry } from '@/views/pages/dashboard/invoice/DashboardInvoicePageTs';\n// child components\nimport { ValidationObserver } from 'vee-validate';\n// @ts-ignore\nimport AmountInput from '@/components/AmountInput/AmountInput.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport MessageInput from '@/components/MessageInput/MessageInput.vue';\n// @ts-ignore\nimport ModalTransactionConfirmation from '@/views/modals/ModalTransactionConfirmation/ModalTransactionConfirmation.vue';\n// @ts-ignore\nimport MosaicAttachmentInput from '@/components/MosaicAttachmentInput/MosaicAttachmentInput.vue';\n// @ts-ignore\nimport MosaicSelector from '@/components/MosaicSelector/MosaicSelector.vue';\n// @ts-ignore\nimport RecipientInput from '@/components/RecipientInput/RecipientInput.vue';\n// @ts-ignore\nimport SignerSelector from '@/components/SignerSelector/SignerSelector.vue';\n// @ts-ignore\nimport MaxFeeAndSubmit from '@/components/MaxFeeAndSubmit/MaxFeeAndSubmit.vue';\n// @ts-ignore\nimport ModalTransactionUriImport from '@/views/modals/ModalTransactionUriImport/ModalTransactionUriImport.vue';\n// @ts-ignore\nimport TransactionUriDisplay from '@/components/TransactionUri/TransactionUriDisplay/TransactionUriDisplay.vue';\n// @ts-ignore\nimport ProtectedPrivateKeyDisplay from '@/components/ProtectedPrivateKeyDisplay/ProtectedPrivateKeyDisplay.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\n\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\nimport { MosaicService } from '@/services/MosaicService';\nimport { MosaicModel } from '@/core/database/entities/MosaicModel';\nimport { FilterHelpers } from '@/core/utils/FilterHelpers';\nimport { TransactionCommand } from '@/services/TransactionCommand';\nimport { feesConfig } from '@/config';\nimport { NotificationType } from '@/core/utils/NotificationType';\n\nexport interface MosaicAttachment {\n    mosaicHex: string;\n    amount: number; // Relative amount\n    id?: MosaicId;\n    name?: string;\n    uid?: number;\n}\n\n@Component({\n    components: {\n        AmountInput,\n        FormWrapper,\n        MessageInput,\n        ModalTransactionConfirmation,\n        MosaicAttachmentInput,\n        MosaicSelector,\n        RecipientInput,\n        SignerSelector,\n        ValidationObserver,\n        MaxFeeAndSubmit,\n        FormRow,\n        ModalTransactionUriImport,\n        TransactionUriDisplay,\n        ProtectedPrivateKeyDisplay,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            currentHeight: 'network/currentHeight',\n            balanceMosaics: 'mosaic/balanceMosaics',\n            currentRecipient: 'account/currentRecipient',\n        }),\n    },\n})\nexport class FormTransferTransactionTs extends FormTransactionBase {\n    @Prop({\n        default: null,\n    })\n    recipient: Address;\n\n    @Prop({\n        default: null,\n    })\n    message: Message;\n\n    @Prop({\n        default: false,\n    })\n    hideSubmit: boolean;\n\n    @Prop({\n        default: false,\n    })\n    hideSigner: boolean;\n\n    @Prop({\n        default: false,\n    })\n    showTransactionActions: boolean;\n\n    @Prop({\n        default: () => ({}),\n    })\n    value: any;\n\n    @Prop({\n        default: '',\n    })\n    title: string;\n\n    @Prop({\n        default: false,\n    })\n    isAggregate: boolean;\n\n    /// end-region component properties\n\n    /**\n     * Formatters helpers\n     * @var {Formatters}\n     */\n    public formatters = Formatters;\n\n    /**\n     * Form items\n     * @var {any}\n     */\n    public formItems = {\n        signerAddress: '',\n        attachedMosaics: [],\n        recipientRaw: '',\n        recipient: null,\n        selectedMosaicHex: '',\n        relativeAmount: 0,\n        messagePlain: '',\n        encryptMessage: false,\n        maxFee: 0,\n        mosaics: [],\n        signerPublicKey: '',\n    };\n\n    public currentHeight: number;\n\n    protected mosaicInputsManager;\n\n    private balanceMosaics: MosaicModel[];\n\n    /**\n     * Whether ModalTransactionUriImport is visible\n     */\n    private isImportTransactionUriModalVisible = false;\n\n    /**\n     * Transaction imported via transaction URI\n     */\n    private importedTransaction: Transaction;\n\n    /**\n     * Holds the just in time transactions\n     */\n    public transactions: TransferTransaction[] = [];\n\n    /**\n     * Calculated recommended fee based on the txs size\n     */\n    private calculatedRecommendedFee: number = 0;\n\n    /**\n     * Calculated highest fee based on the txs size\n     */\n    private calculatedHighestFee: number = 0;\n\n    /**\n     * Current recipient account info\n     */\n    private currentRecipient: PublicAccount;\n\n    private encyptedMessage: Message;\n\n    private showUnlockAccountModal = false;\n\n    /**\n     * Reset the form with properties\n     * @return {void}\n     */\n    protected resetForm() {\n        // - reset attached mosaics\n        this.formItems.attachedMosaics = [];\n\n        // - set default form values\n        this.formItems.signerAddress = this.selectedSigner ? this.selectedSigner.address.plain() : this.currentAccount.address;\n        this.formItems.selectedMosaicHex = this.networkMosaic.toHex();\n        // default currentAccount Address to recipientRaw\n        if (this.$route.path.indexOf('invoice') > -1) {\n            this.formItems.recipientRaw = this.currentAccount.address || '';\n        } else {\n            this.formItems.recipientRaw = !!this.recipient ? this.recipient.plain() : '';\n        }\n        this.formItems.recipient = !!this.recipient ? this.recipient : null;\n\n        const currentMosaics = this.currentMosaicList();\n\n        const attachedMosaics: MosaicAttachment[] = [\n            {\n                id: new MosaicId(this.networkCurrency.mosaicIdHex),\n                mosaicHex: this.networkCurrency.mosaicIdHex,\n                name: this.networkCurrency.namespaceIdFullname,\n                amount: 0,\n                uid: Math.floor(Math.random() * 10e6), // used to index dynamic inputs\n            },\n        ];\n\n        this.formItems.messagePlain = this.message ? Formatters.hexToUtf8(this.message.payload) : '';\n        this.formItems.encryptMessage = false;\n        this.encyptedMessage = null;\n        this.showUnlockAccountModal = false;\n        // - maxFee must be absolute\n        this.formItems.maxFee = this.defaultFee;\n        // - initialize mosaics input manager\n        this.mosaicInputsManager = MosaicInputsManager.initialize(currentMosaics);\n\n        // transaction details passed via router\n        if (this.$route.params.transaction || this.importedTransaction) {\n            // @ts-ignore\n            this.setTransactions([!!this.importedTransaction ? this.importedTransaction : this.$route.params.transaction]);\n            Vue.nextTick(() => {\n                this.formItems.attachedMosaics.forEach((attachedMosaic) => {\n                    this.mosaicInputsManager.setSlot(attachedMosaic.mosaicHex, attachedMosaic.uid);\n                });\n            });\n        } else {\n            // - set attachedMosaics and allocate slots\n            Vue.nextTick().then(async () => {\n                await attachedMosaics.forEach((attachedMosaic, index) => {\n                    this.mosaicInputsManager.setSlot(attachedMosaic.mosaicHex, attachedMosaic.uid);\n                    Vue.set(this.formItems.attachedMosaics, index, attachedMosaic);\n                });\n            });\n        }\n        this.triggerChange();\n    }\n\n    /**\n     * Returns the mosaic list of the current account or current signer\n     * depending on the multisig situation\n     * @protected\n     * @returns\n     */\n    protected currentMosaicList(): MosaicModel[] {\n        // filter out expired mosaics\n        return this.balanceMosaics.filter((mosaicInfo) => {\n            // calculate expiration\n            const expiration = MosaicService.getExpiration(\n                mosaicInfo,\n                this.currentHeight,\n                this.networkConfiguration.blockGenerationTargetTime,\n            );\n            // skip if mosaic is expired\n            return expiration !== 'expired';\n        });\n    }\n\n    /**\n     * Getter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @return {TransferTransaction[]}\n     */\n    protected getTransactions(): TransferTransaction[] {\n        const mosaicsInfo = this.$store.getters['mosaic/mosaics'] as MosaicModel[];\n        const mosaics = this.formItems.attachedMosaics\n            .filter(({ uid }) => uid) // filter out null values\n            .map(\n                (spec: MosaicAttachment): Mosaic => {\n                    const info = mosaicsInfo.find((i) => i.mosaicIdHex === spec.mosaicHex);\n                    const div = info ? info.divisibility : 0;\n                    // - format amount to absolute\n                    return new Mosaic(new MosaicId(RawUInt64.fromHex(spec.mosaicHex)), UInt64.fromUint(spec.amount * Math.pow(10, div)));\n                },\n            );\n        return [\n            TransferTransaction.create(\n                this.createDeadline(),\n                this.instantiatedRecipient,\n                mosaics.length ? mosaics : [],\n                this.formItems.encryptMessage ? this.encyptedMessage : PlainMessage.create(this.formItems.messagePlain || ''),\n                this.networkType,\n                UInt64.fromUint(this.formItems.maxFee),\n            ),\n        ];\n    }\n\n    /**\n     * Setter for TRANSFER transactions that will be staged\n     * @see {FormTransactionBase}\n     * @param {TransferTransaction[]} transactions\n     * @throws {Error} If not overloaded in derivate component\n     */\n    protected setTransactions(transactions: TransferTransaction[]) {\n        // - this form creates only 1 transaction\n        const transaction = transactions.shift();\n\n        // - populate recipient\n        this.formItems.recipientRaw =\n            transaction.recipientAddress instanceof NamespaceId\n                ? transaction.recipientAddress.fullName\n                : transaction.recipientAddress.plain();\n\n        // - populate attached mosaics\n        this.formItems.attachedMosaics = this.mosaicsToAttachments(transaction.mosaics);\n\n        // - populate message\n        this.formItems.messagePlain = transaction.message.payload;\n\n        // - populate maxFee\n        this.formItems.maxFee = transaction.maxFee.compact();\n    }\n\n    /// region computed properties getter/setter\n    /**\n     * Recipient used in the transaction\n     * @readonly\n     * @protected\n     * @type {(Address | NamespaceId)}\n     */\n    protected get instantiatedRecipient(): Address | NamespaceId {\n        const { recipientRaw } = this.formItems;\n        if (AddressValidator.validate(recipientRaw)) {\n            return Address.createFromRawAddress(recipientRaw);\n        } else if (AliasValidator.validate(recipientRaw)) {\n            return new NamespaceId(recipientRaw);\n        } else {\n            return null;\n        }\n    }\n\n    protected get hasAccountUnlockModal(): boolean {\n        return this.showUnlockAccountModal;\n    }\n\n    protected set hasAccountUnlockModal(f: boolean) {\n        this.showUnlockAccountModal = f;\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Hook called when the child component MosaicAttachmentDisplay triggers\n     * the event 'delete'\n     * @return {void}\n     */\n    public onDeleteMosaic(id: MosaicId) {\n        const updatedAttachedMosaics = [...this.formItems.attachedMosaics].filter(({ mosaicHex }) => mosaicHex !== id.toHex());\n\n        // fixes reactivity on attachedMosaics (observer resolution)\n        Vue.set(this.formItems, 'attachedMosaics', updatedAttachedMosaics);\n    }\n\n    /**\n     * Hook called when the child component ButtonAdd triggers\n     * the event 'click'\n     * @return {void}\n     */\n    protected onMosaicInputChange(payload: { mosaicAttachment: MosaicAttachment; inputIndex: number }): void {\n        const { mosaicAttachment, inputIndex } = payload;\n\n        // set slot\n        this.mosaicInputsManager.setSlot(mosaicAttachment.mosaicHex, inputIndex);\n\n        // update formItems\n        const newAttachedMosaics = [...this.formItems.attachedMosaics];\n        const indexToUpdate = newAttachedMosaics.findIndex(({ uid }) => uid == inputIndex);\n        newAttachedMosaics[indexToUpdate] = mosaicAttachment;\n        Vue.set(this.formItems, 'attachedMosaics', newAttachedMosaics);\n        this.triggerChange();\n    }\n\n    /**\n     * Handle deletion of a mosaic input\n     * @protected\n     * @param {number} inputIndex\n     */\n    protected onDeleteMosaicInput(index: number): void {\n        // unset mosaic input slot\n        this.mosaicInputsManager.unsetSlot(index);\n\n        // update formItems, set input uid to null\n        const indexToUpdate = this.formItems.attachedMosaics.findIndex(({ uid }) => uid == index);\n        Vue.set(this.formItems.attachedMosaics, indexToUpdate, { uid: null });\n        // delete the last one in order to re-render the list\n        this.formItems.attachedMosaics.pop();\n        this.triggerChange();\n    }\n\n    /**\n     * Internal helper to format a {Mosaic} entry into\n     * an array of MosaicAttachment used in this form.\n     * @internal\n     * @param {Mosaic[]} mosaics\n     * @return {MosaicAttachment[]}\n     */\n    private mosaicsToAttachments(mosaics: Mosaic[]): MosaicAttachment[] {\n        return mosaics\n            .map((mosaic) => {\n                const info = this.balanceMosaics.find((m) => mosaic.id.toHex() === m.mosaicIdHex);\n                if (!info) {\n                    return null;\n                }\n                // amount will be converted to RELATIVE\n                return {\n                    id: new MosaicId(info.mosaicIdHex), // XXX resolve mosaicId from namespaceId\n                    mosaicHex: info.mosaicIdHex, // XXX resolve mosaicId from namespaceId\n                    name: info.name,\n                    amount: mosaic.amount.compact() / Math.pow(10, info.divisibility),\n                    uid: Math.floor(Math.random() * 10e6), // used to index dynamic inputs\n                };\n            })\n            .filter((a) => a);\n    }\n\n    /**\n     *  Hook called when adding a new mosaic attachment input\n     * @protected\n     */\n    protected addMosaicAttachmentInput(): void {\n        if (!this.mosaicInputsManager.hasFreeSlots()) {\n            return;\n        }\n\n        // generate id and prepare mosaic for slot\n        const uid = Math.floor(Math.random() * 10e6);\n        const [mosaicToAffectToNewInput] = this.mosaicInputsManager.getMosaicsBySlot(uid);\n\n        // update inputs manager and form items\n        this.mosaicInputsManager.setSlot(mosaicToAffectToNewInput, uid);\n        this.formItems.attachedMosaics.push({\n            mosaicHex: mosaicToAffectToNewInput,\n            amount: 0,\n            uid,\n        });\n\n        this.triggerChange();\n    }\n\n    /**\n     * Handler when changing message\n     */\n    onChangeMessage() {\n        this.triggerChange();\n    }\n\n    /**\n     * Handler when changing recipient\n     */\n    onChangeRecipient() {\n        // filter tags\n        this.formItems.recipientRaw = FilterHelpers.stripFilter(this.formItems.recipientRaw);\n        if (Address.isValidRawAddress(this.formItems.recipientRaw)) {\n            this.$store.dispatch('account/GET_RECIPIENT', Address.createFromRawAddress(this.formItems.recipientRaw)).then(() => {\n                if (!this.currentRecipient?.publicKey || /^0*$/.test(this.currentRecipient.publicKey)) {\n                    this.resetEncryptedMessage();\n                }\n            });\n        } else {\n            this.resetEncryptedMessage();\n        }\n        this.triggerChange();\n    }\n\n    /**\n     * Handler when changing max fee\n     */\n    onChangeMaxFee() {\n        if (this.formItems.recipientRaw && this.formItems.recipientRaw !== '') {\n            this.triggerChange();\n        }\n    }\n\n    triggerChange() {\n        if (Address.isValidRawAddress(this.formItems.recipientRaw)) {\n            this.transactions = this.getTransactions();\n            // avoid error\n            if (this.transactions) {\n                const data: ITransactionEntry[] = [];\n                this.transactions.map((item: TransferTransaction) => {\n                    data.push({\n                        transaction: item,\n                        attachments: this.mosaicsToAttachments(item.mosaics),\n                    });\n                });\n\n                this.$emit('onTransactionsChange', data);\n                this.calculateDynamicFees();\n            }\n        } else {\n            this.transactions = null;\n            this.resetDynamicFees();\n            this.resetEncryptedMessage();\n        }\n    }\n\n    /**\n     * Resetting the form when choosing a multisig signer and changing multisig signer\n     * Is necessary to make the mosaic inputs reactive\n     */\n    @Watch('selectedSigner')\n    onSelectedSignerChange() {\n        if (this.isMultisigMode()) {\n            this.resetForm();\n        }\n    }\n\n    /**\n     * ModalTransactionUriImport modal page close event handler\n     */\n    onImportTransactionURIModalClose() {\n        this.isImportTransactionUriModalVisible = false;\n    }\n\n    /**\n     * Import transactionURI complete event handler\n     * @param transaction transaction to be imported\n     */\n    onImportTransaction(transaction: Transaction) {\n        this.importedTransaction = transaction;\n        this.resetForm();\n    }\n\n    /**\n     * Encrypt message checkbox click\n     */\n    onEncryptionChange() {\n        if (this.formItems.encryptMessage) {\n            if (!this.currentRecipient?.publicKey) {\n                this.$store\n                    .dispatch('notification/ADD_ERROR', this.$t(NotificationType.RECIPIENT_PUBLIC_KEY_INVALID_ERROR))\n                    .then(() => (this.formItems.encryptMessage = false));\n            } else if (!this.formItems.messagePlain) {\n                this.$store\n                    .dispatch('notification/ADD_ERROR', this.$t(NotificationType.ENCRYPTED_MESSAGE_EMPTY_ERROR))\n                    .then(() => (this.formItems.encryptMessage = false));\n            } else {\n                this.hasAccountUnlockModal = true;\n            }\n        } else {\n            this.encyptedMessage = null;\n            this.hasAccountUnlockModal = false;\n        }\n    }\n\n    /**\n     * Hook called when the account has been unlocked\n     * @param {Account} account\n     * @return {boolean}\n     */\n    onAccountUnlocked(account: Account): boolean {\n        this.hasAccountUnlockModal = false;\n        this.encyptedMessage = this.formItems.messagePlain\n            ? EncryptedMessage.create(this.formItems.messagePlain, this.currentRecipient, account.privateKey)\n            : PlainMessage.create('');\n        this.formItems.encryptMessage = true;\n        return true;\n    }\n\n    closeAccountUnlockModal() {\n        this.formItems.encryptMessage = false;\n        this.hasAccountUnlockModal = false;\n    }\n\n    /**\n     * Calculates the dynamic fees based on the txs size\n     * */\n    private calculateDynamicFees() {\n        this.createTransactionCommandForFee(feesConfig.median)\n            .getTotalMaxFee()\n            .subscribe((val) => (this.calculatedRecommendedFee = val.compact()));\n\n        this.createTransactionCommandForFee(feesConfig.highest)\n            .getTotalMaxFee()\n            .subscribe((val) => (this.calculatedHighestFee = val.compact()));\n    }\n\n    /**\n     * Creates a TransactionCommand object to calculate total fee\n     * for the given dynamic fee (Recommended/Highest)\n     * @param {number} maxFee\n     */\n    private createTransactionCommandForFee(maxFee: number): TransactionCommand {\n        const transactions = this.getTransactions().map((t) => {\n            //@ts-ignore\n            t.maxFee = UInt64.fromUint(maxFee);\n            return t;\n        });\n\n        const mode = this.getTransactionCommandMode(transactions);\n        return new TransactionCommand(\n            mode,\n            this.selectedSigner,\n            this.currentSignerPublicKey,\n            transactions,\n            this.networkMosaic,\n            this.generationHash,\n            this.epochAdjustment,\n            this.networkType,\n            this.networkConfiguration,\n            this.transactionFees,\n            this.currentSignerMultisigInfo ? this.currentSignerMultisigInfo.minApproval : this.selectedSigner.requiredCosignatures,\n        );\n    }\n\n    /**\n     * Resets calculated dynamic fees\n     */\n    private resetDynamicFees() {\n        this.calculatedRecommendedFee = 0;\n        this.calculatedHighestFee = 0;\n    }\n\n    /**\n     * Reset encrypted message\n     */\n    private resetEncryptedMessage() {\n        this.encyptedMessage = null;\n        this.formItems.encryptMessage = false;\n        this.hasAccountUnlockModal = false;\n        this.$store.dispatch('account/GET_RECIPIENT', null);\n    }\n    /**\n     * emit formItems values to aggregate transaction form to be saved in storage\n     */\n    public emitToAggregate() {\n        if (this.transactions && this.transactions[0]) {\n            this.formItems.mosaics = this.transactions[0].mosaics;\n            this.formItems.signerPublicKey = this.currentSignerPublicKey;\n            this.$emit('txInput', this.formItems);\n        }\n    }\n    mounted() {\n        if (this.isAggregate && this.value) {\n            Object.assign(this.formItems, this.value);\n        }\n    }\n    /**\n     * watch title to change form items on select different transactions\n     */\n    @Watch('title', { immediate: true })\n    onTitleChange() {\n        if (this.isAggregate && this.value) {\n            Object.assign(this.formItems, this.value);\n        }\n    }\n}\n"],"sourceRoot":""}]}
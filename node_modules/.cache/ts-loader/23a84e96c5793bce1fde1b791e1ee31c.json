{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalBackupProfile/ModalBackupProfileTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalBackupProfile/ModalBackupProfileTs.ts","mtime":1611927227721},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgppbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICIvbW50L2MvVXNlcnMvanVzdGkvRGVza3RvcC9TVVBFUkhPVy9TeW1ib2xXYWxsZXQvbGFyZWQtd2FsbGV0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKaW1wb3J0IHsgX19hd2FpdGVyLCBfX2RlY29yYXRlIH0gZnJvbSAidHNsaWIiOwovKgogKiBDb3B5cmlnaHQgMjAyMCBORU0gKGh0dHBzOi8vbmVtLmlvKQogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICoKICovCgppbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IENyeXB0bywgQWRkcmVzcyB9IGZyb20gJ3N5bWJvbC1zZGsnOyAvLyBjaGlsZCBjb21wb25lbnRzCi8vIEB0cy1pZ25vcmUKCmltcG9ydCBGb3JtUHJvZmlsZVVubG9jayBmcm9tICdAL3ZpZXdzL2Zvcm1zL0Zvcm1Qcm9maWxlVW5sb2NrL0Zvcm1Qcm9maWxlVW5sb2NrLnZ1ZSc7CmltcG9ydCB7IE1uZW1vbmljUGFzc1BocmFzZSB9IGZyb20gJ3N5bWJvbC1oZC13YWxsZXRzJzsKaW1wb3J0IHsgTGFyZWRQYXBlcldhbGxldCB9IGZyb20gJ2xhcmVkLXBhcGVyLXdhbGxldHMnOwppbXBvcnQgeyBBY2NvdW50U2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvQWNjb3VudFNlcnZpY2UnOwppbXBvcnQgeyBVSUhlbHBlcnMgfSBmcm9tICdAL2NvcmUvdXRpbHMvVUlIZWxwZXJzJzsKCnZhciBNb2RhbEJhY2t1cFByb2ZpbGVUcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhNb2RhbEJhY2t1cFByb2ZpbGVUcywgX1Z1ZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTW9kYWxCYWNrdXBQcm9maWxlVHMpOwoKICBmdW5jdGlvbiBNb2RhbEJhY2t1cFByb2ZpbGVUcygpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxCYWNrdXBQcm9maWxlVHMpOwoKICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAvKioKICAgICAqIFdoZXRoZXIgYWNjb3VudCBpcyB1bmxvY2tlZAogICAgICovCgogICAgX3RoaXMuYWNjb3VudFVubG9ja2VkID0gZmFsc2U7CiAgICAvKioKICAgICAqIE1uZW1vbmljIHdvcmRzIChzcGFjZSBkZWxpbWl0ZWQpCiAgICAgKi8KCiAgICBfdGhpcy5wbGFpbk1uZW1vbmljID0gbnVsbDsKICAgIF90aGlzLmRvd25sb2FkSW5Qcm9ncmVzcyA9IGZhbHNlOwogICAgcmV0dXJuIF90aGlzOwogIH0KICAvKioKICAgKiBWaXNpYmlsaXR5IHN0YXRlCiAgICogQHR5cGUge2Jvb2xlYW59CiAgICovCgoKICBfY3JlYXRlQ2xhc3MoTW9kYWxCYWNrdXBQcm9maWxlVHMsIFt7CiAgICBrZXk6ICJvbkFjY291bnRVbmxvY2tlZCIsCgogICAgLyoqCiAgICAgKiBIb29rIGNhbGxlZCB3aGVuIHRoZSBhY2NvdW50IGhhcyBiZWVuIHVubG9ja2VkCiAgICAgKiBAcGFyYW0ge0FjY291bnR9IGFjY291bnQKICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWNjb3VudFVubG9ja2VkKHBheWxvYWQpIHsKICAgICAgLy8gZGVjcnlwdCBzZWVkCiAgICAgIHZhciBlbmNTZWVkID0gdGhpcy5jdXJyZW50UHJvZmlsZS5zZWVkOwogICAgICB0aGlzLnBsYWluTW5lbW9uaWMgPSBDcnlwdG8uZGVjcnlwdChlbmNTZWVkLCBwYXlsb2FkLnBhc3N3b3JkLnZhbHVlKTsKICAgICAgdGhpcy5hY2NvdW50VW5sb2NrZWQgPSB0cnVlOwogICAgICB0aGlzLmtub3duQWNjb3VudEluZm9zID0gdGhpcy5rbm93bkFjY291bnRzLm1hcChmdW5jdGlvbiAoYWNjb3VudCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lOiBhY2NvdW50Lm5hbWUsCiAgICAgICAgICBhZGRyZXNzOiBBZGRyZXNzLmNyZWF0ZUZyb21SYXdBZGRyZXNzKGFjY291bnQuYWRkcmVzcykucHJldHR5KCksCiAgICAgICAgICBwdWJsaWNLZXk6IGFjY291bnQucHVibGljS2V5LAogICAgICAgICAgcHJpdmF0ZUtleTogQ3J5cHRvLmRlY3J5cHQoYWNjb3VudC5lbmNyeXB0ZWRQcml2YXRlS2V5LCBwYXlsb2FkLnBhc3N3b3JkLnZhbHVlKQogICAgICAgIH07CiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBIb29rIGNhbGxlZCB3aGVuIGNoaWxkIGNvbXBvbmVudCBGb3JtUHJvZmlsZVVubG9jayBvcgogICAgICogSGFyZHdhcmVDb25maXJtYXRpb25CdXR0b24gZW1pdCB0aGUgJ2Vycm9yJyBldmVudC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlCiAgICAgKiBAcmV0dXJuIHt2b2lkfQogICAgICovCgogIH0sIHsKICAgIGtleTogIm9uRXJyb3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHsKICAgICAgdGhpcy4kZW1pdCgnZXJyb3InLCBlcnJvcik7CiAgICB9CiAgICAvKioKICAgICAqIExpZmUgY3ljbGUgaG9vawogICAgICovCgogIH0sIHsKICAgIGtleTogImNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgIHRoaXMuYWNjb3VudFNlcnZpY2UgPSBuZXcgQWNjb3VudFNlcnZpY2UoKTsKICAgIH0KICAgIC8qKgogICAgICogSG9vayBjYWxsZWQgd2hlbiB0aGUgZG93bmxvYWQgYnV0dG9uIGlzIGNsaWNrZWQKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25Eb3dubG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Eb3dubG9hZCgpIHsKICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGFpbk1uZW1vbmljKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ25vdGlmaWNhdGlvbi9BRERfRVJST1InLCB0aGlzLiR0KCdtbmVtb25pY19ub3RfZm91bmQnKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIFZ1ZS5zZXQodGhpcywgJ2Rvd25sb2FkSW5Qcm9ncmVzcycsIHRydWUpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIoX3RoaXMyLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlQW5kRG93bmxvYWRQYXBlcldhbGxldCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWdWUuc2V0KHRoaXMsICdkb3dubG9hZEluUHJvZ3Jlc3MnLCBmYWxzZSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9LCA4MDApOyAvLyBsYWJvciBpbGx1c2lvbgoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CiAgICB9CiAgICAvKioKICAgICAqIEdlbmVyYXRlcyBhbmQgZG93bmxvYWRzIHBhcGVyLXdhbGxldCBmb3IgdGhlIHJvb3QgYWNjb3VudCBhbmQgdGhlIHByb2ZpbGUoa25vd24pIGFjY291bnRzCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2VuZXJhdGVBbmREb3dubG9hZFBhcGVyV2FsbGV0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUFuZERvd25sb2FkUGFwZXJXYWxsZXQoKSB7CiAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIHJvb3RBY2NvdW50LCByb290QWNjb3VudEluZm8sIHBhcGVyV2FsbGV0LCBwZGZBcnJheTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RBY2NvdW50ID0gdGhpcy5hY2NvdW50U2VydmljZS5nZXRBY2NvdW50QnlQYXRoKG5ldyBNbmVtb25pY1Bhc3NQaHJhc2UodGhpcy5wbGFpbk1uZW1vbmljKSwgdGhpcy5uZXR3b3JrVHlwZSk7CiAgICAgICAgICAgICAgICByb290QWNjb3VudEluZm8gPSB7CiAgICAgICAgICAgICAgICAgIG1uZW1vbmljOiB0aGlzLnBsYWluTW5lbW9uaWMsCiAgICAgICAgICAgICAgICAgIHJvb3RBY2NvdW50UHVibGljS2V5OiByb290QWNjb3VudC5wdWJsaWNLZXksCiAgICAgICAgICAgICAgICAgIHJvb3RBY2NvdW50QWRkcmVzczogcm9vdEFjY291bnQuYWRkcmVzcy5wcmV0dHkoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHBhcGVyV2FsbGV0ID0gbmV3IExhcmVkUGFwZXJXYWxsZXQocm9vdEFjY291bnRJbmZvLCB0aGlzLmtub3duQWNjb3VudEluZm9zLCB0aGlzLm5ldHdvcmtUeXBlLCB0aGlzLmdlbmVyYXRpb25IYXNoKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBwYXBlcldhbGxldC50b1BkZigpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBwZGZBcnJheSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFVJSGVscGVycy5kb3dubG9hZEJ5dGVzQXNGaWxlKHBkZkFycmF5LCAicGFwZXItd2FsbGV0LSIuY29uY2F0KHRoaXMuY3VycmVudFByb2ZpbGUucHJvZmlsZU5hbWUpLCAnYXBwbGljYXRpb24vcGRmJykpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvdyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZTsKICAgIH0KICAgIC8qKgogICAgICogRW1pdHMgY2xvc2UgZXZlbnQKICAgICAqLwogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7CiAgICAgIGlmICghdmFsKSB7CiAgICAgICAgdGhpcy4kZW1pdCgnY2xvc2UnKTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIE1vZGFsQmFja3VwUHJvZmlsZVRzOwp9KFZ1ZSk7CgpfX2RlY29yYXRlKFtQcm9wKHsKICBkZWZhdWx0OiBmYWxzZQp9KV0sIE1vZGFsQmFja3VwUHJvZmlsZVRzLnByb3RvdHlwZSwgInZpc2libGUiLCB2b2lkIDApOwoKTW9kYWxCYWNrdXBQcm9maWxlVHMgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHsKICAgIEZvcm1Qcm9maWxlVW5sb2NrOiBGb3JtUHJvZmlsZVVubG9jawogIH0sCiAgY29tcHV0ZWQ6IE9iamVjdC5hc3NpZ24oe30sIG1hcEdldHRlcnMoewogICAgY3VycmVudFByb2ZpbGU6ICdwcm9maWxlL2N1cnJlbnRQcm9maWxlJywKICAgIG5ldHdvcmtUeXBlOiAnbmV0d29yay9uZXR3b3JrVHlwZScsCiAgICBnZW5lcmF0aW9uSGFzaDogJ25ldHdvcmsvZ2VuZXJhdGlvbkhhc2gnLAogICAga25vd25BY2NvdW50czogJ2FjY291bnQva25vd25BY2NvdW50cycKICB9KSkKfSldLCBNb2RhbEJhY2t1cFByb2ZpbGVUcyk7CmV4cG9ydCB7IE1vZGFsQmFja3VwUHJvZmlsZVRzIH07"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalBackupProfile/ModalBackupProfileTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Account, NetworkType, Password, Crypto, Address } from 'symbol-sdk';\n// internal dependencies\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\n// child components\n// @ts-ignore\nimport FormProfileUnlock from '@/views/forms/FormProfileUnlock/FormProfileUnlock.vue';\n// resources\n// @ts-ignore\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\nimport { LaredPaperWallet, IAccountInfo, IHDAccountInfo } from 'lared-paper-wallets';\nimport { AccountService } from '@/services/AccountService';\nimport { UIHelpers } from '@/core/utils/UIHelpers';\n\n@Component({\n    components: { FormProfileUnlock },\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            networkType: 'network/networkType',\n            generationHash: 'network/generationHash',\n            knownAccounts: 'account/knownAccounts',\n        }),\n    },\n})\nexport class ModalBackupProfileTs extends Vue {\n    @Prop({\n        default: false,\n    })\n    visible: boolean;\n\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {ProfileModel}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Current networkType\n     * @see {Store.Network}\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Current generationHash\n     * @see {Store.Network}\n     * @var {string}\n     */\n    public generationHash: string;\n\n    /**\n     * Known accounts to the profile\n     */\n    public knownAccounts: AccountModel[];\n\n    /**\n     * Known accounts as paper-wallet IAccountInfo (array) type\n     * @var {IAccountInfo[]}\n     */\n    public knownAccountInfos: IAccountInfo[];\n\n    /**\n     * Whether account is unlocked\n     */\n    public accountUnlocked: boolean = false;\n\n    /**\n     * Mnemonic words (space delimited)\n     */\n    private plainMnemonic: string = null;\n\n    /**\n     * Account Service\n     * @var {AccountService}\n     */\n    public accountService: AccountService;\n\n    public downloadInProgress: boolean = false;\n\n    /**\n     * Visibility state\n     * @type {boolean}\n     */\n    get show(): boolean {\n        return this.visible;\n    }\n\n    /**\n     * Emits close event\n     */\n    set show(val) {\n        if (!val) {\n            this.$emit('close');\n        }\n    }\n\n    /**\n     * Hook called when the account has been unlocked\n     * @param {Account} account\n     */\n    public onAccountUnlocked(payload: { account: Account; password: Password }) {\n        // decrypt seed\n        const encSeed = this.currentProfile.seed;\n        this.plainMnemonic = Crypto.decrypt(encSeed, payload.password.value);\n        this.accountUnlocked = true;\n\n        this.knownAccountInfos = this.knownAccounts.map(\n            (account) =>\n                ({\n                    name: account.name,\n                    address: Address.createFromRawAddress(account.address).pretty(),\n                    publicKey: account.publicKey,\n                    privateKey: Crypto.decrypt(account.encryptedPrivateKey, payload.password.value),\n                } as IAccountInfo),\n        );\n    }\n\n    /**\n     * Hook called when child component FormProfileUnlock or\n     * HardwareConfirmationButton emit the 'error' event.\n     * @param {string} message\n     * @return {void}\n     */\n    public onError(error: string) {\n        this.$emit('error', error);\n    }\n\n    /**\n     * Life cycle hook\n     */\n    public created() {\n        this.accountService = new AccountService();\n    }\n\n    /**\n     * Hook called when the download button is clicked\n     * @return {void}\n     */\n    public async onDownload() {\n        if (!this.plainMnemonic) {\n            this.$store.dispatch('notification/ADD_ERROR', this.$t('mnemonic_not_found'));\n            return;\n        }\n        Vue.set(this, 'downloadInProgress', true);\n        setTimeout(async () => {\n            await this.generateAndDownloadPaperWallet();\n            Vue.set(this, 'downloadInProgress', false);\n        }, 800); // labor illusion\n    }\n\n    /**\n     * Generates and downloads paper-wallet for the root account and the profile(known) accounts\n     */\n    protected async generateAndDownloadPaperWallet(): Promise<boolean> {\n        const rootAccount: Account = this.accountService.getAccountByPath(new MnemonicPassPhrase(this.plainMnemonic), this.networkType);\n        const rootAccountInfo: IHDAccountInfo = {\n            mnemonic: this.plainMnemonic,\n            rootAccountPublicKey: rootAccount.publicKey,\n            rootAccountAddress: rootAccount.address.pretty(),\n        };\n\n        const paperWallet = new LaredPaperWallet(rootAccountInfo, this.knownAccountInfos, this.networkType, this.generationHash);\n        const pdfArray: Uint8Array = await paperWallet.toPdf();\n        return UIHelpers.downloadBytesAsFile(pdfArray, `paper-wallet-${this.currentProfile.profileName}`, 'application/pdf');\n    }\n}\n"],"sourceRoot":""}]}
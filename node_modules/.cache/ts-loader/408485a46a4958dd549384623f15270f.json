{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/RecipientInput/RecipientInputTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/RecipientInput/RecipientInputTs.ts","mtime":1606213958957},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7CiAgZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgewogICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsKICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7CiAgICBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsKCiAgICB0cnkgewogICAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwKICAgICAgICByZXN1bHQ7CgogICAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7CiAgICAgIHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7CgogICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsKICB9Owp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCB7IENvbXBvbmVudCwgVnVlLCBQcm9wIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsgLy8gaW50ZXJuYWwgZGVwZW5kZW5jaWVzCgppbXBvcnQgeyBWYWxpZGF0aW9uUnVsZXNldCB9IGZyb20gJ0AvY29yZS92YWxpZGF0aW9uL1ZhbGlkYXRpb25SdWxlc2V0JzsgLy8gY2hpbGQgY29tcG9uZW50cwoKaW1wb3J0IHsgVmFsaWRhdGlvblByb3ZpZGVyIH0gZnJvbSAndmVlLXZhbGlkYXRlJzsgLy8gQHRzLWlnbm9yZQoKaW1wb3J0IEVycm9yVG9vbHRpcCBmcm9tICdAL2NvbXBvbmVudHMvRXJyb3JUb29sdGlwL0Vycm9yVG9vbHRpcC52dWUnOyAvLyBAdHMtaWdub3JlCgppbXBvcnQgRm9ybVJvdyBmcm9tICdAL2NvbXBvbmVudHMvRm9ybVJvdy9Gb3JtUm93LnZ1ZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCBDb250YWN0U2VsZWN0b3IgZnJvbSAnQC9jb21wb25lbnRzL0NvbnRhY3RTZWxlY3Rvci9Db250YWN0U2VsZWN0b3IudnVlJzsKCnZhciBSZWNpcGllbnRJbnB1dFRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVnVlKSB7CiAgX2luaGVyaXRzKFJlY2lwaWVudElucHV0VHMsIF9WdWUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFJlY2lwaWVudElucHV0VHMpOwoKICBmdW5jdGlvbiBSZWNpcGllbnRJbnB1dFRzKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWNpcGllbnRJbnB1dFRzKTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgLyoqCiAgICAgKiBWYWxpZGF0aW9uIHJ1bGVzCiAgICAgKiBAdmFyIHtWYWxpZGF0aW9uUnVsZXNldH0KICAgICAqLwoKICAgIF90aGlzLnZhbGlkYXRpb25SdWxlcyA9IFZhbGlkYXRpb25SdWxlc2V0OwogICAgcmV0dXJuIF90aGlzOwogIH0gLy8vIHJlZ2lvbiBjb21wdXRlZCBwcm9wZXJ0aWVzIGdldHRlci9zZXR0ZXIKCgogIF9jcmVhdGVDbGFzcyhSZWNpcGllbnRJbnB1dFRzLCBbewogICAga2V5OiAib25TZWxlY3RDb250YWN0IiwKICAgIC8vLyBlbmQtcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgogICAgdmFsdWU6IGZ1bmN0aW9uIG9uU2VsZWN0Q29udGFjdChpZCkgewogICAgICB2YXIgY29udGFjdCA9IHRoaXMuYWRkcmVzc0Jvb2suZ2V0Q29udGFjdEJ5SWQoaWQpOwoKICAgICAgaWYgKGNvbnRhY3QpIHsKICAgICAgICB0aGlzLnJhd1ZhbHVlID0gY29udGFjdC5hZGRyZXNzOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmF3VmFsdWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGlucHV0KSB7CiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgaW5wdXQpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJlY2lwaWVudElucHV0VHM7Cn0oVnVlKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogICJkZWZhdWx0IjogbnVsbAp9KV0sIFJlY2lwaWVudElucHV0VHMucHJvdG90eXBlLCAidmFsdWUiLCB2b2lkIDApOwoKUmVjaXBpZW50SW5wdXRUcyA9IF9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgY29tcG9uZW50czogewogICAgVmFsaWRhdGlvblByb3ZpZGVyOiBWYWxpZGF0aW9uUHJvdmlkZXIsCiAgICBFcnJvclRvb2x0aXA6IEVycm9yVG9vbHRpcCwKICAgIEZvcm1Sb3c6IEZvcm1Sb3csCiAgICBDb250YWN0U2VsZWN0b3I6IENvbnRhY3RTZWxlY3RvcgogIH0sCiAgY29tcHV0ZWQ6IE9iamVjdC5hc3NpZ24oe30sIG1hcEdldHRlcnMoewogICAgbmV0d29ya1R5cGU6ICduZXR3b3JrL25ldHdvcmtUeXBlJywKICAgIGFkZHJlc3NCb29rOiAnYWRkcmVzc0Jvb2svZ2V0QWRkcmVzc0Jvb2snCiAgfSkpCn0pXSwgUmVjaXBpZW50SW5wdXRUcyk7CmV4cG9ydCB7IFJlY2lwaWVudElucHV0VHMgfTs="},{"version":3,"sources":["/home/hero/lared-wallet/src/components/RecipientInput/RecipientInputTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAeA,SAAS,SAAT,EAAoB,GAApB,EAAyB,IAAzB,QAAqC,wBAArC;AACA,SAAS,UAAT,QAA2B,MAA3B,C,CAGA;;AACA,SAAS,iBAAT,QAAkC,qCAAlC,C,CAEA;;AACA,SAAS,kBAAT,QAAmC,cAAnC,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB,C,CACA;;AACA,OAAO,OAAP,MAAoB,kCAApB,C,CACA;;AACA,OAAO,eAAP,MAA4B,kDAA5B;;AAiBA,IAAa,gBAAb;AAAA;;AAAA;;AAAA,8BAAA;AAAA;;AAAA;;;AAiBI;;;;;AAIO,UAAA,eAAA,GAAkB,iBAAlB;AArBX;AAuCC,GAvCD,CAuBI;;;AAvBJ;AAAA;AA+BI;AA/BJ,oCAiC2B,EAjC3B,EAiCqC;AAC7B,UAAM,OAAO,GAAG,KAAK,WAAL,CAAiB,cAAjB,CAAgC,EAAhC,CAAhB;;AACA,UAAI,OAAJ,EAAa;AACT,aAAK,QAAL,GAAgB,OAAO,CAAC,OAAxB;AACH;AACJ;AAtCL;AAAA;AAAA,wBAwBuB;AACf,aAAO,KAAK,KAAZ;AACH,KA1BL;AAAA,sBA4BwB,KA5BxB,EA4BqC;AAC7B,WAAK,KAAL,CAAW,OAAX,EAAoB,KAApB;AACH;AA9BL;;AAAA;AAAA,EAAsC,GAAtC,CAAA;;AAII,UAAA,CAAA,CAHC,IAAI,CAAC;AACF,aAAS;AADP,CAAD,CAGL,CAAA,E,0BAAA,E,OAAA,E,KAAc,CAAd,CAAA;;AAJS,gBAAgB,GAAA,UAAA,CAAA,CAd5B,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AACR,IAAA,kBAAkB,EAAlB,kBADQ;AAER,IAAA,YAAY,EAAZ,YAFQ;AAGR,IAAA,OAAO,EAAP,OAHQ;AAIR,IAAA,eAAe,EAAf;AAJQ,GADL;AAOP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,WAAW,EAAE,qBADH;AAEV,IAAA,WAAW,EAAE;AAFH,GAAD,CADT;AAPD,CAAD,CAcmB,CAAA,EAAhB,gBAAgB,CAAhB;SAAA,gB","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue, Prop } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { NetworkType } from 'symbol-sdk';\n\n// internal dependencies\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\n\n// child components\nimport { ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ContactSelector from '@/components/ContactSelector/ContactSelector.vue';\nimport { AddressBook } from 'symbol-address-book/AddressBook';\n\n@Component({\n    components: {\n        ValidationProvider,\n        ErrorTooltip,\n        FormRow,\n        ContactSelector,\n    },\n    computed: {\n        ...mapGetters({\n            networkType: 'network/networkType',\n            addressBook: 'addressBook/getAddressBook',\n        }),\n    },\n})\nexport class RecipientInputTs extends Vue {\n    @Prop({\n        default: null,\n    })\n    value: string;\n\n    /**\n     * Current network type\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n    /**\n     * Current address book\n     * @var {AddressBook}\n     */\n    public addressBook: AddressBook;\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /// region computed properties getter/setter\n    public get rawValue(): string {\n        return this.value;\n    }\n\n    public set rawValue(input: string) {\n        this.$emit('input', input);\n    }\n    /// end-region computed properties getter/setter\n\n    public onSelectContact(id: string) {\n        const contact = this.addressBook.getContactById(id);\n        if (contact) {\n            this.rawValue = contact.address;\n        }\n    }\n}\n"],"sourceRoot":""}]}
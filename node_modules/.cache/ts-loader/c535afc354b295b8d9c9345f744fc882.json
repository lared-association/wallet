{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/TransactionCommand.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/TransactionCommand.ts","mtime":1611927227390},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/TransactionCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport {\n    Account,\n    AggregateTransaction,\n    Deadline,\n    LockFundsTransaction,\n    Mosaic,\n    MosaicId,\n    NetworkType,\n    PublicAccount,\n    SignedTransaction,\n    Transaction,\n    TransactionFees,\n    UInt64,\n} from 'symbol-sdk';\nimport { Signer } from '@/store/Account';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\nimport { Observable, of } from 'rxjs';\nimport { AccountTransactionSigner, TransactionAnnouncerService, TransactionSigner } from '@/services/TransactionAnnouncerService';\nimport { BroadcastResult } from '@/core/transactions/BroadcastResult';\nimport { flatMap, map } from 'rxjs/operators';\n\nexport enum TransactionCommandMode {\n    SIMPLE = 'SIMPLE',\n    AGGREGATE = 'AGGREGATE',\n    MULTISIGN = 'MULTISIGN',\n    CHAINED_BINARY = 'CHAINED_BINARY',\n}\n\nexport class TransactionCommand {\n    private readonly tempAccount: Account;\n    private readonly tempTransactionSigner: TransactionSigner;\n    constructor(\n        public readonly mode: TransactionCommandMode,\n        public readonly signer: Signer,\n        public readonly signerPublicKey: string,\n        public readonly stageTransactions: Transaction[],\n        public readonly networkMosaic: MosaicId,\n        public readonly generationHash: string,\n        public readonly networkType: NetworkType,\n        public readonly epochAdjustment: number,\n        public readonly networkConfiguration: NetworkConfigurationModel,\n        public readonly transactionFees: TransactionFees,\n        public readonly requiredCosignatures: number,\n    ) {\n        this.tempAccount = Account.generateNewAccount(this.networkType);\n        this.tempTransactionSigner = new AccountTransactionSigner(this.tempAccount);\n    }\n\n    public announce(service: TransactionAnnouncerService, account: TransactionSigner): Observable<Observable<BroadcastResult>[]> {\n        return this.resolveTransactions(account).pipe(\n            flatMap((transactions) => {\n                const signedTransactions = transactions.map((t) => account.signTransaction(t, this.generationHash));\n                if (!signedTransactions.length) {\n                    return of([]);\n                }\n                if (this.mode == TransactionCommandMode.MULTISIGN) {\n                    return of([this.announceHashAndAggregateBonded(service, signedTransactions)]);\n                } else if (this.mode == TransactionCommandMode.CHAINED_BINARY) {\n                    return of([this.announceChainedBinary(service, signedTransactions)]);\n                } else {\n                    return of(this.announceSimple(service, signedTransactions));\n                }\n            }),\n        );\n    }\n\n    private announceChainedBinary(\n        service: TransactionAnnouncerService,\n        signedTransactions: Observable<SignedTransaction>[],\n    ): Observable<BroadcastResult> {\n        return signedTransactions[0].pipe(\n            flatMap((first) => {\n                return signedTransactions[1].pipe(\n                    flatMap((second) => {\n                        return service.announceChainedBinary(first, second);\n                    }),\n                );\n            }),\n        );\n    }\n\n    private announceHashAndAggregateBonded(\n        service: TransactionAnnouncerService,\n        signedTransactions: Observable<SignedTransaction>[],\n    ): Observable<BroadcastResult> {\n        return signedTransactions[0].pipe(\n            flatMap((signedHashLockTransaction) => {\n                return signedTransactions[1].pipe(\n                    flatMap((signedAggregateTransaction) => {\n                        return service.announceHashAndAggregateBonded(signedHashLockTransaction, signedAggregateTransaction);\n                    }),\n                );\n            }),\n        );\n    }\n\n    private announceSimple(\n        service: TransactionAnnouncerService,\n        signedTransactions: Observable<SignedTransaction>[],\n    ): Observable<BroadcastResult>[] {\n        return signedTransactions.map((o) => o.pipe(flatMap((s) => service.announce(s))));\n    }\n\n    public getTotalMaxFee(): Observable<UInt64> {\n        return this.resolveTransactions().pipe(\n            map((ts) => ts.reduce((partial, current) => partial.add(current.maxFee), UInt64.fromUint(0))),\n        );\n    }\n\n    public resolveTransactions(account: TransactionSigner = this.tempTransactionSigner): Observable<Transaction[]> {\n        if (!this.stageTransactions.length) {\n            return of([]);\n        }\n        const maxFee = this.stageTransactions.sort((a, b) => a.maxFee.compare(b.maxFee))[0].maxFee;\n        if (this.mode === TransactionCommandMode.SIMPLE || this.mode === TransactionCommandMode.CHAINED_BINARY) {\n            return of(this.stageTransactions.map((t) => this.calculateSuggestedMaxFee(t)));\n        } else {\n            const currentSigner = PublicAccount.createFromPublicKey(this.signerPublicKey, this.networkType);\n            if (this.mode === TransactionCommandMode.AGGREGATE) {\n                const aggregate = this.calculateSuggestedMaxFee(\n                    AggregateTransaction.createComplete(\n                        Deadline.create(this.epochAdjustment),\n                        this.stageTransactions.map((t) => t.toAggregate(currentSigner)),\n                        this.networkType,\n                        [],\n                        maxFee,\n                    ),\n                );\n                return of([aggregate]);\n            } else {\n                // use attached signer (multisig account) if exists\n                const signedInnerTransactions = this.stageTransactions.map((t) => {\n                    return t.signer === undefined ? t.toAggregate(currentSigner) : t.toAggregate(t.signer);\n                });\n\n                const aggregate = this.calculateSuggestedMaxFee(\n                    AggregateTransaction.createBonded(\n                        Deadline.create(this.epochAdjustment),\n                        signedInnerTransactions,\n                        this.networkType,\n                        [],\n                        maxFee,\n                    ),\n                );\n                return account.signTransaction(aggregate, this.generationHash).pipe(\n                    map((signedAggregateTransaction) => {\n                        const hashLock = this.calculateSuggestedMaxFee(\n                            LockFundsTransaction.create(\n                                Deadline.create(this.epochAdjustment),\n                                new Mosaic(this.networkMosaic, UInt64.fromNumericString(this.networkConfiguration.lockedFundsPerAggregate)),\n                                UInt64.fromUint(1000),\n                                signedAggregateTransaction,\n                                this.networkType,\n                                maxFee,\n                            ),\n                        );\n                        return [hashLock, aggregate];\n                    }),\n                );\n            }\n        }\n    }\n\n    private calculateSuggestedMaxFee(transaction: Transaction): Transaction {\n        const feeMultiplier =\n            this.resolveFeeMultipler(transaction) < this.transactionFees.minFeeMultiplier\n                ? this.transactionFees.minFeeMultiplier\n                : this.resolveFeeMultipler(transaction);\n        if (!feeMultiplier) {\n            return transaction;\n        }\n        if (transaction instanceof AggregateTransaction) {\n            return transaction.setMaxFeeForAggregate(feeMultiplier, this.requiredCosignatures);\n        } else {\n            return transaction.setMaxFee(feeMultiplier);\n        }\n    }\n\n    private resolveFeeMultipler(transaction: Transaction): number | undefined {\n        if (transaction.maxFee.compact() == 1) {\n            const fees =\n                this.transactionFees.medianFeeMultiplier < this.transactionFees.minFeeMultiplier\n                    ? this.transactionFees.minFeeMultiplier\n                    : this.transactionFees.medianFeeMultiplier;\n            return fees || this.networkConfiguration.defaultDynamicFeeMultiplier;\n        }\n        if (transaction.maxFee.compact() == 2) {\n            const fees =\n                this.transactionFees.highestFeeMultiplier < this.transactionFees.minFeeMultiplier\n                    ? this.transactionFees.minFeeMultiplier\n                    : this.transactionFees.highestFeeMultiplier;\n            return fees || this.networkConfiguration.defaultDynamicFeeMultiplier;\n        }\n        return undefined;\n    }\n}\n"],"sourceRoot":""}]}
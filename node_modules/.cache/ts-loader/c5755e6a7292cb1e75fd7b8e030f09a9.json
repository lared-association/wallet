{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/AccountContactQR/AccountContactQRTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/AccountContactQR/AccountContactQRTs.ts","mtime":1606213958949},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7CiAgZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgewogICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsKICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7CiAgICBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsKCiAgICB0cnkgewogICAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwKICAgICAgICByZXN1bHQ7CgogICAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7CiAgICAgIHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7CgogICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsKICB9Owp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IENvbnRhY3RRUiB9IGZyb20gJ3N5bWJvbC1xci1saWJyYXJ5JzsKaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgY29uY2F0TWFwLCBwbHVjayB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsgLy8gaW50ZXJuYWwgZGVwZW5kZW5jaWVzCgppbXBvcnQgeyBBY2NvdW50TW9kZWwgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2UvZW50aXRpZXMvQWNjb3VudE1vZGVsJzsgLy8gcmVzb3VyY2VzCi8vIEB0cy1pZ25vcmUKCmltcG9ydCBmYWlsdXJlSWNvbiBmcm9tICdAL3ZpZXdzL3Jlc291cmNlcy9pbWcvbW9uaXRvci9mYWlsdXJlLnBuZyc7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKCnZhciBBY2NvdW50Q29udGFjdFFSVHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9WdWUpIHsKICBfaW5oZXJpdHMoQWNjb3VudENvbnRhY3RRUlRzLCBfVnVlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBY2NvdW50Q29udGFjdFFSVHMpOwoKICBmdW5jdGlvbiBBY2NvdW50Q29udGFjdFFSVHMoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3VudENvbnRhY3RRUlRzKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQWNjb3VudENvbnRhY3RRUlRzLCBbewogICAga2V5OiAicXJDb2RlQXJncyIsCiAgICAvLy8gcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIGlmICghdGhpcy5hY2NvdW50KSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHB1YmxpY0FjY291bnQgPSBBY2NvdW50TW9kZWwuZ2V0T2JqZWN0cyh0aGlzLmFjY291bnQpLnB1YmxpY0FjY291bnQ7CiAgICAgICAgcmV0dXJuIG5ldyBDb250YWN0UVIodGhpcy5hY2NvdW50Lm5hbWUsIC8vIEB0cy1pZ25vcmUgLy8gQFRPRE86IFNESyB1cGdyYWRlCiAgICAgICAgcHVibGljQWNjb3VudCwgcHVibGljQWNjb3VudC5hZGRyZXNzLm5ldHdvcmtUeXBlLCB0aGlzLmdlbmVyYXRpb25IYXNoKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImRvd25sb2FkTmFtZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudCA/ICJhZGRyZXNzLXFyLSIuY29uY2F0KHRoaXMuYWNjb3VudC5uYW1lLCAiLnBuZyIpIDogJyc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQWNjb3VudENvbnRhY3RRUlRzOwp9KFZ1ZSk7CgpfX2RlY29yYXRlKFtQcm9wKHsKICAiZGVmYXVsdCI6IG51bGwKfSldLCBBY2NvdW50Q29udGFjdFFSVHMucHJvdG90eXBlLCAiYWNjb3VudCIsIHZvaWQgMCk7CgpBY2NvdW50Q29udGFjdFFSVHMgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXB1dGVkOiBPYmplY3QuYXNzaWduKHt9LCBtYXBHZXR0ZXJzKHsKICAgIGdlbmVyYXRpb25IYXNoOiAnbmV0d29yay9nZW5lcmF0aW9uSGFzaCcKICB9KSksCiAgc3Vic2NyaXB0aW9uczogZnVuY3Rpb24gc3Vic2NyaXB0aW9ucygpIHsKICAgIHZhciBxckNvZGUkID0gdGhpcy4kd2F0Y2hBc09ic2VydmFibGUoJ3FyQ29kZUFyZ3MnLCB7CiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSkucGlwZShwbHVjaygnbmV3VmFsdWUnKSwgY29uY2F0TWFwKGZ1bmN0aW9uIChhcmdzKSB7CiAgICAgIGlmIChhcmdzIGluc3RhbmNlb2YgQ29udGFjdFFSKSB7CiAgICAgICAgcmV0dXJuIGFyZ3MudG9CYXNlNjQoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG9mKGZhaWx1cmVJY29uKTsKICAgIH0pKTsKICAgIHJldHVybiB7CiAgICAgIHFyQ29kZSQ6IHFyQ29kZSQKICAgIH07CiAgfQp9KV0sIEFjY291bnRDb250YWN0UVJUcyk7CmV4cG9ydCB7IEFjY291bnRDb250YWN0UVJUcyB9Ow=="},{"version":3,"sources":["/home/hero/lared-wallet/src/components/AccountContactQR/AccountContactQRTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAeA,SAAS,SAAT,EAAoB,IAApB,EAA0B,GAA1B,QAAqC,wBAArC;AACA,SAAS,SAAT,QAA0B,mBAA1B;AAEA,SAAqB,EAArB,QAA+B,MAA/B;AACA,SAAS,SAAT,EAAoB,KAApB,QAAiC,gBAAjC,C,CACA;;AACA,SAAS,YAAT,QAA6B,uCAA7B,C,CACA;AACA;;AACA,OAAO,WAAP,MAAwB,2CAAxB;AACA,SAAS,UAAT,QAA2B,MAA3B;;AAuBA,IAAa,kBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAkBI;AAlBJ,wBAmBkB;AACV,UAAI,CAAC,KAAK,OAAV,EAAmB;AACf,eAAO,IAAP;AACH;;AAED,UAAI;AACA,YAAM,aAAa,GAAkB,YAAY,CAAC,UAAb,CAAwB,KAAK,OAA7B,EAAsC,aAA3E;AACA,eAAO,IAAI,SAAJ,CACH,KAAK,OAAL,CAAa,IADV,EAEH;AACA,QAAA,aAHG,EAIH,aAAa,CAAC,OAAd,CAAsB,WAJnB,EAKH,KAAK,cALF,CAAP;AAOH,OATD,CASE,OAAO,KAAP,EAAc;AACZ,eAAO,IAAP;AACH;AACJ;AApCL;AAAA;AAAA,wBAsCoB;AACZ,aAAO,KAAK,OAAL,wBAA6B,KAAK,OAAL,CAAa,IAA1C,YAAuD,EAA9D;AACH;AAxCL;;AAAA;AAAA,EAAwC,GAAxC,CAAA;;AAII,UAAA,CAAA,CAHC,IAAI,CAAC;AACF,aAAS;AADP,CAAD,CAGL,CAAA,E,4BAAA,E,SAAA,E,KAAsB,CAAtB,CAAA;;AAJS,kBAAkB,GAAA,UAAA,CAAA,CArB9B,SAAS,CAAC;AACP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,cAAc,EAAE;AADN,GAAD,CADT,CADD;AAMP,EAAA,aANO,2BAMM;AACT,QAAM,OAAO,GAAG,KAAK,kBAAL,CAAwB,YAAxB,EAAsC;AAClD,MAAA,SAAS,EAAE;AADuC,KAAtC,EAEb,IAFa,CAGZ,KAAK,CAAC,UAAD,CAHO,EAIZ,SAAS,CAAC,UAAC,IAAD,EAAS;AACf,UAAI,IAAI,YAAY,SAApB,EAA+B;AAC3B,eAAO,IAAI,CAAC,QAAL,EAAP;AACH;;AACD,aAAO,EAAE,CAAC,WAAD,CAAT;AACH,KALQ,CAJG,CAAhB;AAWA,WAAO;AAAE,MAAA,OAAO,EAAP;AAAF,KAAP;AACH;AAnBM,CAAD,CAqBqB,CAAA,EAAlB,kBAAkB,CAAlB;SAAA,kB","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { ContactQR } from 'symbol-qr-library';\nimport { PublicAccount } from 'symbol-sdk';\nimport { Observable, of } from 'rxjs';\nimport { concatMap, pluck } from 'rxjs/operators';\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n// resources\n// @ts-ignore\nimport failureIcon from '@/views/resources/img/monitor/failure.png';\nimport { mapGetters } from 'vuex';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            generationHash: 'network/generationHash',\n        }),\n    },\n    subscriptions() {\n        const qrCode$ = this.$watchAsObservable('qrCodeArgs', {\n            immediate: true,\n        }).pipe(\n            pluck('newValue'),\n            concatMap((args) => {\n                if (args instanceof ContactQR) {\n                    return args.toBase64();\n                }\n                return of(failureIcon);\n            }),\n        );\n        return { qrCode$ };\n    },\n})\nexport class AccountContactQRTs extends Vue {\n    @Prop({\n        default: null,\n    })\n    account: AccountModel;\n\n    /**\n     * Current network's generation hash\n     * @var {string}\n     */\n    public generationHash: string;\n\n    /**\n     * QR Code\n     * @type {Observable<string>}\n     */\n    public qrCode$: Observable<string>;\n\n    /// region computed properties getter/setter\n    get qrCodeArgs(): ContactQR {\n        if (!this.account) {\n            return null;\n        }\n\n        try {\n            const publicAccount: PublicAccount = AccountModel.getObjects(this.account).publicAccount;\n            return new ContactQR(\n                this.account.name,\n                // @ts-ignore // @TODO: SDK upgrade\n                publicAccount,\n                publicAccount.address.networkType,\n                this.generationHash,\n            );\n        } catch (error) {\n            return null;\n        }\n    }\n\n    get downloadName(): string {\n        return this.account ? `address-qr-${this.account.name}.png` : '';\n    }\n    /// end-region computed properties getter/setter\n}\n"],"sourceRoot":""}]}
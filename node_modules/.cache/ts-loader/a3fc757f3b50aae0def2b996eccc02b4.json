{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/PeerSelector/PeerSelectorTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/PeerSelector/PeerSelectorTs.ts","mtime":1611927202627},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUsIFByb3AgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgeyBOZXR3b3JrVHlwZUhlbHBlciB9IGZyb20gJ0AvY29yZS91dGlscy9OZXR3b3JrVHlwZUhlbHBlcic7CmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJzsgLy9AdHMtaWdub3JlCgppbXBvcnQgTW9kYWxOZXR3b3JrTm90TWF0Y2hpbmdQcm9maWxlIGZyb20gJ0Avdmlld3MvbW9kYWxzL01vZGFsTmV0d29ya05vdE1hdGNoaW5nUHJvZmlsZS9Nb2RhbE5ldHdvcmtOb3RNYXRjaGluZ1Byb2ZpbGUudnVlJzsKCnZhciBQZWVyU2VsZWN0b3JUcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhQZWVyU2VsZWN0b3JUcywgX1Z1ZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGVlclNlbGVjdG9yVHMpOwoKICBmdW5jdGlvbiBQZWVyU2VsZWN0b3JUcygpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGVlclNlbGVjdG9yVHMpOwoKICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICBfdGhpcy5wb3B0aXBWaXNpYmxlID0gZmFsc2U7CiAgICByZXR1cm4gX3RoaXM7CiAgfSAvLy8gcmVnaW9uIGNvbXB1dGVkIHByb3BlcnRpZXMgZ2V0dGVyL3NldHRlcgoKCiAgX2NyZWF0ZUNsYXNzKFBlZXJTZWxlY3RvclRzLCBbewogICAga2V5OiAic3dpdGNoUGVlciIsCiAgICAvLy8gZW5kLXJlZ2lvbiBjb21wdXRlZCBwcm9wZXJ0aWVzIGdldHRlci9zZXR0ZXIKCiAgICAvKioKICAgICAqIFN3aXRjaCB0aGUgY3VycmVudGx5IGFjdGl2ZSBwZWVyCiAgICAgKiBAcGFyYW0gcGVlcgogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gc3dpdGNoUGVlcih1cmwpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ25ldHdvcmsvU0VUX0NVUlJFTlRfUEVFUicsIHVybCk7CiAgICB9CiAgfSwgewogICAga2V5OiAib25Qb3BUaXBTaG93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBvcFRpcFNob3coKSB7CiAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ29TZXR0aW5ncyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ29TZXR0aW5ncygpIHsKICAgICAgdGhpcy5wb3B0aXBWaXNpYmxlID0gZmFsc2U7CiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgncHJvZmlsZS90b2dnbGVTZXR0aW5ncycpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uQ2xvc2VOZXR3b3JrTW9kYWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2VOZXR3b3JrTW9kYWwoKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCduZXR3b3JrL1NFVF9ORVRXT1JLX0lTX05PVF9NQVRDSElOR19QUk9GSUxFJywgZmFsc2UpOwogICAgfQogIH0sIHsKICAgIGtleTogInBlZXJzTGlzdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIF8uc29ydEJ5KHRoaXMua25vd05vZGVzLCBmdW5jdGlvbiAoYSkgewogICAgICAgIHJldHVybiBhLmlzRGVmYXVsdCAhPT0gdHJ1ZTsKICAgICAgfSwgZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gYS51cmw7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm5ldHdvcmtUeXBlVGV4dCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHQoJ2ludmFsaWRfbm9kZScpLnRvU3RyaW5nKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiAhIXRoaXMubmV0d29ya1R5cGUgPyBOZXR3b3JrVHlwZUhlbHBlci5nZXROZXR3b3JrVHlwZUxhYmVsKHRoaXMubmV0d29ya1R5cGUpIDogdGhpcy4kdCgnbG9hZGluZycpLnRvU3RyaW5nKCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUGVlclNlbGVjdG9yVHM7Cn0oVnVlKTsKCl9fZGVjb3JhdGUoW1Byb3AoewogIGRlZmF1bHQ6IGZhbHNlCn0pXSwgUGVlclNlbGVjdG9yVHMucHJvdG90eXBlLCAiaXNFbWJlZGRlZCIsIHZvaWQgMCk7CgpQZWVyU2VsZWN0b3JUcyA9IF9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgY29tcG9uZW50czogewogICAgTW9kYWxOZXR3b3JrTm90TWF0Y2hpbmdQcm9maWxlOiBNb2RhbE5ldHdvcmtOb3RNYXRjaGluZ1Byb2ZpbGUKICB9LAogIGNvbXB1dGVkOiBPYmplY3QuYXNzaWduKHt9LCBtYXBHZXR0ZXJzKHsKICAgIGN1cnJlbnRQZWVySW5mbzogJ25ldHdvcmsvY3VycmVudFBlZXJJbmZvJywKICAgIGlzQ29ubmVjdGVkOiAnbmV0d29yay9pc0Nvbm5lY3RlZCcsCiAgICBuZXR3b3JrVHlwZTogJ25ldHdvcmsvbmV0d29ya1R5cGUnLAogICAgcmVwb3NpdG9yeUZhY3Rvcnk6ICduZXR3b3JrL3JlcG9zaXRvcnlGYWN0b3J5JywKICAgIGdlbmVyYXRpb25IYXNoOiAnbmV0d29yay9nZW5lcmF0aW9uSGFzaCcsCiAgICBrbm93Tm9kZXM6ICduZXR3b3JrL2tub3dOb2RlcycsCiAgICBuZXR3b3JrSXNOb3RNYXRjaGluZ1Byb2ZpbGU6ICduZXR3b3JrL25ldHdvcmtJc05vdE1hdGNoaW5nUHJvZmlsZScKICB9KSkKfSldLCBQZWVyU2VsZWN0b3JUcyk7CmV4cG9ydCB7IFBlZXJTZWxlY3RvclRzIH07"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/PeerSelector/PeerSelectorTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAAS,SAAT,EAAoB,GAApB,EAAyB,IAAzB,QAAqC,wBAArC;AACA,SAAS,UAAT,QAA2B,MAA3B;AAEA,SAAS,iBAAT,QAAkC,gCAAlC;AACA,OAAO,KAAK,CAAZ,MAAmB,QAAnB,C,CACA;;AACA,OAAO,8BAAP,MAA2C,kFAA3C;;AAgBA,IAAa,cAAb;AAAA;;AAAA;;AAAA,4BAAA;AAAA;;AAAA;;;AAuCW,UAAA,aAAA,GAAyB,KAAzB;AAvCX;AA4EC,GA5ED,CAyCI;;;AAzCJ;AAAA;AAyDI;;AAEA;;;AAGG;AA9DP,+BA+DsB,GA/DtB,EA+DiC;AACzB,WAAK,MAAL,CAAY,QAAZ,CAAqB,0BAArB,EAAiD,GAAjD;AACH;AAjEL;AAAA;AAAA,mCAkEgB;AACR,WAAK,YAAL;AACH;AApEL;AAAA;AAAA,iCAqEc;AACN,WAAK,aAAL,GAAqB,KAArB;AACA,WAAK,MAAL,CAAY,MAAZ,CAAmB,wBAAnB;AACH;AAxEL;AAAA;AAAA,0CAyEuB;AACf,WAAK,MAAL,CAAY,QAAZ,CAAqB,6CAArB,EAAoE,KAApE;AACH;AA3EL;AAAA;AAAA,wBA0CiB;AACT,aAAO,CAAC,CAAC,MAAF,CACH,KAAK,SADF,EAEH,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,SAAF,KAAgB,IAAvB;AAAA,OAFG,EAGH,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,GAAT;AAAA,OAHG,CAAP;AAKH;AAhDL;AAAA;AAAA,wBAkDuB;AACf,UAAI,CAAC,KAAK,WAAV,EAAuB;AACnB,eAAO,KAAK,EAAL,CAAQ,cAAR,EAAwB,QAAxB,EAAP;AACH;;AACD,aAAO,CAAC,CAAC,KAAK,WAAP,GAAqB,iBAAiB,CAAC,mBAAlB,CAAsC,KAAK,WAA3C,CAArB,GAA+E,KAAK,EAAL,CAAQ,SAAR,EAAmB,QAAnB,EAAtF;AACH;AAvDL;;AAAA;AAAA,EAAoC,GAApC,CAAA;;AAC8B,UAAA,CAAA,CAAzB,IAAI,CAAC;AAAE,EAAA,OAAO,EAAE;AAAX,CAAD,CAAqB,CAAA,E,wBAAA,E,YAAA,E,KAAoB,CAApB,CAAA;;AADjB,cAAc,GAAA,UAAA,CAAA,CAd1B,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AAAE,IAAA,8BAA8B,EAA9B;AAAF,GADL;AAEP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,eAAe,EAAE,yBADP;AAEV,IAAA,WAAW,EAAE,qBAFH;AAGV,IAAA,WAAW,EAAE,qBAHH;AAIV,IAAA,iBAAiB,EAAE,2BAJT;AAKV,IAAA,cAAc,EAAE,wBALN;AAMV,IAAA,SAAS,EAAE,mBAND;AAOV,IAAA,2BAA2B,EAAE;AAPnB,GAAD,CADT;AAFD,CAAD,CAciB,CAAA,EAAd,cAAc,CAAd;SAAA,c","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { NetworkType, RepositoryFactory } from 'symbol-sdk';\nimport { Component, Vue, Prop } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\nimport { NetworkTypeHelper } from '@/core/utils/NetworkTypeHelper';\nimport * as _ from 'lodash';\n//@ts-ignore\nimport ModalNetworkNotMatchingProfile from '@/views/modals/ModalNetworkNotMatchingProfile/ModalNetworkNotMatchingProfile.vue';\n\n@Component({\n    components: { ModalNetworkNotMatchingProfile },\n    computed: {\n        ...mapGetters({\n            currentPeerInfo: 'network/currentPeerInfo',\n            isConnected: 'network/isConnected',\n            networkType: 'network/networkType',\n            repositoryFactory: 'network/repositoryFactory',\n            generationHash: 'network/generationHash',\n            knowNodes: 'network/knowNodes',\n            networkIsNotMatchingProfile: 'network/networkIsNotMatchingProfile',\n        }),\n    },\n})\nexport class PeerSelectorTs extends Vue {\n    @Prop({ default: false }) isEmbedded: boolean;\n    /**\n     * Currently active endpoint\n     * @see {Store.Network}\n     * @var {Object}\n     */\n    public currentPeerInfo: NodeModel;\n    public networkIsNotMatchingProfile: boolean;\n    /**\n     * Whether the connection is up\n     * @see {Store.Network}\n     * @var {boolean}\n     */\n    public isConnected: boolean;\n\n    /**\n     * Current networkType\n     * @see {Store.Network}\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Current generationHash\n     * @see {Store.Network}\n     * @var {string}\n     */\n    public generationHash: string;\n\n    /**\n     * Known peers\n     * @see {Store.Network}\n     * @var {string[]}\n     */\n    public knowNodes: NodeModel[];\n\n    public repositoryFactory: RepositoryFactory;\n\n    public poptipVisible: boolean = false;\n\n    /// region computed properties getter/setter\n    get peersList(): NodeModel[] {\n        return _.sortBy(\n            this.knowNodes,\n            (a) => a.isDefault !== true,\n            (a) => a.url,\n        );\n    }\n\n    get networkTypeText(): string {\n        if (!this.isConnected) {\n            return this.$t('invalid_node').toString();\n        }\n        return !!this.networkType ? NetworkTypeHelper.getNetworkTypeLabel(this.networkType) : this.$t('loading').toString();\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Switch the currently active peer\n     * @param peer\n     */\n    public switchPeer(url: string) {\n        this.$store.dispatch('network/SET_CURRENT_PEER', url);\n    }\n    onPopTipShow() {\n        this.$forceUpdate();\n    }\n    goSettings() {\n        this.poptipVisible = false;\n        this.$store.commit('profile/toggleSettings');\n    }\n    onCloseNetworkModal() {\n        this.$store.dispatch('network/SET_NETWORK_IS_NOT_MATCHING_PROFILE', false);\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalSettings/ModalSettingsTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalSettings/ModalSettingsTs.ts","mtime":1611927227796},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/modals/ModalSettings/ModalSettingsTs.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vue, Component, Prop } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n// @ts-ignore\nimport FormGeneralSettings from '@/views/forms/FormGeneralSettings/FormGeneralSettings.vue';\n// @ts-ignore\nimport FormProfilePasswordUpdate from '@/views/forms/FormProfilePasswordUpdate/FormProfilePasswordUpdate.vue';\n// @ts-ignore\nimport AboutPage from '@/views/pages/settings/AboutPage/AboutPage.vue';\n// @ts-ignore\nimport NavigationLinks from '@/components/NavigationLinks/NavigationLinks.vue';\n//@ts-ignore\nimport FormNodeEdit from '@/views/forms/FormNodeEdit/FormNodeEdit.vue';\n\n/**\n * Settings pages\n */\nenum SettingsTabs {\n    GENERAL = 0,\n    PASSWORD = 1,\n    NETWORK = 2,\n    ABOUT = 3,\n}\n\n@Component({\n    components: {\n        FormGeneralSettings,\n        FormProfilePasswordUpdate,\n        AboutPage,\n        FormNodeEdit,\n        NavigationLinks,\n    },\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n        }),\n    },\n})\nexport class ModalSettingsTs extends Vue {\n    /// region component properties\n    @Prop({ default: false }) visible: boolean;\n    /// end-region component properties\n\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Enum representing the available settings tabs\n     * @see ModalSettings.vue\n     */\n    protected knownTabs = SettingsTabs;\n\n    /**\n     * Items that will be shown in the ModalWizardDisplay\n     */\n    protected availableTabs = Object.keys(this.knownTabs).filter((key) => Number.isNaN(parseInt(key)));\n\n    /**\n     * Currently active tab\n     * In case of unauthenticated user, network tab is default\n     */\n    protected currentTabIndex = 0;\n\n    created() {\n        // when on /profiles route, only the NETWORK tab should be displayed\n        this.availableTabs = this.availableTabs.filter((key) => !!this.currentAccount || key === 'NETWORK');\n    }\n\n    /**\n     * Internal visibility state\n     * @type {boolean}\n     */\n    protected get show(): boolean {\n        return this.visible;\n    }\n\n    /**\n     * Emits close event\n     */\n    protected set show(val) {\n        if (!val) {\n            this.$emit('close');\n        }\n    }\n\n    /**\n     * Catches the @selected event\n     */\n    protected onTabChange(index: number) {\n        this.currentTabIndex = index;\n    }\n\n    public async logout() {\n        await this.$store.dispatch('profile/LOG_OUT');\n        this.$emit('close');\n        this.$router.push({ name: 'profiles.login' });\n    }\n}\n"],"sourceRoot":""}]}
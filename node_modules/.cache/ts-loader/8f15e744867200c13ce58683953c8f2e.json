{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/services/CommunityService.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/services/CommunityService.ts","mtime":1606213958965},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvaGVyby9sYXJlZC13YWxsZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgppbXBvcnQgeyBfX2F3YWl0ZXIgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCBSU1NQYXJzZXIgZnJvbSAncnNzLXBhcnNlcic7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7IC8vIGNvbmZpZ3VyYXRpb24KCmltcG9ydCB7IGFwcENvbmZpZyB9IGZyb20gJ0AvY29uZmlnJzsgLy8vIHJlZ2lvbiBwcm90ZWN0ZWQgaGVscGVycwoKLyoqCiAqIFJlcXVlc3QgZXh0ZXJuYWwgZmVlZCBkYXRhCiAqIEBpbnRlcm5hbAogKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59CiAqLwoKdmFyIHJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KCkgewogIHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgdmFyIGZlZWRVcmwsIHJlc3BvbnNlOwogICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgZmVlZFVybCA9IGFwcENvbmZpZy5hcnRpY2xlc0ZlZWRVcmw7CgogICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHsKICAgICAgICAgICAgICBmZWVkVXJsID0gJy9uZW1mbGFzaCc7CiAgICAgICAgICAgIH0gLy8gZXhlY3V0ZSByZXF1ZXN0CgoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoZmVlZFVybCwgewogICAgICAgICAgICAgIHBhcmFtczoge30KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7Cn07CgpleHBvcnQgdmFyIENvbW11bml0eVNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIENvbW11bml0eVNlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tbXVuaXR5U2VydmljZSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29tbXVuaXR5U2VydmljZSwgW3sKICAgIGtleTogImdldExhdGVzdEFydGljbGVzIiwKCiAgICAvKioKICAgICAqIEdldCBsYXRlc3QgYXJ0aWNsZXMgZnJvbSBSU1MgZmVlZAogICAgICogQHJldHVybiB7UHJvbWlzZTxBcnRpY2xlRW50cnlbXX0KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhdGVzdEFydGljbGVzKCkgewogICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBkYXRhLCBwYXJzZWRTdHJlYW07CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdCgpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDM7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJTU1BhcnNlcigpLnBhcnNlU3RyaW5nKGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBwYXJzZWRTdHJlYW0gPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA5OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgICAgcGFyc2VkU3RyZWFtID0gewogICAgICAgICAgICAgICAgICBpdGVtczogW10KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcGFyc2VkU3RyZWFtLml0ZW1zLm1hcChmdW5jdGlvbiAoX3JlZikgewogICAgICAgICAgICAgICAgICB2YXIgcHViRGF0ZSA9IF9yZWYucHViRGF0ZSwKICAgICAgICAgICAgICAgICAgICAgIGNyZWF0b3IgPSBfcmVmLmNyZWF0b3IsCiAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IF9yZWYudGl0bGUsCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50U25pcHBldCA9IF9yZWYuY29udGVudFNuaXBwZXQsCiAgICAgICAgICAgICAgICAgICAgICBsaW5rID0gX3JlZi5saW5rOwogICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHB1YkRhdGU6IHB1YkRhdGUsCiAgICAgICAgICAgICAgICAgICAgY3JlYXRvcjogY3JlYXRvciwKICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsCiAgICAgICAgICAgICAgICAgICAgY29udGVudFNuaXBwZXQ6IGNvbnRlbnRTbmlwcGV0LAogICAgICAgICAgICAgICAgICAgIGxpbms6IGxpbmsgJiYgbGluay5sZW5ndGggJiYgbGluay5tYXRjaCgvXig/Omh0dHAocyk/OlwvXC8pP1tcdy4tXSsoPzpcLltcd1wuLV0rKStbXHdcLVwuX346Lz8jW1xdQCFcJCYnXChcKVwqXCssOz0uXSskL2cpID8gbGluayA6ICcjJwogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzMsIDldXSk7CiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBDb21tdW5pdHlTZXJ2aWNlOwp9KCk7"},{"version":3,"sources":["/home/hero/lared-wallet/src/services/CommunityService.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAeA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAS,SAAT,QAA0B,UAA1B,C,CAEA;;AACA;;;;;;AAKA,IAAM,OAAO,GAAG,SAAV,OAAU;AAAA,SAA4B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpC,YAAA,OADoC,GAC1B,SAAS,CAAC,eADgB;;AAExC,gBAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AACxC,cAAA,OAAO,GAAG,WAAV;AACH,aAJuC,CAKxC;;;AALwC;AAMvB,mBAAM,KAAK,CAAC,GAAN,CAAU,OAAV,EAAmB;AAAE,cAAA,MAAM,EAAE;AAAV,aAAnB,CAAN;;AANuB;AAMlC,YAAA,QANkC;AAAA,6CAOjC,QAAQ,CAAC,IAPwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA5B;AAAA,CAAhB;;AAmCA,WAAa,gBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACI;;;;AADJ,wCAKkC;;;;;;;;AACb,uBAAM,OAAO,EAAb;;;AAAP,gBAAA,I;;;AAKa,uBAAM,IAAI,SAAJ,GAAgB,WAAhB,CAA4B,IAA5B,CAAN;;;AAAf,gBAAA,Y;;;;;;;AAEA,gBAAA,YAAY,GAAG;AAAE,kBAAA,KAAK,EAAE;AAAT,iBAAf;;;kDAGG,YAAY,CAAC,KAAb,CAAmB,GAAnB,CAAuB;AAAA,sBAAG,OAAH,QAAG,OAAH;AAAA,sBAAY,OAAZ,QAAY,OAAZ;AAAA,sBAAqB,KAArB,QAAqB,KAArB;AAAA,sBAA4B,cAA5B,QAA4B,cAA5B;AAAA,sBAA4C,IAA5C,QAA4C,IAA5C;AAAA,yBAAwD;AAClF,oBAAA,OAAO,EAAP,OADkF;AAElF,oBAAA,OAAO,EAAP,OAFkF;AAGlF,oBAAA,KAAK,EAAL,KAHkF;AAIlF,oBAAA,cAAc,EAAd,cAJkF;AAKlF,oBAAA,IAAI,EACA,IAAI,IAAI,IAAI,CAAC,MAAb,IAAuB,IAAI,CAAC,KAAL,CAAW,iFAAX,CAAvB,GACM,IADN,GAEM;AARwE,mBAAxD;AAAA,iBAAvB,C;;;;;;;;;AAUV;AA1BL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport RSSParser from 'rss-parser';\nimport axios from 'axios';\n// configuration\nimport { appConfig } from '@/config';\n\n/// region protected helpers\n/**\n * Request external feed data\n * @internal\n * @return {Promise<string>}\n */\nconst request = async (): Promise<string> => {\n    let feedUrl = appConfig.articlesFeedUrl;\n    if (process.env.NODE_ENV === 'development') {\n        feedUrl = '/nemflash';\n    }\n    // execute request\n    const response = await axios.get(feedUrl, { params: {} });\n    return response.data;\n};\n\n/// end-region protected helpers\n\nexport interface ArticleEntry {\n    /**\n     * Publication date\n     */\n    pubDate: string;\n    /**\n     * Article creator\n     */\n    creator: string;\n    /**\n     * Article title\n     */\n    title: string;\n    /**\n     * Article excerpt\n     */\n    contentSnippet: string;\n    /**\n     * Article link\n     */\n    link: string;\n}\n\nexport class CommunityService {\n    /**\n     * Get latest articles from RSS feed\n     * @return {Promise<ArticleEntry[]}\n     */\n    public async getLatestArticles(): Promise<ArticleEntry[]> {\n        const data = await request();\n\n        // *safely* parse stream\n        let parsedStream;\n        try {\n            parsedStream = await new RSSParser().parseString(data);\n        } catch (e) {\n            parsedStream = { items: [] };\n        }\n\n        return parsedStream.items.map(({ pubDate, creator, title, contentSnippet, link }) => ({\n            pubDate,\n            creator,\n            title,\n            contentSnippet,\n            link:\n                link && link.length && link.match(/^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g)\n                    ? link\n                    : '#',\n        }));\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/components/MessageDisplay/MessageDisplayTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/components/MessageDisplay/MessageDisplayTs.ts","mtime":1606213958957},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/components/MessageDisplay/MessageDisplayTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Address, EncryptedMessage, MessageType, Account, UnresolvedAddress, Message } from 'symbol-sdk';\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\nimport { PublicAccount } from 'symbol-sdk';\nimport { mapGetters } from 'vuex';\nimport { PlainMessage } from 'symbol-sdk';\nimport { NamespaceId } from 'symbol-sdk';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n\n@Component({\n    components: {\n        FormWrapper,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n            currentRecipient: 'account/currentRecipient',\n            linkedAddress: 'namespace/linkedAddress',\n        }),\n    },\n})\nexport class MessageDisplayTs extends Vue {\n    @Prop({\n        default: null,\n    })\n    message: Message;\n    @Prop({\n        default: null,\n    })\n    incoming: boolean;\n    @Prop({\n        default: null,\n    })\n    recipient: UnresolvedAddress;\n    @Prop({\n        default: true,\n    })\n    unannounced: boolean;\n    @Prop({\n        default: null,\n    })\n    signer: PublicAccount;\n\n    private isEncrypted = false;\n    private messageDisplay = '';\n    private showUnlockAccountModal = false;\n    private decryptedMessage: PlainMessage;\n    private currentRecipient: PublicAccount;\n    private linkedAddress: Address | null;\n    private currentAccount: AccountModel;\n\n    /**\n     * Hook called when the component is mounted\n     * @return {void}\n     */\n    public created() {\n        // - load transaction details\n        this.loadDetails();\n    }\n\n    /**\n     * Load transaction details\n     * @return {Promise<void>}\n     */\n    protected async loadDetails(): Promise<void> {\n        this.isEncrypted = this.message.type === MessageType.EncryptedMessage;\n        if (this.isEncrypted) {\n            this.messageDisplay = this.unannounced ? `${this.message.payload} (${this.$t('encrypt_message')})` : '******';\n        } else {\n            this.messageDisplay = this.message.payload;\n        }\n    }\n\n    /**\n     * Hook called when the account has been unlocked\n     * @param {Account} account\n     * @return {boolean}\n     */\n    protected onAccountUnlocked(account: Account) {\n        this.hasAccountUnlockModal = false;\n        if (this.recipient instanceof NamespaceId) {\n            this.$store.dispatch('namespace/GET_LINKED_ADDRESS', this.recipient).then(() => {\n                if (this.linkedAddress) {\n                    this.decryptMessage(account.privateKey, this.linkedAddress);\n                } else {\n                    this.$store.dispatch('notification/ADD_ERROR', this.$t(NotificationType.RECIPIENT_LINKED_ADDRESS_INVALID));\n                }\n            });\n        } else {\n            this.decryptMessage(account.privateKey, this.recipient);\n        }\n    }\n\n    /**\n     * Getter for modal visability property\n     */\n    protected get hasAccountUnlockModal(): boolean {\n        return this.showUnlockAccountModal;\n    }\n\n    /**\n     * Setter for modal visability property\n     */\n    protected set hasAccountUnlockModal(f: boolean) {\n        this.showUnlockAccountModal = f;\n    }\n\n    /**\n     * Get decrypted message\n     * @param privateKey Current account private key\n     * @param recipient: recipient address.\n     */\n    private decryptMessage(privateKey: string, recipient: Address) {\n        /**\n         * If transaction recipient === current account use signer to decrypt message\n         * Otherwise use the recipient for decryption\n         * */\n\n        if (recipient.plain() === this.currentAccount.address) {\n            this.decryptedMessage = EncryptedMessage.decrypt(this.message, privateKey, this.signer);\n            this.isEncrypted = false;\n            this.messageDisplay = this.decryptedMessage.payload;\n        } else {\n            this.$store.dispatch('account/GET_RECIPIENT', this.recipient as Address).then(() => {\n                this.decryptedMessage = EncryptedMessage.decrypt(this.message, privateKey, this.currentRecipient);\n                this.isEncrypted = false;\n                this.messageDisplay = this.decryptedMessage.payload;\n            });\n        }\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/HarvestingService.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/HarvestingService.ts","mtime":1611927227371},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmltcG9ydCB7IEhhcnZlc3RpbmdNb2RlbFN0b3JhZ2UgfSBmcm9tICdAL2NvcmUvZGF0YWJhc2Uvc3RvcmFnZS9IYXJ2ZXN0aW5nTW9kZWxTdG9yYWdlJzsKZXhwb3J0IHZhciBIYXJ2ZXN0aW5nU2VydmljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSGFydmVzdGluZ1NlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFydmVzdGluZ1NlcnZpY2UpOwoKICAgIHRoaXMuaGFydmVzdGluZ1N0b3JhZ2UgPSBIYXJ2ZXN0aW5nTW9kZWxTdG9yYWdlLklOU1RBTkNFOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEhhcnZlc3RpbmdTZXJ2aWNlLCBbewogICAga2V5OiAiZ2V0QWxsSGFydmVzdGluZ01vZGVscyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsSGFydmVzdGluZ01vZGVscygpIHsKICAgICAgcmV0dXJuIHRoaXMuaGFydmVzdGluZ1N0b3JhZ2UuZ2V0KCkgfHwgW107CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0SGFydmVzdGluZ01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIYXJ2ZXN0aW5nTW9kZWwoYWNjb3VudEFkZHJlc3MpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsSGFydmVzdGluZ01vZGVscygpLmZpbmQoZnVuY3Rpb24gKGgpIHsKICAgICAgICByZXR1cm4gaC5hY2NvdW50QWRkcmVzcyA9PT0gYWNjb3VudEFkZHJlc3M7CiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBBZGRzIG9yIFVwZGF0ZXMgYSBIYXJ2ZXN0aW5nTW9kZWwKICAgICAqIEBwYXJhbSBoYXJ2ZXN0aW5nTW9kZWwKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzYXZlSGFydmVzdGluZ01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlSGFydmVzdGluZ01vZGVsKGhhcnZlc3RpbmdNb2RlbCkgewogICAgICB2YXIgYWxsSGFydmVzdGluZ01vZGVscyA9IHRoaXMuZ2V0QWxsSGFydmVzdGluZ01vZGVscygpOwogICAgICB2YXIgaXRlbUlueCA9IGFsbEhhcnZlc3RpbmdNb2RlbHMuZmluZEluZGV4KGZ1bmN0aW9uIChoKSB7CiAgICAgICAgcmV0dXJuIGguYWNjb3VudEFkZHJlc3MgPT09IGhhcnZlc3RpbmdNb2RlbC5hY2NvdW50QWRkcmVzczsKICAgICAgfSk7CgogICAgICBpZiAoaXRlbUlueCA+PSAwKSB7CiAgICAgICAgYWxsSGFydmVzdGluZ01vZGVsc1tpdGVtSW54XSA9IGhhcnZlc3RpbmdNb2RlbDsKICAgICAgfSBlbHNlIHsKICAgICAgICBhbGxIYXJ2ZXN0aW5nTW9kZWxzLnB1c2goaGFydmVzdGluZ01vZGVsKTsKICAgICAgfQoKICAgICAgdGhpcy5oYXJ2ZXN0aW5nU3RvcmFnZS5zZXQoYWxsSGFydmVzdGluZ01vZGVscyk7CiAgICAgIHJldHVybjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVTaWduZWRQZXJzaXN0ZW50RGVsUmVxVHhzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTaWduZWRQZXJzaXN0ZW50RGVsUmVxVHhzKGhhcnZlc3RpbmdNb2RlbCwgc2lnbmVkUGVyc2lzdGVudERlbFJlcVR4cykgewogICAgICB0aGlzLnNhdmVIYXJ2ZXN0aW5nTW9kZWwoT2JqZWN0LmFzc2lnbihoYXJ2ZXN0aW5nTW9kZWwsIHsKICAgICAgICBzaWduZWRQZXJzaXN0ZW50RGVsUmVxVHhzOiBzaWduZWRQZXJzaXN0ZW50RGVsUmVxVHhzCiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVJc1BlcnNpc3RlbnREZWxSZXFTZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJc1BlcnNpc3RlbnREZWxSZXFTZW50KGhhcnZlc3RpbmdNb2RlbCwgaXNQZXJzaXN0ZW50RGVsUmVxU2VudCkgewogICAgICB0aGlzLnNhdmVIYXJ2ZXN0aW5nTW9kZWwoT2JqZWN0LmFzc2lnbihoYXJ2ZXN0aW5nTW9kZWwsIHsKICAgICAgICBpc1BlcnNpc3RlbnREZWxSZXFTZW50OiBpc1BlcnNpc3RlbnREZWxSZXFTZW50CiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVTZWxlY3RlZEhhcnZlc3RpbmdOb2RlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZEhhcnZlc3RpbmdOb2RlKGhhcnZlc3RpbmdNb2RlbCwgc2VsZWN0ZWRIYXJ2ZXN0aW5nTm9kZSkgewogICAgICB0aGlzLnNhdmVIYXJ2ZXN0aW5nTW9kZWwoT2JqZWN0LmFzc2lnbihoYXJ2ZXN0aW5nTW9kZWwsIHsKICAgICAgICBzZWxlY3RlZEhhcnZlc3RpbmdOb2RlOiBzZWxlY3RlZEhhcnZlc3RpbmdOb2RlCiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBIYXJ2ZXN0aW5nU2VydmljZTsKfSgpOw=="},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/services/HarvestingService.ts"],"names":[],"mappings":";;;;;;AAiBA,SAAS,sBAAT,QAAuC,gDAAvC;AAEA,WAAa,iBAAb;AAAA,+BAAA;AAAA;;AACqB,SAAA,iBAAA,GAAoB,sBAAsB,CAAC,QAA3C;AAqCpB;;AAtCD;AAAA;AAAA,6CAGiC;AACzB,aAAO,KAAK,iBAAL,CAAuB,GAAvB,MAAgC,EAAvC;AACH;AALL;AAAA;AAAA,uCAO8B,cAP9B,EAOoD;AAC5C,aAAO,KAAK,sBAAL,GAA8B,IAA9B,CAAmC,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,cAAF,KAAqB,cAA5B;AAAA,OAAnC,CAAP;AACH;AAED;;;AAGG;;AAdP;AAAA;AAAA,wCAe+B,eAf/B,EAe+D;AACvD,UAAM,mBAAmB,GAAG,KAAK,sBAAL,EAA5B;AACA,UAAM,OAAO,GAAG,mBAAmB,CAAC,SAApB,CAA8B,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,cAAF,KAAqB,eAAe,CAAC,cAA5C;AAAA,OAA9B,CAAhB;;AACA,UAAI,OAAO,IAAI,CAAf,EAAkB;AACd,QAAA,mBAAmB,CAAC,OAAD,CAAnB,GAA+B,eAA/B;AACH,OAFD,MAEO;AACH,QAAA,mBAAmB,CAAC,IAApB,CAAyB,eAAzB;AACH;;AACD,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,mBAA3B;AACA;AACH;AAzBL;AAAA;AAAA,oDA2B2C,eA3B3C,EA2B6E,yBA3B7E,EA2BsG;AAC9F,WAAK,mBAAL,CAAyB,MAAM,CAAC,MAAP,CAAc,eAAd,EAA+B;AAAE,QAAA,yBAAyB,EAAzB;AAAF,OAA/B,CAAzB;AACH;AA7BL;AAAA;AAAA,iDA+BwC,eA/BxC,EA+B0E,sBA/B1E,EA+ByG;AACjG,WAAK,mBAAL,CAAyB,MAAM,CAAC,MAAP,CAAc,eAAd,EAA+B;AAAE,QAAA,sBAAsB,EAAtB;AAAF,OAA/B,CAAzB;AACH;AAjCL;AAAA;AAAA,iDAmCwC,eAnCxC,EAmC0E,sBAnC1E,EAmC2G;AACnG,WAAK,mBAAL,CAAyB,MAAM,CAAC,MAAP,CAAc,eAAd,EAA+B;AAAE,QAAA,sBAAsB,EAAtB;AAAF,OAA/B,CAAzB;AACH;AArCL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { HarvestingModel } from '@/core/database/entities/HarvestingModel';\nimport { NodeModel } from '@/core/database/entities/NodeModel';\nimport { HarvestingModelStorage } from '@/core/database/storage/HarvestingModelStorage';\n\nexport class HarvestingService {\n    private readonly harvestingStorage = HarvestingModelStorage.INSTANCE;\n\n    public getAllHarvestingModels(): HarvestingModel[] {\n        return this.harvestingStorage.get() || [];\n    }\n\n    public getHarvestingModel(accountAddress: string): HarvestingModel {\n        return this.getAllHarvestingModels().find((h) => h.accountAddress === accountAddress);\n    }\n\n    /**\n     * Adds or Updates a HarvestingModel\n     * @param harvestingModel\n     */\n    public saveHarvestingModel(harvestingModel: HarvestingModel) {\n        const allHarvestingModels = this.getAllHarvestingModels();\n        const itemInx = allHarvestingModels.findIndex((h) => h.accountAddress === harvestingModel.accountAddress);\n        if (itemInx >= 0) {\n            allHarvestingModels[itemInx] = harvestingModel;\n        } else {\n            allHarvestingModels.push(harvestingModel);\n        }\n        this.harvestingStorage.set(allHarvestingModels);\n        return;\n    }\n\n    public updateSignedPersistentDelReqTxs(harvestingModel: HarvestingModel, signedPersistentDelReqTxs) {\n        this.saveHarvestingModel(Object.assign(harvestingModel, { signedPersistentDelReqTxs }));\n    }\n\n    public updateIsPersistentDelReqSent(harvestingModel: HarvestingModel, isPersistentDelReqSent: boolean) {\n        this.saveHarvestingModel(Object.assign(harvestingModel, { isPersistentDelReqSent }));\n    }\n\n    public updateSelectedHarvestingNode(harvestingModel: HarvestingModel, selectedHarvestingNode: NodeModel) {\n        this.saveHarvestingModel(Object.assign(harvestingModel, { selectedHarvestingNode }));\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/pages/accounts/AccountDetailsPage/AccountDetailsPageTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/pages/accounts/AccountDetailsPage/AccountDetailsPageTs.ts","mtime":1606213958973},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/pages/accounts/AccountDetailsPage/AccountDetailsPageTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeA;;AACA,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,UAAT,QAA2B,MAA3B,C,CACA;AACA;;AACA,OAAO,kBAAP,MAA+B,wDAA/B,C,CACA;;AACA,OAAO,0BAAP,MAAuC,wEAAvC,C,CACA;;AACA,OAAO,sBAAP,MAAmC,gEAAnC,C,CACA;;AACA,OAAO,gBAAP,MAA6B,oDAA7B,C,CACA;;AACA,OAAO,qBAAP,MAAkC,8DAAlC,C,CACA;;AACA,OAAO,uBAAP,MAAoC,kEAApC,C,CACA;;AACA,OAAO,cAAP,MAA2B,gDAA3B,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB,C,CACA;;AACA,OAAO,mBAAP,MAAgC,0DAAhC,C,CACA;;AACA,OAAO,sBAAP,MAAmC,gEAAnC,C,CACA;;AACA,OAAO,oBAAP,MAAiC,4DAAjC;AAIA,SAAS,cAAT,QAA+B,2BAA/B,C,CACA;;AACA,OAAO,sBAAP,MAAmC,kEAAnC,C,CACA;;AACA,OAAO,oBAAP,MAAiC,8DAAjC;;AA4BA,IAAa,oBAAb;AAAA;;AAAA;;AAAA,kCAAA;AAAA;;AAAA;;;AAoBI;;;;;AAIO,UAAA,kBAAA,GAA8B,KAA9B;AAEP;;;;AAGO,UAAA,uBAAA,GAAmC,KAAnC;AAQS,UAAA,cAAA,GAAiC,IAAI,cAAJ,EAAjC;AArCpB;AAgEC;;AAhED;AAAA;AAAA,oCAuC8B;;;;;;qBAClB,KAAK,c;;;;;AACL,qBAAK,qBAAL,GAA6B,IAA7B;;;;;;;;;;AAGP;AA5CL;AAAA;;AAqDI;;;AArDJ,wCAwDkC;;;;;;;;AAEtB,uBAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,gCAArB,EAAuD,KAAK,cAA5D,CAAN;;;;;;;;;AAEA,qBAAK,MAAL,CAAY,QAAZ,CAAqB,wBAArB,EAA+C,sCAA/C;AACA,gBAAA,OAAO,CAAC,KAAR;;;;;;;;;AAEP;AA/DL;AAAA;AAAA,wBA8CoC;AAC5B,aAAO,KAAK,kBAAZ;AACH,KAhDL;AAAA,sBAkDqC,CAlDrC,EAkD+C;AACvC,WAAK,kBAAL,GAA0B,CAA1B;AACH;AApDL;;AAAA;AAAA,EAA0C,GAA1C,CAAA;;AAAa,oBAAoB,GAAA,UAAA,CAAA,CAzBhC,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AACR,IAAA,kBAAkB,EAAlB,kBADQ;AAER,IAAA,0BAA0B,EAA1B,0BAFQ;AAGR,IAAA,sBAAsB,EAAtB,sBAHQ;AAIR,IAAA,gBAAgB,EAAhB,gBAJQ;AAKR,IAAA,cAAc,EAAd,cALQ;AAMR,IAAA,YAAY,EAAZ,YANQ;AAOR,IAAA,qBAAqB,EAArB,qBAPQ;AAQR,IAAA,uBAAuB,EAAvB,uBARQ;AASR,IAAA,mBAAmB,EAAnB,mBATQ;AAUR,IAAA,sBAAsB,EAAtB,sBAVQ;AAWR,IAAA,oBAAoB,EAApB,oBAXQ;AAYR,IAAA,sBAAsB,EAAtB,sBAZQ;AAaR,IAAA,oBAAoB,EAApB;AAbQ,GADL;AAgBP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,cAAc,EAAE,oBADN;AAEV,IAAA,cAAc,EAAE,wBAFN;AAGV,IAAA,aAAa,EAAE,uBAHL;AAIV,IAAA,mBAAmB,EAAE;AAJX,GAAD,CADT;AAhBD,CAAD,CAyBuB,CAAA,EAApB,oBAAoB,CAApB;SAAA,oB","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n// external dependencies\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\n// child components\n// @ts-ignore\nimport AccountNameDisplay from '@/components/AccountNameDisplay/AccountNameDisplay.vue';\n// @ts-ignore\nimport ProtectedPrivateKeyDisplay from '@/components/ProtectedPrivateKeyDisplay/ProtectedPrivateKeyDisplay.vue';\n// @ts-ignore\nimport ImportanceScoreDisplay from '@/components/ImportanceScoreDisplay/ImportanceScoreDisplay.vue';\n// @ts-ignore\nimport AccountContactQR from '@/components/AccountContactQR/AccountContactQR.vue';\n// @ts-ignore\nimport AccountAddressDisplay from '@/components/AccountAddressDisplay/AccountAddressDisplay.vue';\n// @ts-ignore\nimport AccountPublicKeyDisplay from '@/components/AccountPublicKeyDisplay/AccountPublicKeyDisplay.vue';\n// @ts-ignore\nimport AccountActions from '@/components/AccountActions/AccountActions.vue';\n// @ts-ignore\nimport AccountLinks from '@/components/AccountLinks/AccountLinks.vue';\n// @ts-ignore\nimport AccountAliasDisplay from '@/components/AccountAliasDisplay/AccountAliasDisplay.vue';\n// @ts-ignore\nimport AccountMetadataDisplay from '@/components/AccountMetadataDisplay/AccountMetadataDisplay.vue';\n// @ts-ignore\nimport AccountMultisigGraph from '@/components/AccountMultisigGraph/AccountMultisigGraph.vue';\n\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n\nimport { AccountService } from '@/services/AccountService';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\n// @ts-ignore\nimport ModalMetadataDisplay from '@/views/modals/ModalMetadataDisplay/ModalMetadataDisplay.vue';\nimport { MetadataModel } from '@/core/database/entities/MetadataModel';\n\n@Component({\n    components: {\n        AccountNameDisplay,\n        ProtectedPrivateKeyDisplay,\n        ImportanceScoreDisplay,\n        AccountContactQR,\n        AccountActions,\n        AccountLinks,\n        AccountAddressDisplay,\n        AccountPublicKeyDisplay,\n        AccountAliasDisplay,\n        AccountMetadataDisplay,\n        AccountMultisigGraph,\n        ModalFormProfileUnlock,\n        ModalMetadataDisplay,\n    },\n    computed: {\n        ...mapGetters({\n            defaultAccount: 'app/defaultAccount',\n            currentAccount: 'account/currentAccount',\n            knownAccounts: 'account/knownAccounts',\n            accountMetadataList: 'metadata/accountMetadataList',\n        }),\n    },\n})\nexport class AccountDetailsPageTs extends Vue {\n    /**\n     * Default account\n     * @see {Store.Account}\n     * @var {string}\n     */\n    public defaultAccount: string;\n\n    /**\n     * known accounts on current network\n     * @type {AccountModel[]}\n     */\n    public knownAccounts: AccountModel[];\n\n    /**\n     * account metadata list\n     * @type {MetadataModel[]}\n     */\n    public accountMetadataList: MetadataModel[];\n\n    /**\n     * Whether account is currently being unlocked\n     * @var {boolean}\n     */\n    public isUnlockingAccount: boolean = false;\n\n    /**\n     * metadata detail modal visibility\n     */\n    public showMetadataDetailModal: boolean = false;\n\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n    public readonly accountService: AccountService = new AccountService();\n\n    public async deleteAccount() {\n        if (this.currentAccount) {\n            this.hasAccountUnlockModal = true;\n            return;\n        }\n    }\n\n    public get hasAccountUnlockModal(): boolean {\n        return this.isUnlockingAccount;\n    }\n\n    public set hasAccountUnlockModal(f: boolean) {\n        this.isUnlockingAccount = f;\n    }\n    /**\n     * When account is unlocked, the sub account can be created\n     */\n    public async onAccountUnlocked() {\n        try {\n            await this.$store.dispatch('account/DELETE_CURRENT_ACCOUNT', this.currentAccount);\n        } catch (e) {\n            this.$store.dispatch('notification/ADD_ERROR', 'An error happened, please try again.');\n            console.error(e);\n        }\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/store/AwaitLock.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/store/AwaitLock.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvaGVyby9sYXJlZC13YWxsZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgppbXBvcnQgeyBfX2F3YWl0ZXIgfSBmcm9tICJ0c2xpYiI7Ci8qCiAqIENvcHlyaWdodCAyMDIwIE5FTSAoaHR0cHM6Ly9uZW0uaW8pCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKi8KCmltcG9ydCBBd2FpdExvY2tJbXBsIGZyb20gJ2F3YWl0LWxvY2snOwpleHBvcnQgdmFyIEF3YWl0TG9jayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlIGEgbG9jayBpbnN0YW5jZQogICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAqIEBwYXJhbSBsb2NrCiAgICovCiAgZnVuY3Rpb24gQXdhaXRMb2NrKAogIC8qKgogICAqIFRoZSBsb2NrIHNwZWNpYWxpemF0aW9uCiAgICogQHZhciB7QXdhaXRMb2NrSW1wbH0KICAgKi8KICBsb2NrKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXdhaXRMb2NrKTsKCiAgICB0aGlzLmxvY2sgPSBsb2NrOwogIH0KICAvKioKICAgKiBDcmVhdGUgYSBsb2NrCiAgICogQHJldHVybiB7QXdhaXRMb2NrfQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKEF3YWl0TG9jaywgW3sKICAgIGtleTogImluaXRpYWxpemUiLAoKICAgIC8qKgogICAgICogSGVscGVyIG1ldGhvZCBmb3IgdGhlIGluaXRpYWxpemUgY2FsbGJhY2suCiAgICAgKiBAcGFyYW0gY2FsbGJhY2sKICAgICAqIEBwYXJhbSBzdG9yZQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShjYWxsYmFjaywgX3JlZikgewogICAgICB2YXIgZ2V0dGVycyA9IF9yZWYuZ2V0dGVyczsKICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2suYWNxdWlyZUFzeW5jKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmIChnZXR0ZXJzLmdldEluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNjsKICAgICAgICAgICAgICAgIHRoaXMubG9jay5yZWxlYXNlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDYpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzIsLCA2LCA5XV0pOwogICAgICB9KSk7CiAgICB9CiAgICAvKioKICAgICAqIEhlbHBlciBtZXRob2QgZm9yIHRoZSB1bml0aWFsaXplIGNhbGxiYWNrCiAgICAgKiBAcGFyYW0gY2FsbGJhY2sKICAgICAqIEBwYXJhbSBzdG9yZQogICAgICovCgogIH0sIHsKICAgIGtleTogInVuaW5pdGlhbGl6ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5pbml0aWFsaXplKGNhbGxiYWNrLCBfcmVmMikgewogICAgICB2YXIgZ2V0dGVycyA9IF9yZWYyLmdldHRlcnM7CiAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NrLmFjcXVpcmVBc3luYygpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFnZXR0ZXJzLmdldEluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNjsKICAgICAgICAgICAgICAgIHRoaXMubG9jay5yZWxlYXNlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmZpbmlzaCg2KTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzLCBbWzIsLCA2LCA5XV0pOwogICAgICB9KSk7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJjcmVhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHsKICAgICAgcmV0dXJuIG5ldyBBd2FpdExvY2sobmV3IEF3YWl0TG9ja0ltcGwoKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXdhaXRMb2NrOwp9KCk7"},{"version":3,"sources":["/home/hero/lared-wallet/src/store/AwaitLock.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAeA,OAAO,aAAP,MAA0B,YAA1B;AAEA,WAAa,SAAb;AACI;;;;;AAKA;AACI;;;;AAImB,EAAA,IALvB,EAK0C;AAAA;;AAAnB,SAAA,IAAA,GAAA,IAAA;AACnB;AAEJ;;;;;;AAdJ;AAAA;;AAsBI;;;;;AAtBJ,+BA2BqB,QA3BrB,QA2B0C;AAAA,UAAT,OAAS,QAAT,OAAS;;;;;;;AAClC,uBAAM,KAAK,IAAL,CAAU,YAAV,EAAN;;;;;oBAES,OAAO,CAAC,c;;;;;;AACT,uBAAM,QAAQ,EAAd;;;;AAGJ,qBAAK,IAAL,CAAU,OAAV;;;;;;;;;;AAEP;AAED;;;;;;AAtCJ;AAAA;AAAA,iCA2CuB,QA3CvB,SA2C4C;AAAA,UAAT,OAAS,SAAT,OAAS;;;;;;;AACpC,uBAAM,KAAK,IAAL,CAAU,YAAV,EAAN;;;;;qBAEQ,OAAO,CAAC,c;;;;;;AACR,uBAAM,QAAQ,EAAd;;;;AAGJ,qBAAK,IAAL,CAAU,OAAV;;;;;;;;;;AAEP;AApDL;AAAA;AAAA,6BAkBiB;AACT,aAAO,IAAI,SAAJ,CAAc,IAAI,aAAJ,EAAd,CAAP;AACH;AApBL;;AAAA;AAAA","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport AwaitLockImpl from 'await-lock';\n\nexport class AwaitLock {\n    /**\n     * Create a lock instance\n     * @access private\n     * @param lock\n     */\n    private constructor(\n        /**\n         * The lock specialization\n         * @var {AwaitLockImpl}\n         */\n        protected readonly lock: AwaitLockImpl,\n    ) {}\n\n    /**\n     * Create a lock\n     * @return {AwaitLock}\n     */\n    static create() {\n        return new AwaitLock(new AwaitLockImpl());\n    }\n\n    /**\n     * Helper method for the initialize callback.\n     * @param callback\n     * @param store\n     */\n    async initialize(callback, { getters }) {\n        await this.lock.acquireAsync();\n        try {\n            if (!getters.getInitialized) {\n                await callback();\n            }\n        } finally {\n            this.lock.release();\n        }\n    }\n\n    /**\n     * Helper method for the unitialize callback\n     * @param callback\n     * @param store\n     */\n    async uninitialize(callback, { getters }) {\n        await this.lock.acquireAsync();\n        try {\n            if (getters.getInitialized) {\n                await callback();\n            }\n        } finally {\n            this.lock.release();\n        }\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormAccountNameUpdate/FormAccountNameUpdateTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormAccountNameUpdate/FormAccountNameUpdateTs.ts","mtime":1611927204604},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/views/forms/FormAccountNameUpdate/FormAccountNameUpdateTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,UAAT,QAA2B,MAA3B,C,CAEA;;AACA,SAAS,iBAAT,QAAkC,qCAAlC;AAEA,SAAS,gBAAT,QAAiC,+BAAjC,C,CACA;;AACA,SAAS,kBAAT,EAA6B,kBAA7B,QAAuD,cAAvD,C,CACA;;AACA,OAAO,YAAP,MAAyB,4CAAzB,C,CACA;;AACA,OAAO,WAAP,MAAwB,0CAAxB,C,CACA;;AACA,OAAO,OAAP,MAAoB,kCAApB,C,CACA;;AACA,OAAO,sBAAP,MAAmC,kEAAnC;AACA,SAAS,aAAT,QAA8B,4BAA9B;;AAkBA,IAAa,uBAAb;AAAA;;AAAA;;AAAA,qCAAA;AAAA;;AAAA;;;AAeI;;;AAGG;;AACI,UAAA,eAAA,GAAkB,iBAAlB;AAEP;;;AAGG;;AACI,UAAA,kBAAA,GAA8B,KAA9B;AAEP;;;AAGG;;AACI,UAAA,SAAA,GAAY;AACf,MAAA,IAAI,EAAE;AADS,KAAZ;AA/BX;AAwFC,GAxFD,CA6CI;;;AA7CJ;AAAA;AAsDI;;AAEA;;;AAGG;AA3DP,+BA4DmB;AAAA;;AACX,WAAK,qBAAL,GAA6B,IAA7B,CADW,CAGX;;AACA,WAAK,SAAL,CAAe,YAAK;AAChB,QAAA,MAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,KAApB;AACH,OAFD;AAGH;AAED;;AAEG;;AAvEP;AAAA;AAAA,wCAwEkC;;;;;;;;AAEtB,uBAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,qCAArB,EAA4D,KAAK,SAAL,CAAe,IAA3E,CAAN;;;AACA,qBAAK,MAAL,CAAY,QAAZ,CAAqB,0BAArB,EAAiD,gBAAgB,CAAC,iBAAlE;AACA,qBAAK,KAAL,CAAW,QAAX,EAAqB,KAAK,SAA1B;;;;;;;AAEA,qBAAK,MAAL,CAAY,QAAZ,CAAqB,wBAArB,EAA+C,sCAA/C;AACA,gBAAA,OAAO,CAAC,KAAR;;;;;;;;;AAEP;AACD;;AAEG;;AApFP;AAAA;AAAA,2CAqF+B;AACvB,WAAK,SAAL,CAAe,IAAf,GAAsB,aAAa,CAAC,WAAd,CAA0B,KAAK,SAAL,CAAe,IAAzC,CAAtB;AACH;AAvFL;AAAA;AAAA,wBA8CoC;AAC5B,aAAO,KAAK,kBAAZ;AACH,KAhDL;AAAA,sBAkDqC,CAlDrC,EAkD+C;AACvC,WAAK,kBAAL,GAA0B,CAA1B;AACH;AApDL;;AAAA;AAAA,EAA6C,GAA7C,CAAA;;AAAa,uBAAuB,GAAA,UAAA,CAAA,CAhBnC,SAAS,CAAC;AACP,EAAA,UAAU,EAAE;AACR,IAAA,kBAAkB,EAAlB,kBADQ;AAER,IAAA,kBAAkB,EAAlB,kBAFQ;AAGR,IAAA,YAAY,EAAZ,YAHQ;AAIR,IAAA,WAAW,EAAX,WAJQ;AAKR,IAAA,OAAO,EAAP,OALQ;AAMR,IAAA,sBAAsB,EAAtB;AANQ,GADL;AASP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,WAAW,EAAE,qBADH;AAEV,IAAA,cAAc,EAAE;AAFN,GAAD,CADT;AATD,CAAD,CAgB0B,CAAA,EAAvB,uBAAuB,CAAvB;SAAA,uB","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { NetworkType } from 'symbol-sdk';\n// internal dependencies\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { NotificationType } from '@/core/utils/NotificationType';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\nimport { FilterHelpers } from '@/core/utils/FilterHelpers';\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        FormWrapper,\n        FormRow,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            networkType: 'network/networkType',\n            currentAccount: 'account/currentAccount',\n        }),\n    },\n})\nexport class FormAccountNameUpdateTs extends Vue {\n    /**\n     * Currently active profile\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Currently active network type\n     * @see {Store.Network}\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Validation rules\n     * @var {ValidationRuleset}\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Whether account is currently being unlocked\n     * @var {boolean}\n     */\n    public isUnlockingAccount: boolean = false;\n\n    /**\n     * Form fields\n     * @var {Object}\n     */\n    public formItems = {\n        name: '',\n    };\n\n    /**\n     * Type the ValidationObserver refs\n     * @type {{\n     *     observer: InstanceType<typeof ValidationObserver>\n     *   }}\n     */\n    public $refs!: {\n        observer: InstanceType<typeof ValidationObserver>;\n    };\n\n    /// region computed properties getter/setter\n    public get hasAccountUnlockModal(): boolean {\n        return this.isUnlockingAccount;\n    }\n\n    public set hasAccountUnlockModal(f: boolean) {\n        this.isUnlockingAccount = f;\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Submit action asks for account unlock\n     * @return {void}\n     */\n    public onSubmit() {\n        this.hasAccountUnlockModal = true;\n\n        // resets form validation\n        this.$nextTick(() => {\n            this.$refs.observer.reset();\n        });\n    }\n\n    /**\n     * When account is unlocked, the sub account can be created\n     */\n    public async onAccountUnlocked() {\n        try {\n            await this.$store.dispatch('account/UPDATE_CURRENT_ACCOUNT_NAME', this.formItems.name);\n            this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.OPERATION_SUCCESS);\n            this.$emit('submit', this.formItems);\n        } catch (e) {\n            this.$store.dispatch('notification/ADD_ERROR', 'An error happened, please try again.');\n            console.error(e);\n        }\n    }\n    /**\n     * filter tags\n     */\n    public stripTagsAccountName() {\n        this.formItems.name = FilterHelpers.stripFilter(this.formItems.name);\n    }\n}\n"],"sourceRoot":""}]}
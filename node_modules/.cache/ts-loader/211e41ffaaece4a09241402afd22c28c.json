{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/forms/FormSubAccountCreation/FormSubAccountCreationTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/forms/FormSubAccountCreation/FormSubAccountCreationTs.ts","mtime":1606213958969},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/forms/FormSubAccountCreation/FormSubAccountCreationTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Account, NetworkType, Password, Crypto } from 'symbol-sdk';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\n// internal dependencies\nimport { ValidationRuleset } from '@/core/validation/ValidationRuleset';\nimport { DerivationService } from '@/services/DerivationService';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { AccountService } from '@/services/AccountService';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n// child components\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n// @ts-ignore\nimport ErrorTooltip from '@/components/ErrorTooltip/ErrorTooltip.vue';\n// @ts-ignore\nimport FormWrapper from '@/components/FormWrapper/FormWrapper.vue';\n// @ts-ignore\nimport FormRow from '@/components/FormRow/FormRow.vue';\n// @ts-ignore\nimport ModalFormProfileUnlock from '@/views/modals/ModalFormProfileUnlock/ModalFormProfileUnlock.vue';\n// configuration\nimport { appConfig } from '@/config';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { FilterHelpers } from '@/core/utils/FilterHelpers';\n\nconst { MAX_SEED_ACCOUNTS_NUMBER } = appConfig.constants;\n\n@Component({\n    components: {\n        ValidationObserver,\n        ValidationProvider,\n        ErrorTooltip,\n        FormWrapper,\n        FormRow,\n        ModalFormProfileUnlock,\n    },\n    computed: {\n        ...mapGetters({\n            networkType: 'network/networkType',\n            currentProfile: 'profile/currentProfile',\n            knownAccounts: 'account/knownAccounts',\n            isPrivateKeyProfile: 'profile/isPrivateKeyProfile',\n        }),\n    },\n})\nexport class FormSubAccountCreationTs extends Vue {\n    /**\n     * Currently active profile\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Known accounts identifiers\n     */\n    public knownAccounts: AccountModel[];\n\n    /**\n     * Currently active network type\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Accounts repository\n     */\n    public accountService: AccountService;\n\n    /**\n     * Derivation paths service\n     */\n    public paths: DerivationService;\n\n    /**\n     * Validation rules\n     */\n    public validationRules = ValidationRuleset;\n\n    /**\n     * Whether account is currently being unlocked\n     */\n    public isUnlockingAccount: boolean = false;\n\n    /**\n     * Current unlocked password\n     * @var {Password}\n     */\n    public currentPassword: Password;\n\n    public isPrivateKeyProfile: boolean;\n\n    /**\n     * Form fields\n     * @var {Object}\n     */\n    public formItems = {\n        type: '',\n        privateKey: '',\n        name: '',\n    };\n\n    /**\n     * Type the ValidationObserver refs\n     * @type {{\n     *     observer: InstanceType<typeof ValidationObserver>\n     *   }}\n     */\n    public $refs!: {\n        observer: InstanceType<typeof ValidationObserver>;\n    };\n\n    public created() {\n        this.accountService = new AccountService();\n        this.paths = new DerivationService();\n        this.formItems.type = this.isPrivateKeyProfile ? 'privatekey_account' : 'child_account';\n    }\n\n    /// region computed properties getter/setter\n    public get hasAccountUnlockModal(): boolean {\n        return this.isUnlockingAccount;\n    }\n\n    public set hasAccountUnlockModal(f: boolean) {\n        this.isUnlockingAccount = f;\n    }\n\n    public get knownPaths(): string[] {\n        if (!this.knownAccounts || !this.knownAccounts.length) {\n            return [];\n        }\n        // filter accounts to only known account names\n        return this.knownAccounts.map((a) => a.path).filter((p) => p);\n    }\n\n    /// end-region computed properties getter/setter\n\n    /**\n     * Submit action asks for account unlock\n     * @return {void}\n     */\n    public onSubmit() {\n        this.hasAccountUnlockModal = true;\n\n        // // resets form validation\n        // this.$nextTick(() => {\n        //   this.$refs.observer.reset()\n        // })\n    }\n\n    /**\n     * When account is unlocked, the sub account can be created\n     */\n    public async onAccountUnlocked(account: Account, password: Password) {\n        this.currentPassword = password;\n\n        // - interpret form items\n        const values = { ...this.formItems };\n        const type = values.type && ['child_account', 'privatekey_account'].includes(values.type) ? values.type : 'child_account';\n\n        try {\n            // - create sub account (can be either derived or by private key)\n            let subAccount: AccountModel;\n            switch (type) {\n                default:\n                case 'child_account':\n                    subAccount = this.deriveNextChildAccount(values.name);\n                    break;\n\n                case 'privatekey_account':\n                    subAccount = this.accountService.getSubAccountByPrivateKey(\n                        this.currentProfile,\n                        this.currentPassword,\n                        this.formItems.name,\n                        this.formItems.privateKey,\n                        this.networkType,\n                    );\n                    break;\n            }\n\n            // - return if subAccount is undefined\n            if (!subAccount) {\n                return;\n            }\n\n            // Verify that the import is repeated\n            const hasAddressInfo = this.knownAccounts.find((w) => w.address === subAccount.address);\n            if (hasAddressInfo !== undefined) {\n                this.$store.dispatch(\n                    'notification/ADD_ERROR',\n                    `This private key already exists. The account name is ${hasAddressInfo.name}`,\n                );\n                return null;\n            }\n\n            // - remove password before GC\n            this.currentPassword = null;\n\n            // - use repositories for storage\n            this.accountService.saveAccount(subAccount);\n\n            // - update app state\n            await this.$store.dispatch('profile/ADD_ACCOUNT', subAccount);\n            await this.$store.dispatch('account/SET_CURRENT_ACCOUNT', subAccount);\n            await this.$store.dispatch('account/SET_KNOWN_ACCOUNTS', this.currentProfile.accounts);\n            this.$store.dispatch('notification/ADD_SUCCESS', NotificationType.OPERATION_SUCCESS);\n            this.$emit('submit', this.formItems);\n        } catch (e) {\n            this.$store.dispatch('notification/ADD_ERROR', 'An error happened, please try again.');\n            console.error(e);\n        }\n    }\n\n    /**\n     * Use HD account derivation to get next child account\n     * @param {string} child account name\n     * @return {AccountModel}\n     */\n    private deriveNextChildAccount(childAccountName: string): AccountModel | null {\n        // - don't allow creating more than 10 accounts\n        if (this.knownPaths.length >= MAX_SEED_ACCOUNTS_NUMBER) {\n            this.$store.dispatch(\n                'notification/ADD_ERROR',\n                this.$t(NotificationType.TOO_MANY_SEED_ACCOUNTS_ERROR, {\n                    maxSeedAccountsNumber: MAX_SEED_ACCOUNTS_NUMBER,\n                }),\n            );\n            return null;\n        }\n\n        // - get next path\n        const nextPath = this.paths.getNextAccountPath(this.knownPaths);\n\n        this.$store.dispatch('diagnostic/ADD_DEBUG', 'Adding child account with derivation path: ' + nextPath);\n\n        // - decrypt mnemonic\n        const encSeed = this.currentProfile.seed;\n        const passphrase = Crypto.decrypt(encSeed, this.currentPassword.value);\n        const mnemonic = new MnemonicPassPhrase(passphrase);\n\n        // create account by mnemonic\n        return this.accountService.getChildAccountByPath(\n            this.currentProfile,\n            this.currentPassword,\n            mnemonic,\n            nextPath,\n            this.networkType,\n            childAccountName,\n        );\n    }\n    /**\n     * filter tags\n     */\n    public stripTagsAccountName() {\n        this.formItems.name = FilterHelpers.stripFilter(this.formItems.name);\n    }\n}\n"],"sourceRoot":""}]}
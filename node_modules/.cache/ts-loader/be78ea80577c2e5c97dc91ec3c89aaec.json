{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js??ref--13-2!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/HardwareConfirmationButton/HardwareConfirmationButtonTs.ts","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/HardwareConfirmationButton/HardwareConfirmationButtonTs.ts","mtime":1611927202096},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/.babelrc","mtime":1611927226200},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/HardwareConfirmationButton/HardwareConfirmationButtonTs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,UAAT,QAA2B,MAA3B;AACA,SAAsB,iBAAtB,QAAqG,YAArG;AAIA,OAAO,aAAP,MAA0B,4BAA1B;AAEA,SAAS,IAAT,QAAiC,MAAjC;AACA,SAAS,GAAT,QAAoB,gBAApB;;AASA,IAAa,4BAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAQI;;;AAGG;AAXP,sCAYgC;;;;;;iDACjB,KAAK,KAAL,CAAW,SAAX,EAAsB,IAAtB,C;;;;;;;;;AACV,KAdL,CAeI;;AAfJ;AAAA;AAAA,+CAgB+B,CAhB/B,EAgBwD;AAChD,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH;AAlBL;AAAA;AAAA,oCAoBoB,QApBpB,EAoByC;AACjC;AACA,UAAM,OAAO,GAAiB,aAAa,CAAC,kBAAd,CAAiC;AAC3D,QAAA,IAAI,EAAE,KAAK,cAAL,CAAoB,IADiC;AAE3D,QAAA,WAAW,EAAE;AAF8C,OAAjC,CAA9B;AAIA,aAAO,IAAI,CAAC,OAAD,CAAJ,CAAc,IAAd,CACH,GAAG,CAAC,UAAC,MAAD,EAAW;AACX,YAAI,CAAC,MAAM,CAAC,OAAZ,EAAqB;AACjB,gBAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAP,CAAe,KAAzB,CAAN;AACH;;AACD,eAAO,IAAI,iBAAJ,CACH,MAAM,CAAC,OAAP,CAAe,IADZ,EAEH,QAAQ,CAAC,eAAT,CAAyB,IAFtB,EAGH,QAAQ,CAAC,MAAT,CAAgB,SAHb,EAIH,QAAQ,CAAC,IAJN,EAKH,QAAQ,CAAC,WALN,CAAP;AAOH,OAXE,CADA,CAAP;AAcH;AAxCL;;AAAA;AAAA,EAAkD,GAAlD,CAAA;;AAAa,4BAA4B,GAAA,UAAA,CAAA,CAPxC,SAAS,CAAC;AACP,EAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,UAAU,CAAC;AACV,IAAA,cAAc,EAAE;AADN,GAAD,CADT;AADD,CAAD,CAO+B,CAAA,EAA5B,4BAA4B,CAA5B;SAAA,4B","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Transaction, SignedTransaction, CosignatureTransaction, CosignatureSignedTransaction } from 'symbol-sdk';\n\n// internal dependencies\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport TrezorConnect from '@/core/utils/TrezorConnect';\nimport { TransactionSigner } from '@/services/TransactionAnnouncerService';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            currentAccount: 'account/currentAccount',\n        }),\n    },\n})\nexport class HardwareConfirmationButtonTs extends Vue implements TransactionSigner {\n    /**\n     * Currently active account\n     * @see {Store.Account}\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n\n    /**\n     * Process with hardware confirmation (currently trezor only)\n     * @return {void}\n     */\n    public async processHardware() {\n        return this.$emit('success', this);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    signCosignatureTransaction(t: CosignatureTransaction): Observable<CosignatureSignedTransaction> {\n        throw new Error('Not Implemented!!!');\n    }\n\n    signTransaction(stagedTx: Transaction): Observable<SignedTransaction> {\n        // - sign each transaction with TrezorConnect\n        const promise: Promise<any> = TrezorConnect.nemSignTransaction({\n            path: this.currentAccount.path,\n            transaction: stagedTx,\n        });\n        return from(promise).pipe(\n            map((result) => {\n                if (!result.success) {\n                    throw new Error(result.payload.error);\n                }\n                return new SignedTransaction(\n                    result.payload.data,\n                    stagedTx.transactionInfo.hash,\n                    stagedTx.signer.publicKey,\n                    stagedTx.type,\n                    stagedTx.networkType,\n                );\n            }),\n        );\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js!/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js!/home/hero/lared-wallet/node_modules/ts-loader/index.js??ref--13-3!/home/hero/lared-wallet/src/views/modals/ModalBackupProfile/ModalBackupProfileTs.ts","dependencies":[{"path":"/home/hero/lared-wallet/src/views/modals/ModalBackupProfile/ModalBackupProfileTs.ts","mtime":1606213958973},{"path":"/home/hero/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hero/lared-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/lared-wallet/src/views/modals/ModalBackupProfile/ModalBackupProfileTs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { Account, NetworkType, Password, Crypto, Address } from 'symbol-sdk';\n// internal dependencies\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\n// child components\n// @ts-ignore\nimport FormProfileUnlock from '@/views/forms/FormProfileUnlock/FormProfileUnlock.vue';\n// resources\n// @ts-ignore\nimport { AccountModel } from '@/core/database/entities/AccountModel';\nimport { MnemonicPassPhrase } from 'symbol-hd-wallets';\nimport { SymbolPaperWallet, IAccountInfo, IHDAccountInfo } from 'symbol-paper-wallets';\nimport { AccountService } from '@/services/AccountService';\nimport { UIHelpers } from '@/core/utils/UIHelpers';\n\n@Component({\n    components: { FormProfileUnlock },\n    computed: {\n        ...mapGetters({\n            currentProfile: 'profile/currentProfile',\n            networkType: 'network/networkType',\n            generationHash: 'network/generationHash',\n            knownAccounts: 'account/knownAccounts',\n        }),\n    },\n})\nexport class ModalBackupProfileTs extends Vue {\n    @Prop({\n        default: false,\n    })\n    visible: boolean;\n\n    /**\n     * Currently active profile\n     * @see {Store.Profile}\n     * @var {ProfileModel}\n     */\n    public currentProfile: ProfileModel;\n\n    /**\n     * Current networkType\n     * @see {Store.Network}\n     * @var {NetworkType}\n     */\n    public networkType: NetworkType;\n\n    /**\n     * Current generationHash\n     * @see {Store.Network}\n     * @var {string}\n     */\n    public generationHash: string;\n\n    /**\n     * Known accounts to the profile\n     */\n    public knownAccounts: AccountModel[];\n\n    /**\n     * Known accounts as paper-wallet IAccountInfo (array) type\n     * @var {IAccountInfo[]}\n     */\n    public knownAccountInfos: IAccountInfo[];\n\n    /**\n     * Whether account is unlocked\n     */\n    public accountUnlocked: boolean = false;\n\n    /**\n     * Mnemonic words (space delimited)\n     */\n    private plainMnemonic: string = null;\n\n    /**\n     * Account Service\n     * @var {AccountService}\n     */\n    public accountService: AccountService;\n\n    public downloadInProgress: boolean = false;\n\n    /**\n     * Visibility state\n     * @type {boolean}\n     */\n    get show(): boolean {\n        return this.visible;\n    }\n\n    /**\n     * Emits close event\n     */\n    set show(val) {\n        if (!val) {\n            this.$emit('close');\n        }\n    }\n\n    /**\n     * Hook called when the account has been unlocked\n     * @param {Account} account\n     */\n    public onAccountUnlocked(payload: { account: Account; password: Password }) {\n        // decrypt seed\n        const encSeed = this.currentProfile.seed;\n        this.plainMnemonic = Crypto.decrypt(encSeed, payload.password.value);\n        this.accountUnlocked = true;\n\n        this.knownAccountInfos = this.knownAccounts.map(\n            (account) =>\n                ({\n                    name: account.name,\n                    address: Address.createFromRawAddress(account.address).pretty(),\n                    publicKey: account.publicKey,\n                    privateKey: Crypto.decrypt(account.encryptedPrivateKey, payload.password.value),\n                } as IAccountInfo),\n        );\n    }\n\n    /**\n     * Hook called when child component FormProfileUnlock or\n     * HardwareConfirmationButton emit the 'error' event.\n     * @param {string} message\n     * @return {void}\n     */\n    public onError(error: string) {\n        this.$emit('error', error);\n    }\n\n    /**\n     * Life cycle hook\n     */\n    public created() {\n        this.accountService = new AccountService();\n    }\n\n    /**\n     * Hook called when the download button is clicked\n     * @return {void}\n     */\n    public async onDownload() {\n        if (!this.plainMnemonic) {\n            this.$store.dispatch('notification/ADD_ERROR', this.$t('mnemonic_not_found'));\n            return;\n        }\n        Vue.set(this, 'downloadInProgress', true);\n        setTimeout(async () => {\n            await this.generateAndDownloadPaperWallet();\n            Vue.set(this, 'downloadInProgress', false);\n        }, 800); // labor illusion\n    }\n\n    /**\n     * Generates and downloads paper-wallet for the root account and the profile(known) accounts\n     */\n    protected async generateAndDownloadPaperWallet(): Promise<boolean> {\n        const rootAccount: Account = this.accountService.getAccountByPath(new MnemonicPassPhrase(this.plainMnemonic), this.networkType);\n        const rootAccountInfo: IHDAccountInfo = {\n            mnemonic: this.plainMnemonic,\n            rootAccountPublicKey: rootAccount.publicKey,\n            rootAccountAddress: rootAccount.address.pretty(),\n        };\n\n        const paperWallet = new SymbolPaperWallet(rootAccountInfo, this.knownAccountInfos, this.networkType, this.generationHash);\n        const pdfArray: Uint8Array = await paperWallet.toPdf();\n        return UIHelpers.downloadBytesAsFile(pdfArray, `paper-wallet-${this.currentProfile.profileName}`, 'application/pdf');\n    }\n}\n"],"sourceRoot":""}]}
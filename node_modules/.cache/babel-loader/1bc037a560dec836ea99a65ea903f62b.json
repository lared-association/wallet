{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/modules/lared-paper-wallets/index.js","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/modules/lared-paper-wallets/index.js","mtime":1611927226295},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/modules/lared-paper-wallets/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","LaredPaperWallet","pdf_lib_1","require","fontkit_1","symbol_qr_library_1","encodedFont_1","encodedBasePdf_1","encodedBasePrivateKeyPdf_1","DEFAULT_GENERATION_HASH_SEED","MNEMONIC_POSITION","x","y","ADDRESS_POSITION","MNEMONIC_QR_POSITION","width","height","ADDRESS_QR_POSITION","hdAccountInfo","accountInfos","network","generationHashSeed","hdAccount","plainPdfFile","Buffer","default","PDFDocument","load","pdfDoc","notoSansFontBytes","registerFontkit","embedFont","notoSansFont","writeMnemonicPage","account","writeAccountPage","save","font","pages","getPages","page","writeAddress","rootAccountAddress","mnemonicWords","mnemonic","split","firstMnemonic","slice","Math","round","length","secondMnemonic","writePrivateInfo","join","plainMnemonicQR","MnemonicQR","writePrivateQR","contactQR","ContactQR","rootAccountPublicKey","writePublicQR","newPlainPdfFile","newPdfDoc","accountPage","address","privateKey","accountQR","AccountQR","name","publicKey","copyPages","addPage","drawText","size","color","rgb","privateLines","i","qr","toBase64","toPromise","qrBase64","embedPng","png","drawImage"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 NEM (https://nem.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LaredPaperWallet = void 0;\nconst pdf_lib_1 = require(\"pdf-lib\");\nconst fontkit_1 = __importDefault(require(\"@pdf-lib/fontkit\"));\nconst symbol_qr_library_1 = require(\"symbol-qr-library\");\nconst encodedFont_1 = __importDefault(require(\"./resources/encodedFont\"));\nconst encodedBasePdf_1 = __importDefault(require(\"./resources/encodedBasePdf\"));\nconst encodedBasePrivateKeyPdf_1 = __importDefault(require(\"./resources/encodedBasePrivateKeyPdf\"));\n/**\n * Default generation hash\n */\nconst DEFAULT_GENERATION_HASH_SEED = \"57F7DA205008026C776CB6AED843393F04CD458E0AA2D9F1D5F31A402072B2D6\";\n/**\n * Printing constants\n */\nconst MNEMONIC_POSITION = {\n    x: 200,\n    y: 36,\n};\nconst ADDRESS_POSITION = {\n    x: 200,\n    y: 90,\n};\nconst MNEMONIC_QR_POSITION = {\n    x: 290,\n    y: 180,\n    width: 120,\n    height: 120,\n};\nconst ADDRESS_QR_POSITION = {\n    x: 465,\n    y: 180,\n    width: 120,\n    height: 120,\n};\n/**\n * Lared Paper wallet class\n */\nclass LaredPaperWallet {\n    constructor(hdAccountInfo, accountInfos, network, generationHashSeed = DEFAULT_GENERATION_HASH_SEED) {\n        this.hdAccount = hdAccountInfo;\n        this.accountInfos = accountInfos;\n        this.network = network;\n        this.generationHashSeed = generationHashSeed;\n    }\n    /**\n     * Exports as a PDF Uin8Array\n     */\n    toPdf() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const plainPdfFile = new Buffer(encodedBasePdf_1.default, \"base64\");\n            let pdfDoc = yield pdf_lib_1.PDFDocument.load(plainPdfFile);\n            const notoSansFontBytes = new Buffer(encodedFont_1.default, \"base64\");\n            pdfDoc.registerFontkit(fontkit_1.default);\n            const notoSansFont = yield pdfDoc.embedFont(notoSansFontBytes);\n            pdfDoc = yield this.writeMnemonicPage(pdfDoc, notoSansFont);\n            for (let account of this.accountInfos) {\n                pdfDoc = yield this.writeAccountPage(account, pdfDoc);\n            }\n            return pdfDoc.save();\n        });\n    }\n    /**\n     * Writes the mnemonic page into the given pdfDoc\n     * @param pdfDoc\n     * @param font\n     */\n    writeMnemonicPage(pdfDoc, font) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pages = pdfDoc.getPages();\n            const page = pages[0];\n            yield this.writeAddress(this.hdAccount.rootAccountAddress, page, font);\n            const mnemonicWords = this.hdAccount.mnemonic.split(\" \");\n            const firstMnemonic = mnemonicWords.slice(0, Math.round(mnemonicWords.length / 2));\n            const secondMnemonic = mnemonicWords.slice(Math.round(mnemonicWords.length / 2), mnemonicWords.length);\n            yield this.writePrivateInfo([firstMnemonic.join(\" \"), secondMnemonic.join(\" \")], page, font);\n            const plainMnemonicQR = new symbol_qr_library_1.MnemonicQR(this.hdAccount.mnemonic, this.network, this.generationHashSeed);\n            yield this.writePrivateQR(plainMnemonicQR, pdfDoc, page);\n            const contactQR = new symbol_qr_library_1.ContactQR(\"Root account\", this.hdAccount.rootAccountPublicKey, this.network, this.generationHashSeed);\n            yield this.writePublicQR(contactQR, pdfDoc, page);\n            return pdfDoc;\n        });\n    }\n    /**\n     * Writes the account page into the given pdfDoc\n     * @param account\n     * @param pdfDoc\n     */\n    writeAccountPage(account, pdfDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const newPlainPdfFile = new Buffer(encodedBasePrivateKeyPdf_1.default, \"base64\");\n            const newPdfDoc = yield pdf_lib_1.PDFDocument.load(newPlainPdfFile);\n            const notoSansFontBytes = new Buffer(encodedFont_1.default, \"base64\");\n            newPdfDoc.registerFontkit(fontkit_1.default);\n            const font = yield newPdfDoc.embedFont(notoSansFontBytes);\n            let accountPage = newPdfDoc.getPages()[0];\n            yield this.writeAddress(account.address, accountPage, font);\n            yield this.writePrivateInfo([account.privateKey], accountPage, font);\n            const accountQR = new symbol_qr_library_1.AccountQR(account.privateKey, this.network, this.generationHashSeed);\n            yield this.writePrivateQR(accountQR, newPdfDoc, accountPage);\n            const contactQR = new symbol_qr_library_1.ContactQR(account.name, account.publicKey, this.network, this.generationHashSeed);\n            yield this.writePublicQR(contactQR, newPdfDoc, accountPage);\n            [accountPage] = yield pdfDoc.copyPages(newPdfDoc, [0]);\n            pdfDoc.addPage(accountPage);\n            return pdfDoc;\n        });\n    }\n    /**\n     * Writes address into the given pdfDoc\n     * @param address\n     * @param page\n     * @param font\n     */\n    writeAddress(address, page, font) {\n        return __awaiter(this, void 0, void 0, function* () {\n            page.drawText(address, {\n                x: ADDRESS_POSITION.x,\n                y: ADDRESS_POSITION.y,\n                size: 12,\n                font: font,\n                color: pdf_lib_1.rgb(61 / 256, 61 / 256, 61 / 256),\n            });\n            return page;\n        });\n    }\n    /**\n     * Writes private info into the pdfDoc\n     * @param privateLines\n     * @param page\n     * @param font\n     */\n    writePrivateInfo(privateLines, page, font) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < privateLines.length; i++) {\n                page.drawText(privateLines[i], {\n                    x: MNEMONIC_POSITION.x,\n                    y: MNEMONIC_POSITION.y - 16 * i,\n                    size: 9,\n                    font: font,\n                    color: pdf_lib_1.rgb(61 / 256, 61 / 256, 61 / 256),\n                });\n            }\n            return page;\n        });\n    }\n    /**\n     * Writes the private QR (mnemonic or private key) into the given pdfDoc\n     * @param qr\n     * @param pdfDoc\n     * @param page\n     */\n    writePrivateQR(qr, pdfDoc, page) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const qrBase64 = yield qr.toBase64().toPromise();\n            const png = yield pdfDoc.embedPng(qrBase64);\n            page.drawImage(png, {\n                x: MNEMONIC_QR_POSITION.x,\n                y: MNEMONIC_QR_POSITION.y,\n                width: MNEMONIC_QR_POSITION.width,\n                height: MNEMONIC_QR_POSITION.height,\n            });\n            return page;\n        });\n    }\n    /**\n     * Writes the public QR into the given pdfDoc\n     * @param qr\n     * @param pdfDoc\n     * @param page\n     */\n    writePublicQR(qr, pdfDoc, page) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const qrBase64 = yield qr.toBase64().toPromise();\n            const png = yield pdfDoc.embedPng(qrBase64);\n            page.drawImage(png, {\n                x: ADDRESS_QR_POSITION.x,\n                y: ADDRESS_QR_POSITION.y,\n                width: ADDRESS_QR_POSITION.width,\n                height: ADDRESS_QR_POSITION.height,\n            });\n            return page;\n        });\n    }\n}\nexports.LaredPaperWallet = LaredPaperWallet;\n//# sourceMappingURL=index.js.map"]}]}
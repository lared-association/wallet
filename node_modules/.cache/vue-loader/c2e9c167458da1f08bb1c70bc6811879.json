{"remainingRequest":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/DisabledFormOverlay/DisabledFormOverlay.vue?vue&type=style&index=0&id=eb003a48&lang=less&scoped=true&","dependencies":[{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/src/components/DisabledFormOverlay/DisabledFormOverlay.vue","mtime":1611927226875},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/less-loader/dist/cjs.js","mtime":1611927258426},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/justi/Desktop/SUPERHOW/SymbolWallet/lared-wallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJy4vRGlzYWJsZWRGb3JtT3ZlcmxheS5sZXNzJzsK"},{"version":3,"sources":["DisabledFormOverlay.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA","file":"DisabledFormOverlay.vue","sourceRoot":"src/components/DisabledFormOverlay","sourcesContent":["<template>\n    <div v-if=\"alert.length\" class=\"multisig_ban_container\">\n        <Alert type=\"error\">\n            {{ $t(alert) }}\n        </Alert>\n        <div class=\"is_multisig un_click radius\" />\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Prop } from 'vue-property-decorator';\nimport { mapGetters } from 'vuex';\nimport { MosaicId, MultisigAccountInfo } from 'symbol-sdk';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { AccountModel } from '@/core/database/entities/AccountModel';\n\n@Component({\n    computed: {\n        ...mapGetters({\n            networkMosaic: 'mosaic/networkMosaic',\n            currentAccount: 'account/currentAccount',\n            currentAccountMultisigInfo: 'account/currentAccountMultisigInfo',\n        }),\n    },\n})\nexport default class DisabledFormOverlay extends Vue {\n    /**\n     * Overrides checks\n     * @type{boolean}\n     */\n    @Prop({ default: false }) whitelisted: boolean;\n\n    /**\n     * Networks currency mosaic\n     * @var {MosaicId}\n     */\n    public networkMosaic: MosaicId;\n\n    /**\n     * Current Account\n     * @var {AccountModel}\n     */\n    public currentAccount: AccountModel;\n    /**\n     * Current account multisig info\n     * @type {MultisigAccountInfo}\n     */\n    public currentAccountMultisigInfo: MultisigAccountInfo;\n\n    /// region computed properties getter/setter\n    /**\n     * Whether a form should be disabled to a multisig account\n     * @returns {boolean}\n     */\n    get disableToMultisig(): boolean {\n        // Don't disable form when the form is multisig-friendly\n        const multisigFriendlyRouteNames = ['dashboard.invoice'];\n\n        if (multisigFriendlyRouteNames.some((a) => this.$route.matched.map(({ name }) => name).some((b) => b === a))) {\n            return false;\n        }\n        // Disable the forms to accounts with cosignatories\n        return (\n            (this.currentAccountMultisigInfo && this.currentAccountMultisigInfo.cosignatoryAddresses.length > 0) ||\n            this.currentAccount.isMultisig\n        );\n    }\n\n    /**\n     * Alert to be displayed\n     * Id Alert is an empty string, this overlay won't render\n     * @returns {string}\n     */\n    get alert(): string {\n        if (this.whitelisted) {\n            return '';\n        }\n        if (!this.networkMosaic) {\n            return NotificationType.NO_NETWORK_CURRENCY;\n        }\n        if (this.disableToMultisig) {\n            this.$emit('disableForm');\n            return NotificationType.MULTISIG_ACCOUNTS_NO_TX;\n        }\n        return '';\n    }\n    /// end-region computed properties getter/setter\n}\n</script>\n\n<style lang=\"less\" scoped>\n@import './DisabledFormOverlay.less';\n</style>\n"]}]}